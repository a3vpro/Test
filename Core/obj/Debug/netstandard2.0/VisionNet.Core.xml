<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VisionNet.Core</name>
    </assembly>
    <members>
        <member name="T:VisionNet.Core.Abstractions.ConnectionStatus">
            <summary>
            State of the connection
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ConnectionStatus.Initial">
            <summary>
            Initial state. Unprepared
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ConnectionStatus.ReadyToConnect">
            <summary>
            The device is ready to connect
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ConnectionStatus.Connecting">
            <summary>
            Connecting to the device
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ConnectionStatus.Connected">
            <summary>
            The device is connected
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ConnectionStatus.Error">
            <summary>
            The device is abnormaly disconnected
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ConnectionStatus.Disconnected">
            <summary>
            The device is unconnected successfully
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ConnectionStatusTransition">
            <summary>
            Represents a transition for a connection status, ensuring it adheres to validation rules defined by the base class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ConnectionStatusTransition.#ctor">
            <summary> The ConnectionStatusTransition function is a constructor that creates the possible transitions between states for the ConnectionStatus state machine.</summary>
            <returns> The connectionstatustransition function.</returns>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ExecutionStatus">
            <summary>
            State of the service
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ExecutionStatus.Initial">
            <summary>
            Initial state. Unprepared
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ExecutionStatus.Ready">
            <summary>
            The procedure is ready to execute
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ExecutionStatus.Executing">
            <summary>
            The execution is running
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ExecutionStatus.Aborted">
            <summary>
            The execution is aborted
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ExecutionStatus.Error">
            <summary>
            The execution is finished unsuccessfully
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ExecutionStatus.Finished">
            <summary>
            The procedure is completly finished
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.FilterOption">
            <summary>
            Specifies the filtering options available for processing collections or datasets.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.FilterOption.All">
            <summary>
            Indicates that all items should be included without filtering.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.FilterOption.Include">
            <summary>
            Indicates that only items matching the specified criteria should be included.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.FilterOption.Exclude">
            <summary>
            Indicates that items matching the specified criteria should be excluded.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IAsyncExecutable">
            <summary>
            Specifies a executable instance
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IAsyncExecutable.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Perform the execute command in asynchronous mode
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ICasteable">
            <summary>
            Defines an interface for objects that can be cast to a specified type.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ICasteable.Cast``1">
            <summary>
            Casts the current object to the specified type.
            </summary>
            <typeparam name="T">The type to cast the object to.</typeparam>
            <returns>The object cast to the specified type.</returns>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ICheckeable`1">
            <summary>
            Defines a contract for objects that can be checked for validity.
            </summary>
            <typeparam name="T">The type of the result that is returned from the check, which must derive from <see cref="T:VisionNet.Core.Abstractions.InvalidCheckResult"/>.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ICheckeable`1.TryCheck(`0@)">
            <summary>
            Attempts to perform a check and outputs the result.
            </summary>
            <param name="result">The result of the check, which is of type <typeparamref name="T"/>.</param>
            <returns>True if the check was successful, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ICheckeable`1.Check">
            <summary>
            Performs a check without returning the result. 
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ICleanable">
            <summary>
            Cleanable interface
            </summary>
            <summary>
            Defines an interface for objects that can perform a cleanup operation.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ICleanable.CleanUp">
            <summary>
            Performs the cleanup operation on the object, releasing resources or resetting states as necessary.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ICloneable`1">
            <summary>
            Clonable interface
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ICloneable`1.Clone">
            <summary>
            Creates a new instance of the object <typeparamref name="T"/> that is a deep copy of the current instance.
            </summary>
            <returns>A new object <typeparamref name="T"/> that is a copy of this instance.</returns>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IConnectable">
            <summary>
            Represents a connectable instance that can connect and disconnect from a server.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IConnectable.ConnectionTimeout">
            <summary>
            Gets the timeout duration for connecting to a server, expressed in milliseconds.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IConnectable.ConnectionStatus">
            <summary>
            Gets the current status of the connection.
            </summary>
            <value>
            The current connection status, represented by an instance of <see cref="P:VisionNet.Core.Abstractions.IConnectable.ConnectionStatus"/>.
            </value>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IConnectable.Connect">
            <summary>
            Initiates a connection to the server.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IConnectable.Disconnect">
            <summary>
            Disconnects from the server.
            If already disconnected, this method does nothing.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ICopiable">
            <summary>
            Defines an interface for objects that can be copied or cloned.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ICopiable.CloneTo(System.Object@)">
            <summary>
            Clones the current object and copies its data to the specified destination object.
            </summary>
            <param name="destiny">The object that will receive the copied data.</param>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IDescriptible">
            <summary>
            Specifies a descriptible instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IDescriptible.Description">
            <summary>
            The description of the instance
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IDisableable">
            <summary>
            Specifies a ableable and disableable instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IDisableable.Enabled">
            <summary>
            Specifies that the instance is enabled or disabled
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IErrorBox">
            <summary>
            Defines the interface for handling and displaying exceptions in a dialog box.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IErrorBox.ShowException(System.Boolean,System.Exception,System.String)">
            <summary>
            Displays an exception message, optionally in a dialog box.
            </summary>
            <param name="dialog">Indicates whether the exception should be displayed in a dialog box.</param>
            <param name="exception">The exception containing detailed error information.</param>
            <param name="shortMessage">A brief description of the exception.</param>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IErrorBox.ShowInfo(System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Displays the informational message
            </summary>
            <param name="information">Information to display</param>
            <param name="callOrder">Order of the call in the stack</param>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IExecutable">
            <summary>
            Specifies a executable instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IExecutable.Status">
            <summary>
            The state of execution
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IExecutable.Execute">
            <summary>
            Perform the execute command
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IExecutable.TryExecute">
            <summary>
            Perform the execute command
            </summary>
            <returns>True if action is successful</returns>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IHandable">
            <summary>
            Defines an interface for objects that have a handle property.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IHandable.Handle">
            <summary>
            Gets the handle associated with the object.
            </summary>
            <value>
            The handle associated with the object, represented as an <see cref="T:System.Object"/>.
            </value>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IHandle">
            <summary>
            Defines a contract for classes that are capable of handling a specific task or action.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.INamed">
            <summary>
            Specifies a named instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.INamed.Name">
            <summary>
            The name of the instance
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.InvalidCheckResult">
            <summary>
            Represents the result of an invalid check, including descriptions of the cause and what is needed to resolve it.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.InvalidCheckResult.CauseDescription">
            <summary>
            Gets or sets the description of the cause of the invalid check.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.InvalidCheckResult.NeedDescription">
            <summary>
            Gets or sets the description of what is needed to resolve the invalid check.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.InvalidCheckResult.ToString">
            <summary>
            Returns a string representation of the invalid check result, combining the cause and need descriptions.
            </summary>
            <returns>A string that concatenates the <see cref="P:VisionNet.Core.Abstractions.InvalidCheckResult.CauseDescription"/> and <see cref="P:VisionNet.Core.Abstractions.InvalidCheckResult.NeedDescription"/>.</returns>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IOptions.Default">
            <summary>
            Gets the default.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IPassword">
            <summary>
            Specifies a named instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IPassword.EncodedPassword">
            <summary>
            The encoded password
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IPlayer">
            <summary>
            Specifies a reproductible instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IPlayer.Status">
            <summary>
            The state of reproduction
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IPlayer.Play">
            <summary>
            Perform the play command
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IPlayer.Stop">
            <summary>
            Perform the stop command
            </summary>
        </member>
        <member name="E:VisionNet.Core.Abstractions.IPlayer.StatusChanged">
            <summary>
            This event is raised when reproduction status is changed
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ISafeConfigureOptions`1">
            <summary>
            Defines a contract for configuring options in a safe manner, allowing for the possibility of a failed configuration attempt.
            </summary>
            <typeparam name="TOptions">The type of options to be configured, which must be a reference type (class).</typeparam>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ISafeConfigureOptions`1.TryConfigure(`0)">
            <summary>
            Attempts to configure the given options. If configuration fails, it returns false.
            </summary>
            <param name="options">The options to configure.</param>
            <returns>True if the configuration was successful, otherwise false.</returns>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ISecurePassword">
            <summary>
            Specifies a named instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.ISecurePassword.Password">
            <summary>
            The encoded password
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IService`1">
            <summary>
            Specifies a startable instance
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ISetupable">
            <summary>
            Defines an interface for objects that can be set up or initialized.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ISetupable.Setup">
            <summary>
            Performs the setup or initialization of the object.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ISetupable`1">
            <summary>
            Defines a generic interface for objects that can be set up or initialized and return a result.
            </summary>
            <typeparam name="T">The type of the result returned after setup.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Abstractions.ISetupable`1.Setup">
            <summary>
            Performs the setup or initialization of the object and returns a result of type <typeparamref name="T"/>.
            </summary>
            <returns>The result of the setup operation, of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Abstractions.IStartable">
            <summary>
            Specifies a startable instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.IStartable.Status">
            <summary>
            The state of execution
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IStartable.Start">
            <summary>
            Perform the start command
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.IStartable.Stop">
            <summary>
            Perform the stop command
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ITimeMonitorized">
            <summary>
            Defines a contract for objects that are monitored in terms of time, tracking the duration of the last acquisition and the last update timestamp.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.ITimeMonitorized.LastDuration">
            <summary>
            Gets the duration of the last acquisition. If it's the first acquisition, the value is 0.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.ITimeMonitorized.LastUpdate">
            <summary>
            Gets the timestamp of the last update.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.Linker`2">
            <summary>
            Represents an abstract class that links two objects of different types and manages their link status.
            </summary>
            <typeparam name="T1">The type of the first target object.</typeparam>
            <typeparam name="T2">The type of the second target object.</typeparam>
        </member>
        <member name="F:VisionNet.Core.Abstractions.Linker`2._target1">
            <summary>
            The first target object to be linked.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.Linker`2._target2">
            <summary>
            The second target object to be linked.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Abstractions.Linker`2.Status">
            <summary>
            Gets or sets the current link status.
            </summary>
            <value>
            The current link status, represented as an instance of <see cref="T:VisionNet.Core.Abstractions.LinkStatus"/>.
            </value>
        </member>
        <member name="M:VisionNet.Core.Abstractions.Linker`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Abstractions.Linker`2"/> class with specified target objects.
            </summary>
            <param name="target1">The first target object to be linked.</param>
            <param name="target2">The second target object to be linked.</param>
        </member>
        <member name="M:VisionNet.Core.Abstractions.Linker`2.Link">
            <summary>
            Links the two target objects if they are currently unlinked.
            Changes the link status to <see cref="F:VisionNet.Core.Abstractions.LinkStatus.Linked"/> if successful.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.Linker`2.Unlink">
            <summary>
            Unlinks the two target objects if they are currently linked.
            Changes the link status to <see cref="F:VisionNet.Core.Abstractions.LinkStatus.Unlinked"/> if successful.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Abstractions.Linker`2._tryLink">
            <summary>
            Attempts to link the two target objects.
            This method must be implemented by a derived class.
            </summary>
            <returns><c>true</c> if the linking was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:VisionNet.Core.Abstractions.Linker`2._tryUnlink">
            <summary>
            Attempts to unlink the two target objects.
            This method must be implemented by a derived class.
            </summary>
            <returns><c>true</c> if the unlinking was successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:VisionNet.Core.Abstractions.LinkStatus">
            <summary>
            State of the link
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.LinkStatus.Unlinked">
            <summary>
            The objects are unlinked
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.LinkStatus.Linked">
            <summary>
            The objects are linked
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ReproductionStatus">
            <summary>
            State of the reproduction
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ReproductionStatus.Stopped">
            <summary>
            The reproduction is stopped
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ReproductionStatus.Playing">
            <summary>
            The reproduction is playing
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.ServiceStatus">
            <summary>
            State of the service
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ServiceStatus.Stopped">
            <summary>
            The execution is stopped
            </summary>
        </member>
        <member name="F:VisionNet.Core.Abstractions.ServiceStatus.Started">
            <summary>
            The execution is started
            </summary>
        </member>
        <member name="T:VisionNet.Core.Abstractions.Unsubscriber`1">
            <summary>
            Represents an unsubscriber that removes an observer from the list of observers when disposed.
            </summary>
            <typeparam name="T">The type of the observed data.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Abstractions.Unsubscriber`1.#ctor(System.Collections.Generic.List{System.IObserver{`0}},System.IObserver{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Abstractions.Unsubscriber`1"/> class.
            </summary>
            <param name="observers">The list of observers to which the <paramref name="observer"/> belongs.</param>
            <param name="observer">The observer to be removed upon disposal.</param>
        </member>
        <member name="M:VisionNet.Core.Abstractions.Unsubscriber`1.Dispose">
            <summary>
            Removes the observer from the list of observers when disposed.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.BuildAndExpandClustersPolygons.Execute(System.Collections.Generic.List{System.Collections.Generic.List{System.Drawing.PointF}},System.Double)">
            <summary>
            Procesa una lista de clusters, construyendo y expandiendo su polígono correspondiente.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.BuildAndExpandClustersPolygons.ExecuteSingle(System.Collections.Generic.List{System.Drawing.PointF},System.Double)">
            <summary>
            Construye y expande el polígono del cluster dado su lista de puntos.
            </summary>
            <param name="points">Lista de puntos (sin contexto) del cluster.</param>
            <param name="expansionDistance">Distancia en píxeles para expandir el polígono.</param>
            <returns>Polígono expandido que cubre el cluster.</returns>
        </member>
        <member name="T:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1">
            <summary>
            Implements a clustering algorithm that groups points based on a provided Euclidean distance threshold.
            </summary>
            <typeparam name="T">The type of context associated with each point.</typeparam>
        </member>
        <member name="P:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.Points">
            <summary>
            Gets or sets the list of points to be clustered.
            </summary>
        </member>
        <member name="P:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.DistanceThreshold">
            <summary>
            Gets or sets the Euclidean distance threshold used to determine if two points should belong to the same cluster.
            </summary>
        </member>
        <member name="P:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.Clusters">
            <summary>
            Gets or sets the list of clusters formed after executing the clustering algorithm.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.AddPoint(VisionNet.Core.Dawing.PointFWithContext{`0})">
            <summary>
            Adds a point with context to the clustering algorithm.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.AddPoint(System.Drawing.PointF,`0)">
            <summary>
            Adds a point and its associated context to the clustering algorithm.
            </summary>
            <param name="point">The point to add.</param>
            <param name="context">The context associated with the point.</param>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.AddPoint(System.Single,System.Single,`0)">
            <summary>
            Adds a point and its associated context to the clustering algorithm using the specified coordinates.
            </summary>
            <param name="x">The X-coordinate of the point.</param>
            <param name="y">The Y-coordinate of the point.</param>
            <param name="context">The context associated with the point.</param>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.Clear">
            <summary>
            Clears all points and clusters from the algorithm.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.Execute">
            <summary>
            Executes the clustering algorithm using the current set of points and distance threshold.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VisionNet.Core.AI.CompleteLinkageHierarchicalClustering`1.Execute(System.Collections.Generic.List{VisionNet.Core.Dawing.PointFWithContext{`0}},System.Double)" -->
        <member name="T:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric">
            <summary>
            Implements a clustering algorithm that groups points based on a provided Euclidean distance threshold.
            </summary>
        </member>
        <member name="P:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric.Points">
            <summary>
            Gets or sets the list of points to be clustered.
            </summary>
        </member>
        <member name="P:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric.DistanceThreshold">
            <summary>
            Gets or sets the Euclidean distance threshold used to determine if two points should belong to the same cluster.
            </summary>
        </member>
        <member name="P:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric.Clusters">
            <summary>
            Gets or sets the list of clusters formed after executing the clustering algorithm.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a point to the clustering algorithm.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric.AddPoint(System.Single,System.Single)">
            <summary>
            Adds a point with the specified coordinates to the clustering algorithm.
            </summary>
            <param name="x">The X-coordinate of the point.</param>
            <param name="y">The Y-coordinate of the point.</param>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric.Clear">
            <summary>
            Clears all points and clusters from the algorithm.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric.Execute">
            <summary>
            Executes the clustering algorithm using the current set of points and distance threshold.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.CompleteLinkageHierarchicalClusteringGeneric.Execute(System.Collections.Generic.List{System.Drawing.PointF},System.Double)">
            <summary>
            Clusters a list of PointF objects such that the Euclidean distance between any two points in the same cluster is less than or equal to the specified threshold.
            </summary>
            <param name="points">The list of points to cluster.</param>
            <param name="distanceThreshold">The maximum allowed distance between any two points in the same cluster.</param>
            <returns>A list of clusters, each cluster is a list of PointF objects.</returns>
        </member>
        <member name="T:VisionNet.Core.AI.ComputationDeviceType">
            <summary>
            Represents the types of computation devices that can be used for processing.
            </summary>
        </member>
        <member name="F:VisionNet.Core.AI.ComputationDeviceType.CPU">
            <summary>
            Represents the Central Processing Unit (CPU), which is typically used for general-purpose computing.
            </summary>
        </member>
        <member name="F:VisionNet.Core.AI.ComputationDeviceType.GPU">
            <summary>
            Represents the Graphics Processing Unit (GPU), which is often used for parallel processing tasks and high-performance computations.
            </summary>
        </member>
        <member name="T:VisionNet.Core.AI.KMeansClustering`1">
            <summary>
            Implements K-Means clustering using ML.NET over 2D points with context.
            </summary>
            <typeparam name="T">Type of additional context stored with each point.</typeparam>
        </member>
        <member name="M:VisionNet.Core.AI.KMeansClustering`1.Execute">
            <summary>
            Executes K-Means clustering via ML.NET.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.KMeansClustering`1.ExecuteMiniBatch(System.Int32)">
            <summary>
            Executes minibatch K-Means by training on random subsets via ML.NET.
            </summary>
        </member>
        <member name="T:VisionNet.Core.AI.KMeansClusteringGeneric">
            <summary>
            Implements the K-Means clustering algorithm for 2D points.
            </summary>
        </member>
        <member name="P:VisionNet.Core.AI.KMeansClusteringGeneric.ClusterCount">
            <summary>
            Number of clusters to form.
            </summary>
        </member>
        <member name="P:VisionNet.Core.AI.KMeansClusteringGeneric.Points">
            <summary>
            Gets or sets the list of points to be clustered.
            </summary>
        </member>
        <member name="P:VisionNet.Core.AI.KMeansClusteringGeneric.Clusters">
            <summary>
            Gets the list of clusters formed after executing the algorithm.
            Each cluster is a list of PointF.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.KMeansClusteringGeneric.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds a point to the clustering algorithm.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:VisionNet.Core.AI.KMeansClusteringGeneric.AddPoint(System.Single,System.Single)">
            <summary>
            Adds a point by coordinates to the clustering algorithm.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.KMeansClusteringGeneric.Clear">
            <summary>
            Clears all points and clusters.
            </summary>
        </member>
        <member name="M:VisionNet.Core.AI.KMeansClusteringGeneric.Execute">
            <summary>
            Executes the K-Means clustering algorithm with the current settings.
            </summary>
        </member>
        <member name="T:VisionNet.Core.IA.JenksFisher">
            <summary>
            Port of Jenks/Fisher breaks originally created in C by Maarten Hilferink.
            <remarks>
                http://wiki.objectvision.nl/index.php/CalcNaturalBreaksCode
                http://wiki.objectvision.nl/index.php/Fisher%27s_Natural_Breaks_Classification
                https://github.com/pschoepf/naturalbreaks
            </remarks>
            </summary>
        </member>
        <member name="M:VisionNet.Core.IA.JenksFisher.CreateJenksFisherBreaksArray(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Main entry point for creation of Jenks-Fisher natural breaks.
            </summary>
            <param name="values">values array of the values, do not need to be sorted.</param>
            <param name="numBreaks">number of breaks to create</param>
            <returns>Array with breaks</returns>
        </member>
        <member name="M:VisionNet.Core.IA.JenksFisher.#ctor(System.Collections.Generic.List{VisionNet.Core.Maths.ValueCountTuple},System.Int32)">
            <summary>
            Constructor that initializes main variables used in fisher calculation of natural breaks
            </summary>
            <param name="tuples">
                Ordered list of pairs of values to occurrence counts.
                The value sequence must be strictly increasing, all weights must be positive
            </param>
            <param name="numBreaks"> Number of breaks to find.</param>
        </member>
        <member name="M:VisionNet.Core.IA.JenksFisher.SumOfWeights(System.Int32,System.Int32)">
            <summary>
            Gets sum of weighs for elements with index b..e.
            </summary>
            <param name="beginIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:VisionNet.Core.IA.JenksFisher.SumOfWeightedValues(System.Int32,System.Int32)">
            <summary>
            Gets sum of weighed values for elements with index b..e
            </summary>
            <param name="beginIndex">index of begin element</param>
            <param name="endIndex">index of end element</param>
            <returns>cumul. sum of the values*weight</returns>
        </member>
        <member name="M:VisionNet.Core.IA.JenksFisher.SSM(System.Int32,System.Int32)">
            <summary>
            Gets the Squared Mean for elements within index b..e, multiplied by weight. Note that n*mean^2 = sum^2/n when mean := sum/n
            </summary>
            <param name="beginIndex">index of begin element</param>
            <param name="endIndex">index of end element</param>
            <returns>the sum of squared mean</returns>
        </member>
        <member name="M:VisionNet.Core.IA.JenksFisher.FindMaxBreakIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds CB[i+completedRows] given that the result is at least bp+(completedRows-1) and less than ep+(completedRows-1)
            </summary>
            <param name="i"></param>
            <param name="bp"></param>
            <param name="ep"></param>
            <returns></returns>
            <remarks>
                Complexity: O(ep-bp) ~ O(m)
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VisionNet.Core.IA.JenksFisher.CalculateRange(System.Int32,System.Int32,System.Int32,System.Int32)" -->
        <member name="M:VisionNet.Core.IA.JenksFisher.CalculateAll">
            <summary>
            Starting point of calculation of breaks.
            Complexity: O(n*log(n)*numBreaks)
            </summary>
        </member>
        <member name="M:VisionNet.Core.IA.JenksFisher.ClassifyByJenksFisher(System.Int32,System.Collections.Generic.List{VisionNet.Core.Maths.ValueCountTuple})">
            <summary>
            Does the internal processing to actually create the breaks.
            </summary>
            <param name="numBreaks">number of breaks</param>
            <param name="tuples">asc ordered input of values and their occurence counts</param>
            <returns>created breaks</returns>
        </member>
        <member name="M:VisionNet.Core.IA.JenksFisher.BuildValueCountTuples(System.Collections.Generic.List{System.Double})">
            <summary>
            Calculates the occurence count of given values and returns them in sorted list.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Attributes.AttributeExtension">
            <summary>
            Provides extension methods for working with attributes in C#.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.ClassHasAttribute``1(System.Object)">
            <summary>
            Checks if an object has a specific attribute.
            </summary>
            <typeparam name="T">The type of the attribute to check for.</typeparam>
            <param name="obj">The object to check for the attribute.</param>
            <returns>
            A boolean value: <c>true</c> if the object has the specified attribute, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.ClassHasAttribute``1(System.Type)">
            <summary>
            Checks if a type has a specific attribute.
            </summary>
            <typeparam name="T">The type of the attribute to check for.</typeparam>
            <param name="type">The type to check for the attribute.</param>
            <returns>
            A boolean value: <c>true</c> if the type has the specified attribute, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.MethodHasAttribute``1(System.Object,System.String)">
            <summary>
            Checks if a method of a given object has a specific attribute.
            </summary>
            <typeparam name="T">The type of the attribute to check for.</typeparam>
            <param name="obj">The object containing the method to check.</param>
            <param name="methodName">The name of the method to check for the attribute.</param>
            <returns>
            A boolean value: <c>true</c> if the method has the specified attribute, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.MethodHasAttribute``1(System.Type,System.String)">
            <summary>
            Checks if a method of a given type has a specific attribute.
            </summary>
            <typeparam name="T">The type of the attribute to check for.</typeparam>
            <param name="type">The type containing the method to check.</param>
            <param name="methodName">The name of the method to check for the attribute.</param>
            <returns>
            A boolean value: <c>true</c> if the method has the specified attribute, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.PropertyHasAttribute``1(System.Object,System.String)">
            <summary>
            Checks if a property of a given object has a specific attribute.
            </summary>
            <typeparam name="T">The type of the attribute to check for.</typeparam>
            <param name="obj">The object containing the property to check.</param>
            <param name="propertyName">The name of the property to check for the attribute.</param>
            <returns>
            A boolean value: <c>true</c> if the property has the specified attribute, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.PropertyHasAttribute``1(System.Type,System.String)">
            <summary>
            Checks if a property of a given type has a specific attribute.
            </summary>
            <typeparam name="T">The type of the attribute to check for.</typeparam>
            <param name="type">The type containing the property to check.</param>
            <param name="propertyName">The name of the property to check for the attribute.</param>
            <returns>
            A boolean value: <c>true</c> if the property has the specified attribute, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.GetMethodsWithAttribute``1(System.Object)">
            <summary>
            Returns a dictionary of methods and their associated attributes for a given object.
            </summary>
            <typeparam name="T">The type of the attribute to find on the methods.</typeparam>
            <param name="obj">The object whose methods are being checked for the attribute.</param>
            <returns>
            A dictionary where the keys are <see cref="T:System.Reflection.MethodInfo"/> objects representing methods,
            and the values are lists of <typeparamref name="T"/> representing the attributes found on those methods.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.GetMethodsWithAttribute``1(System.Type)">
            <summary>
            Returns a dictionary of methods and their associated attributes for a given type.
            </summary>
            <typeparam name="T">The type of the attribute to find on the methods.</typeparam>
            <param name="type">The type whose methods are being checked for the attribute.</param>
            <returns>
            A dictionary where the keys are <see cref="T:System.Reflection.MethodInfo"/> objects representing methods,
            and the values are lists of <typeparamref name="T"/> representing the attributes found on those methods.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.GetFirstMethodWithAttribute``1(System.Object)">
            <summary>
            Returns a dictionary of the first method with the specified attribute for a given object.
            </summary>
            <typeparam name="T">The type of the attribute to find on the methods.</typeparam>
            <param name="obj">The object whose methods are being checked for the attribute.</param>
            <returns>
            A dictionary where the keys are <see cref="T:System.Reflection.MethodInfo"/> objects representing methods,
            and the values are the first instance of <typeparamref name="T"/> found on those methods.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.GetFirstMethodWithAttribute``1(System.Type)">
            <summary>
            Returns a dictionary of the first method with the specified attribute for a given type.
            </summary>
            <typeparam name="T">The type of the attribute to find on the methods.</typeparam>
            <param name="type">The type whose methods are being checked for the attribute.</param>
            <returns>
            A dictionary where the keys are <see cref="T:System.Reflection.MethodInfo"/> objects representing methods,
            and the values are the first instance of <typeparamref name="T"/> found on those methods.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.GetPropertiesWithAttribute``1(System.Object)">
            <summary>
            Returns a dictionary of properties and their associated attributes for a given object.
            </summary>
            <typeparam name="T">The type of the attribute to find on the properties.</typeparam>
            <param name="obj">The object whose properties are being checked for the attribute.</param>
            <returns>
            A dictionary where the keys are <see cref="T:System.Reflection.PropertyInfo"/> objects representing properties,
            and the values are lists of <typeparamref name="T"/> representing the attributes found on those properties.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.GetPropertiesWithAttribute``1(System.Type)">
            <summary>
            Returns a dictionary of properties and their associated attributes for a given type.
            </summary>
            <typeparam name="T">The type of the attribute to find on the properties.</typeparam>
            <param name="type">The type whose properties are being checked for the attribute.</param>
            <returns>
            A dictionary where the keys are <see cref="T:System.Reflection.PropertyInfo"/> objects representing properties,
            and the values are lists of <typeparamref name="T"/> representing the attributes found on those properties.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.GetFirstPropertyWithAttribute``1(System.Object)">
            <summary>
            Returns the first property with the specified attribute for a given object.
            </summary>
            <typeparam name="T">The type of the attribute to find on the properties.</typeparam>
            <param name="obj">The object whose properties are being checked for the attribute.</param>
            <returns>
            A <see cref="T:System.Reflection.PropertyInfo"/> representing the property, 
            and the first instance of <typeparamref name="T"/> found on that property.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.AttributeExtension.GetFirstPropertyWithAttribute``1(System.Type)">
            <summary>
            Returns the first property with the specified attribute for a given type.
            </summary>
            <typeparam name="T">The type of the attribute to find on the properties.</typeparam>
            <param name="type">The type whose properties are being checked for the attribute.</param>
            <returns>
            A <see cref="T:System.Reflection.PropertyInfo"/> representing the property, 
            and the first instance of <typeparamref name="T"/> found on that property.
            </returns>
        </member>
        <member name="T:VisionNet.Core.Attributes.UriAddressAttribute">
            <summary>
            Represents an attribute that is used to specify a URI address for a class.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Attributes.UriAddressAttribute.Uri">
            <summary>
            Gets the URI object constructed from the <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/>.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString">
            <summary>
            Gets the string representation of the URI.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Attributes.UriAddressAttribute.#ctor(System.String,System.UriKind)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> class.
            This constructor creates a <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.Uri"/> object from the provided <paramref name="uriString"/> and sets the <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/> property.
            </summary>
            <param name="uriString">The URI string.</param>
            <param name="uriKind">The type of URI to create. The default value is <see cref="F:System.UriKind.Relative"/>.</param>
        </member>
        <member name="T:VisionNet.Core.Attributes.UriAddressExtension">
            <summary>
            Provides extension methods for working with <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> applied to objects and types.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Attributes.UriAddressExtension.GetUriAddress``1(``0)">
            <summary>
            Retrieves the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> applied to an object and returns its <see cref="T:System.Uri"/> property.
            </summary>
            <typeparam name="T">The type of the object to check for the attribute.</typeparam>
            <param name="obj">The object to check for the attribute.</param>
            <returns>
            The <see cref="T:System.Uri"/> associated with the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> if found, otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.UriAddressExtension.GetUriStringAddress``1(``0)">
            <summary>
            Retrieves the <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/> property of the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> applied to an object.
            </summary>
            <typeparam name="T">The type of the object to check for the attribute.</typeparam>
            <param name="obj">The object to check for the attribute.</param>
            <returns>
            The <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/> value of the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> if found, otherwise an empty string.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.UriAddressExtension.GetUriAddress(System.Type)">
            <summary>
            Retrieves the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> applied to a given type and returns its <see cref="T:System.Uri"/> property.
            </summary>
            <param name="type">The type to check for the attribute.</param>
            <returns>
            The <see cref="T:System.Uri"/> associated with the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> if found, otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.UriAddressExtension.GetUriStringAddress(System.Type)">
            <summary>
            Retrieves the <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/> property of the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> applied to a given type.
            </summary>
            <param name="type">The type to check for the attribute.</param>
            <returns>
            The <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/> value of the <see cref="T:VisionNet.Core.Attributes.UriAddressAttribute"/> if found, otherwise an empty string.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.UriAddressExtension.GetTypeOfUri(System.Uri,System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieves the type of an object associated with a specific <see cref="T:System.Uri"/> in a given assembly.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to check for.</param>
            <param name="assembly">The assembly to search for the type (default is the currently executing assembly).</param>
            <param name="baseType">The base type to filter the types (default is <see cref="T:System.Object"/>).</param>
            <returns>
            The <see cref="T:System.Type"/> of the object that is associated with the specified <see cref="T:System.Uri"/>, or <c>null</c> if not found.
            </returns>
        </member>
        <member name="M:VisionNet.Core.Attributes.UriAddressExtension.GetTypeOfUri(System.String,System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieves the type of an object associated with a specific <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/> in a given assembly.
            </summary>
            <param name="uriString">The <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/> to check for.</param>
            <param name="assembly">The assembly to search for the type (default is the currently executing assembly).</param>
            <param name="baseType">The base type to filter the types (default is <see cref="T:System.Object"/>).</param>
            <returns>
            The <see cref="T:System.Type"/> of the object that is associated with the specified <see cref="F:VisionNet.Core.Attributes.UriAddressAttribute.UriString"/>, or <c>null</c> if not found.
            </returns>
        </member>
        <member name="T:VisionNet.Core.Bitwise.Bits">
            <summary>
            Provides implementations of various bitwise operations on primitive numeric types
            </summary>
            <summary>
            Provides implementations of various bitwise operations on primitive numeric types
            </summary>
            <summary>
            Provides implementations of various bitwise operations on primitive numeric types
            </summary>
            <summary>
            Provides implementations of various bitwise operations on primitive numeric types
            </summary>
            <summary>
            Provides implementations of various bitwise operations on primitive numeric types
            </summary>
            <summary>
            Provides implementations of various bitwise operations on primitive numeric types
            </summary>
            <summary>
            Provides implementations of various bitwise operations on primitive numeric types
            </summary>
            <summary>
            Provides implementations of various bitwise operations on primitive numeric types
            </summary>
        </member>
        <member name="F:VisionNet.Core.Bitwise.Bits.SizeOfInt64InBits">
            <summary>
            Size of the <see cref="T:System.Int64"/> type in bits
            </summary>
        </member>
        <member name="F:VisionNet.Core.Bitwise.Bits.SizeOfUInt64InBits">
            <summary>
            Size of the <see cref="T:System.UInt64"/> type in bits
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.Int64,System.Int32)">
            <summary>
            The presence of this method simplifies codegen when using <see cref="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.Int16,System.Int32)"/> and similar
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.UInt64,System.Int32)">
            <summary>
            The presence of this method simplifies codegen when using <see cref="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.Int16,System.Int32)"/> and similar
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.Int16,System.Int32)">
            <summary>
            The native shift operator on <see cref="T:System.Int16"/> converts to <see cref="T:System.Int32"/> before shifting. This method performs
            a shift purely within the confines of the <see cref="T:System.Int16"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.UInt16,System.Int32)">
            <summary>
            The native shift operator on <see cref="T:System.UInt16"/> converts to <see cref="T:System.Int32"/> before shifting. This method performs
            a shift purely within the confines of the <see cref="T:System.UInt16"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.Int64,System.Int32)">
            <summary>
            The presence of this method simplifies codegen when using <see cref="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.Int16,System.Int32)"/> and similar
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.UInt64,System.Int32)">
            <summary>
            The presence of this method simplifies codegen when using <see cref="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.Int16,System.Int32)"/> and similar
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.Int16,System.Int32)">
            <summary>
            The native shift operator on <see cref="T:System.Int16"/> converts to <see cref="T:System.Int32"/> before shifting. This method performs
            a shift purely within the confines of the <see cref="T:System.Int16"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.UInt16,System.Int32)">
            <summary>
            The native shift operator on <see cref="T:System.UInt16"/> converts to <see cref="T:System.Int32"/> before shifting. This method performs
            a shift purely within the confines of the <see cref="T:System.UInt16"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.And(System.Int64,System.Int64)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.And(System.UInt64,System.UInt64)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.And(System.Int16,System.Int16)">
            <summary>As the native operator, but returns <see cref="T:System.Int16"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.And(System.UInt16,System.UInt16)">
            <summary>As the native operator, but returns <see cref="T:System.UInt16"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Or(System.Int64,System.Int64)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Or(System.UInt64,System.UInt64)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Or(System.Int16,System.Int16)">
            <summary>As the native operator, but returns <see cref="T:System.Int16"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Or(System.UInt16,System.UInt16)">
            <summary>As the native operator, but returns <see cref="T:System.UInt16"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Xor(System.Int64,System.Int64)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Xor(System.UInt64,System.UInt64)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Xor(System.Int16,System.Int16)">
            <summary>As the native operator, but returns <see cref="T:System.Int16"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Xor(System.UInt16,System.UInt16)">
            <summary>As the native operator, but returns <see cref="T:System.UInt16"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Not(System.Int64)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Not(System.UInt64)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Not(System.Int16)">
            <summary>As the native operator, but returns <see cref="T:System.Int16"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Not(System.UInt16)">
            <summary>As the native operator, but returns <see cref="T:System.UInt16"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAnyFlag(System.Int64,System.Int64)">
            <summary>
            Determines whether <paramref name="value"/> has any of the same bits set as <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAllFlags(System.Int64,System.Int64)">
            <summary>
            Determines whether <paramref name="value"/> has all of the bits set that are set in <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.GetBit(System.Int64,System.Int32)">
            <summary>
            Determines whether the <paramref name="index"/>th bit is set in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetBit(System.Int64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearBit(System.Int64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ModifyBit(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.FlipBit(System.Int64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th flipped
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearLeastSignificantOneBit(System.Int64)">
            <summary>
            Returns <paramref name="value"/> with the least significant set bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetLeastSignificantZeroBit(System.Int64)">
            <summary>
            Return s<paramref name="value"/> with the least significant zero bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetTrailingZeroBits(System.Int64)">
            <summary>
            Returns <paramref name="value"/> with all bits less significant than the least significant set bit will be set.
            If <paramref name="value"/> is zero then all bits are trailing zero bits so the returned value will have all bits set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateLeastSignificantOneBit(System.Int64)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the least significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateMostSignificantOneBit(System.UInt64)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the most significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateMostSignificantOneBit(System.Int64)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the most significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.BitCount(System.UInt64)">
            <summary>
            Returns the number of set bits in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.BitCount(System.Int64)">
            <summary>
            Returns the number of set bits in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.TrailingZeroBitCount(System.UInt64)">
            <summary>
            Returns the number of zero bits following the least-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int64)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int64"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.TrailingZeroBitCount(System.Int64)">
            <summary>
            Returns the number of zero bits following the least-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int64)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int64"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.LeadingZeroBitCount(System.UInt64)">
            <summary>
            Returns the number of zero bits preceding the most-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int64)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int64"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.LeadingZeroBitCount(System.Int64)">
            <summary>
            Returns the number of zero bits preceding the most-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int64)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int64"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasSingleOneBit(System.Int64)">
            <summary>
            Returns true if <paramref name="value"/> has only a single bit set and false otherwise
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateLeft(System.UInt64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" left by <paramref name="positions"/> bit positions. This is similar
            to shifting left, except that bits shifted off the high end reenter on the low end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateLeft(System.Int64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" left by <paramref name="positions"/> bit positions. This is similar
            to shifting left, except that bits shifted off the high end reenter on the low end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateRight(System.UInt64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" right by <paramref name="positions"/> bit positions. This is similar
            to shifting right, except that bits shifted off the low end reenter on the high end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateRight(System.Int64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" right by <paramref name="positions"/> bit positions. This is similar
            to shifting right, except that bits shifted off the low end reenter on the high end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Reverse(System.UInt64)">
            <summary>
            Returns <paramref name="value"/> with the bits reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Reverse(System.Int64)">
            <summary>
            Returns <paramref name="value"/> with the bits reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ReverseBytes(System.UInt64)">
            <summary>
            Returns <paramref name="value"/> with the bytes reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ReverseBytes(System.Int64)">
            <summary>
            Returns <paramref name="value"/> with the bytes reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ReverseBytes(System.Byte)">
            <summary>no-op</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ReverseBytes(System.SByte)">
            <summary>no-op</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToShortBinaryString(System.Int64)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITHOUT leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToShortBinaryString(System.UInt64)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITHOUT leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToShortBinaryString(System.SByte)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITHOUT leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int64)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITH ALL leading zeros
            </summary>
        </member>
        <member name="F:VisionNet.Core.Bitwise.Bits.SizeOfByteInBits">
            <summary>
            Size of the <see cref="T:System.Byte"/> type in bits
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.Byte,System.Int32)">
            <summary>
            The native shift operator on <see cref="T:System.Byte"/> converts to <see cref="T:System.Int32"/> before shifting. This method performs
            a shift purely within the confines of the <see cref="T:System.Byte"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.Byte,System.Int32)">
            <summary>
            The native shift operator on <see cref="T:System.Byte"/> converts to <see cref="T:System.Int32"/> before shifting. This method performs
            a shift purely within the confines of the <see cref="T:System.Byte"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.And(System.Byte,System.Byte)">
            <summary>As the native operator, but returns <see cref="T:System.Byte"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Or(System.Byte,System.Byte)">
            <summary>As the native operator, but returns <see cref="T:System.Byte"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Xor(System.Byte,System.Byte)">
            <summary>As the native operator, but returns <see cref="T:System.Byte"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Not(System.Byte)">
            <summary>As the native operator, but returns <see cref="T:System.Byte"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAnyFlag(System.Byte,System.Byte)">
            <summary>
            Determines whether <paramref name="value"/> has any of the same bits set as <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAllFlags(System.Byte,System.Byte)">
            <summary>
            Determines whether <paramref name="value"/> has all of the bits set that are set in <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.GetBit(System.Byte,System.Int32)">
            <summary>
            Determines whether the <paramref name="index"/>th bit is set in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetBit(System.Byte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearBit(System.Byte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ModifyBit(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.FlipBit(System.Byte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th flipped
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearLeastSignificantOneBit(System.Byte)">
            <summary>
            Returns <paramref name="value"/> with the least significant set bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetLeastSignificantZeroBit(System.Byte)">
            <summary>
            Return s<paramref name="value"/> with the least significant zero bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetTrailingZeroBits(System.Byte)">
            <summary>
            Returns <paramref name="value"/> with all bits less significant than the least significant set bit will be set.
            If <paramref name="value"/> is zero then all bits are trailing zero bits so the returned value will have all bits set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateLeastSignificantOneBit(System.Byte)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the least significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateMostSignificantOneBit(System.Byte)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the most significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.BitCount(System.Byte)">
            <summary>
            Returns the number of set bits in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.TrailingZeroBitCount(System.Byte)">
            <summary>
            Returns the number of zero bits following the least-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.SByte)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.SByte"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.LeadingZeroBitCount(System.Byte)">
            <summary>
            Returns the number of zero bits preceding the most-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.SByte)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.SByte"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasSingleOneBit(System.Byte)">
            <summary>
            Returns true if <paramref name="value"/> has only a single bit set and false otherwise
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateLeft(System.Byte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" left by <paramref name="positions"/> bit positions. This is similar
            to shifting left, except that bits shifted off the high end reenter on the low end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateRight(System.Byte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" right by <paramref name="positions"/> bit positions. This is similar
            to shifting right, except that bits shifted off the low end reenter on the high end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Reverse(System.Byte)">
            <summary>
            Returns <paramref name="value"/> with the bits reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToShortBinaryString(System.Byte)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITHOUT leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Byte)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITH ALL leading zeros
            </summary>
        </member>
        <member name="F:VisionNet.Core.Bitwise.Bits.SizeOfInt16InBits">
            <summary>
            Size of the <see cref="T:System.Int16"/> type in bits
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAnyFlag(System.Int16,System.Int16)">
            <summary>
            Determines whether <paramref name="value"/> has any of the same bits set as <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAllFlags(System.Int16,System.Int16)">
            <summary>
            Determines whether <paramref name="value"/> has all of the bits set that are set in <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.GetBit(System.Int16,System.Int32)">
            <summary>
            Determines whether the <paramref name="index"/>th bit is set in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetBit(System.Int16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearBit(System.Int16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ModifyBit(System.Int16,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.FlipBit(System.Int16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th flipped
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearLeastSignificantOneBit(System.Int16)">
            <summary>
            Returns <paramref name="value"/> with the least significant set bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetLeastSignificantZeroBit(System.Int16)">
            <summary>
            Return s<paramref name="value"/> with the least significant zero bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetTrailingZeroBits(System.Int16)">
            <summary>
            Returns <paramref name="value"/> with all bits less significant than the least significant set bit will be set.
            If <paramref name="value"/> is zero then all bits are trailing zero bits so the returned value will have all bits set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateLeastSignificantOneBit(System.Int16)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the least significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateMostSignificantOneBit(System.Int16)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the most significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.BitCount(System.Int16)">
            <summary>
            Returns the number of set bits in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.TrailingZeroBitCount(System.Int16)">
            <summary>
            Returns the number of zero bits following the least-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int16)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int16"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.LeadingZeroBitCount(System.Int16)">
            <summary>
            Returns the number of zero bits preceding the most-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int16)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int16"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasSingleOneBit(System.Int16)">
            <summary>
            Returns true if <paramref name="value"/> has only a single bit set and false otherwise
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateLeft(System.Int16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" left by <paramref name="positions"/> bit positions. This is similar
            to shifting left, except that bits shifted off the high end reenter on the low end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateRight(System.Int16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" right by <paramref name="positions"/> bit positions. This is similar
            to shifting right, except that bits shifted off the low end reenter on the high end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Reverse(System.Int16)">
            <summary>
            Returns <paramref name="value"/> with the bits reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ReverseBytes(System.Int16)">
            <summary>
            Returns <paramref name="value"/> with the bytes reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToShortBinaryString(System.Int16)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITHOUT leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int16)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITH ALL leading zeros
            </summary>
        </member>
        <member name="F:VisionNet.Core.Bitwise.Bits.SizeOfInt32InBits">
            <summary>
            Size of the <see cref="T:System.Int32"/> type in bits
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.Int32,System.Int32)">
            <summary>
            The presence of this method simplifies codegen when using <see cref="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.Int16,System.Int32)"/> and similar
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.Int32,System.Int32)">
            <summary>
            The presence of this method simplifies codegen when using <see cref="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.Int16,System.Int32)"/> and similar
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.And(System.Int32,System.Int32)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Or(System.Int32,System.Int32)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Xor(System.Int32,System.Int32)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Not(System.Int32)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAnyFlag(System.Int32,System.Int32)">
            <summary>
            Determines whether <paramref name="value"/> has any of the same bits set as <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAllFlags(System.Int32,System.Int32)">
            <summary>
            Determines whether <paramref name="value"/> has all of the bits set that are set in <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.GetBit(System.Int32,System.Int32)">
            <summary>
            Determines whether the <paramref name="index"/>th bit is set in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetBit(System.Int32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearBit(System.Int32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ModifyBit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.FlipBit(System.Int32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th flipped
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearLeastSignificantOneBit(System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the least significant set bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetLeastSignificantZeroBit(System.Int32)">
            <summary>
            Return s<paramref name="value"/> with the least significant zero bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetTrailingZeroBits(System.Int32)">
            <summary>
            Returns <paramref name="value"/> with all bits less significant than the least significant set bit will be set.
            If <paramref name="value"/> is zero then all bits are trailing zero bits so the returned value will have all bits set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateLeastSignificantOneBit(System.Int32)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the least significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateMostSignificantOneBit(System.Int32)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the most significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.BitCount(System.Int32)">
            <summary>
            Returns the number of set bits in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.TrailingZeroBitCount(System.Int32)">
            <summary>
            Returns the number of zero bits following the least-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int32)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int32"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.LeadingZeroBitCount(System.Int32)">
            <summary>
            Returns the number of zero bits preceding the most-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int32)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int32"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasSingleOneBit(System.Int32)">
            <summary>
            Returns true if <paramref name="value"/> has only a single bit set and false otherwise
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateLeft(System.Int32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" left by <paramref name="positions"/> bit positions. This is similar
            to shifting left, except that bits shifted off the high end reenter on the low end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateRight(System.Int32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" right by <paramref name="positions"/> bit positions. This is similar
            to shifting right, except that bits shifted off the low end reenter on the high end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Reverse(System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the bits reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ReverseBytes(System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the bytes reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToShortBinaryString(System.Int32)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITHOUT leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int32)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITH ALL leading zeros
            </summary>
        </member>
        <member name="F:VisionNet.Core.Bitwise.Bits.SizeOfSByteInBits">
            <summary>
            Size of the <see cref="T:System.SByte"/> type in bits
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.SByte,System.Int32)">
            <summary>
            The native shift operator on <see cref="T:System.SByte"/> converts to <see cref="T:System.Int32"/> before shifting. This method performs
            a shift purely within the confines of the <see cref="T:System.SByte"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.SByte,System.Int32)">
            <summary>
            The native shift operator on <see cref="T:System.SByte"/> converts to <see cref="T:System.Int32"/> before shifting. This method performs
            a shift purely within the confines of the <see cref="T:System.SByte"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.And(System.SByte,System.SByte)">
            <summary>As the native operator, but returns <see cref="T:System.SByte"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Or(System.SByte,System.SByte)">
            <summary>As the native operator, but returns <see cref="T:System.SByte"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Xor(System.SByte,System.SByte)">
            <summary>As the native operator, but returns <see cref="T:System.SByte"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Not(System.SByte)">
            <summary>As the native operator, but returns <see cref="T:System.SByte"/> instead of <see cref="T:System.Int32"/></summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAnyFlag(System.SByte,System.SByte)">
            <summary>
            Determines whether <paramref name="value"/> has any of the same bits set as <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAllFlags(System.SByte,System.SByte)">
            <summary>
            Determines whether <paramref name="value"/> has all of the bits set that are set in <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.GetBit(System.SByte,System.Int32)">
            <summary>
            Determines whether the <paramref name="index"/>th bit is set in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetBit(System.SByte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearBit(System.SByte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ModifyBit(System.SByte,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.FlipBit(System.SByte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th flipped
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearLeastSignificantOneBit(System.SByte)">
            <summary>
            Returns <paramref name="value"/> with the least significant set bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetLeastSignificantZeroBit(System.SByte)">
            <summary>
            Return s<paramref name="value"/> with the least significant zero bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetTrailingZeroBits(System.SByte)">
            <summary>
            Returns <paramref name="value"/> with all bits less significant than the least significant set bit will be set.
            If <paramref name="value"/> is zero then all bits are trailing zero bits so the returned value will have all bits set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateLeastSignificantOneBit(System.SByte)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the least significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateMostSignificantOneBit(System.SByte)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the most significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.BitCount(System.SByte)">
            <summary>
            Returns the number of set bits in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.TrailingZeroBitCount(System.SByte)">
            <summary>
            Returns the number of zero bits following the least-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.SByte)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.SByte"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.LeadingZeroBitCount(System.SByte)">
            <summary>
            Returns the number of zero bits preceding the most-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.SByte)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.SByte"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasSingleOneBit(System.SByte)">
            <summary>
            Returns true if <paramref name="value"/> has only a single bit set and false otherwise
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateLeft(System.SByte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" left by <paramref name="positions"/> bit positions. This is similar
            to shifting left, except that bits shifted off the high end reenter on the low end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateRight(System.SByte,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" right by <paramref name="positions"/> bit positions. This is similar
            to shifting right, except that bits shifted off the low end reenter on the high end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Reverse(System.SByte)">
            <summary>
            Returns <paramref name="value"/> with the bits reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.SByte)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITH ALL leading zeros
            </summary>
        </member>
        <member name="F:VisionNet.Core.Bitwise.Bits.SizeOfUInt16InBits">
            <summary>
            Size of the <see cref="T:System.UInt16"/> type in bits
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAnyFlag(System.UInt16,System.UInt16)">
            <summary>
            Determines whether <paramref name="value"/> has any of the same bits set as <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAllFlags(System.UInt16,System.UInt16)">
            <summary>
            Determines whether <paramref name="value"/> has all of the bits set that are set in <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.GetBit(System.UInt16,System.Int32)">
            <summary>
            Determines whether the <paramref name="index"/>th bit is set in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetBit(System.UInt16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearBit(System.UInt16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ModifyBit(System.UInt16,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.FlipBit(System.UInt16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th flipped
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearLeastSignificantOneBit(System.UInt16)">
            <summary>
            Returns <paramref name="value"/> with the least significant set bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetLeastSignificantZeroBit(System.UInt16)">
            <summary>
            Return s<paramref name="value"/> with the least significant zero bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetTrailingZeroBits(System.UInt16)">
            <summary>
            Returns <paramref name="value"/> with all bits less significant than the least significant set bit will be set.
            If <paramref name="value"/> is zero then all bits are trailing zero bits so the returned value will have all bits set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateLeastSignificantOneBit(System.UInt16)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the least significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateMostSignificantOneBit(System.UInt16)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the most significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.BitCount(System.UInt16)">
            <summary>
            Returns the number of set bits in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.TrailingZeroBitCount(System.UInt16)">
            <summary>
            Returns the number of zero bits following the least-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int16)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int16"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.LeadingZeroBitCount(System.UInt16)">
            <summary>
            Returns the number of zero bits preceding the most-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int16)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int16"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasSingleOneBit(System.UInt16)">
            <summary>
            Returns true if <paramref name="value"/> has only a single bit set and false otherwise
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateLeft(System.UInt16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" left by <paramref name="positions"/> bit positions. This is similar
            to shifting left, except that bits shifted off the high end reenter on the low end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateRight(System.UInt16,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" right by <paramref name="positions"/> bit positions. This is similar
            to shifting right, except that bits shifted off the low end reenter on the high end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Reverse(System.UInt16)">
            <summary>
            Returns <paramref name="value"/> with the bits reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ReverseBytes(System.UInt16)">
            <summary>
            Returns <paramref name="value"/> with the bytes reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToShortBinaryString(System.UInt16)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITHOUT leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.UInt16)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITH ALL leading zeros
            </summary>
        </member>
        <member name="F:VisionNet.Core.Bitwise.Bits.SizeOfUInt32InBits">
            <summary>
            Size of the <see cref="T:System.UInt32"/> type in bits
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.UInt32,System.Int32)">
            <summary>
            The presence of this method simplifies codegen when using <see cref="M:VisionNet.Core.Bitwise.Bits.ShiftLeft(System.Int16,System.Int32)"/> and similar
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.UInt32,System.Int32)">
            <summary>
            The presence of this method simplifies codegen when using <see cref="M:VisionNet.Core.Bitwise.Bits.ShiftRight(System.Int16,System.Int32)"/> and similar
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.And(System.UInt32,System.UInt32)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Or(System.UInt32,System.UInt32)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Xor(System.UInt32,System.UInt32)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Not(System.UInt32)">
            <summary>Simplifies codegen</summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAnyFlag(System.UInt32,System.UInt32)">
            <summary>
            Determines whether <paramref name="value"/> has any of the same bits set as <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAllFlags(System.UInt32,System.UInt32)">
            <summary>
            Determines whether <paramref name="value"/> has all of the bits set that are set in <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.GetBit(System.UInt32,System.Int32)">
            <summary>
            Determines whether the <paramref name="index"/>th bit is set in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetBit(System.UInt32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearBit(System.UInt32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ModifyBit(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.FlipBit(System.UInt32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th flipped
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearLeastSignificantOneBit(System.UInt32)">
            <summary>
            Returns <paramref name="value"/> with the least significant set bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetLeastSignificantZeroBit(System.UInt32)">
            <summary>
            Return s<paramref name="value"/> with the least significant zero bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetTrailingZeroBits(System.UInt32)">
            <summary>
            Returns <paramref name="value"/> with all bits less significant than the least significant set bit will be set.
            If <paramref name="value"/> is zero then all bits are trailing zero bits so the returned value will have all bits set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateLeastSignificantOneBit(System.UInt32)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the least significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateMostSignificantOneBit(System.UInt32)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the most significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.BitCount(System.UInt32)">
            <summary>
            Returns the number of set bits in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.TrailingZeroBitCount(System.UInt32)">
            <summary>
            Returns the number of zero bits following the least-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int32)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int32"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.LeadingZeroBitCount(System.UInt32)">
            <summary>
            Returns the number of zero bits preceding the most-significant one-bit in the binary representation of <paramref name="value"/>
            (as returned by <see cref="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.Int32)"/>). If <paramref name="value"/> is zero, returns the number of bits
            in the <see cref="T:System.Int32"/> data type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasSingleOneBit(System.UInt32)">
            <summary>
            Returns true if <paramref name="value"/> has only a single bit set and false otherwise
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateLeft(System.UInt32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" left by <paramref name="positions"/> bit positions. This is similar
            to shifting left, except that bits shifted off the high end reenter on the low end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.RotateRight(System.UInt32,System.Int32)">
            <summary>
            Returns <paramref name="value"/> "rotated" right by <paramref name="positions"/> bit positions. This is similar
            to shifting right, except that bits shifted off the low end reenter on the high end
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.Reverse(System.UInt32)">
            <summary>
            Returns <paramref name="value"/> with the bits reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ReverseBytes(System.UInt32)">
            <summary>
            Returns <paramref name="value"/> with the bytes reversed
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToShortBinaryString(System.UInt32)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITHOUT leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.UInt32)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITH ALL leading zeros
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAnyFlag(System.UInt64,System.UInt64)">
            <summary>
            Determines whether <paramref name="value"/> has any of the same bits set as <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasAllFlags(System.UInt64,System.UInt64)">
            <summary>
            Determines whether <paramref name="value"/> has all of the bits set that are set in <paramref name="flags"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.GetBit(System.UInt64,System.Int32)">
            <summary>
            Determines whether the <paramref name="index"/>th bit is set in <paramref name="value"/>
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetBit(System.UInt64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearBit(System.UInt64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ModifyBit(System.UInt64,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.FlipBit(System.UInt64,System.Int32)">
            <summary>
            Returns <paramref name="value"/> with the <paramref name="index"/>th flipped
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ClearLeastSignificantOneBit(System.UInt64)">
            <summary>
            Returns <paramref name="value"/> with the least significant set bit cleared
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetLeastSignificantZeroBit(System.UInt64)">
            <summary>
            Return s<paramref name="value"/> with the least significant zero bit set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.SetTrailingZeroBits(System.UInt64)">
            <summary>
            Returns <paramref name="value"/> with all bits less significant than the least significant set bit will be set.
            If <paramref name="value"/> is zero then all bits are trailing zero bits so the returned value will have all bits set
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.IsolateLeastSignificantOneBit(System.UInt64)">
            <summary>
            Returns <paramref name="value"/> with all bits cleared EXCEPT the least significant set bit
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.HasSingleOneBit(System.UInt64)">
            <summary>
            Returns true if <paramref name="value"/> has only a single bit set and false otherwise
            </summary>
        </member>
        <member name="M:VisionNet.Core.Bitwise.Bits.ToLongBinaryString(System.UInt64)">
            <summary>
            Returns the binary representation of <paramref name="value"/> WITH ALL leading zeros
            </summary>
        </member>
        <member name="T:VisionNet.Core.Bitwise.MemberForAttribute">
            <summary>
            Marker attribute to designate members which require special-casing other than <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="T:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions">
            <summary>
            Provides utility functions for working with Siemens S7 byte arrays and various data types used in Siemens PLC systems.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_BIT">
            <summary>
            Constant representing the type identifier for a bit.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_BYTE">
            <summary>
            Constant representing the type identifier for a byte.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_CHAR">
            <summary>
            Constant representing the type identifier for a character.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_WORD">
            <summary>
            Constant representing the type identifier for a word.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_INT">
            <summary>
            Constant representing the type identifier for an integer.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_DWORD">
            <summary>
            Constant representing the type identifier for a double word.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_DINT">
            <summary>
            Constant representing the type identifier for a double integer.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_REAL">
            <summary>
            Constant representing the type identifier for a real number.
            </summary>
        </member>
        <member name="F:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.TYPE_COUNTER">
            <summary>
            Constant representing the type identifier for a counter.
            </summary>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions._bcdToByte(System.Byte)">
            <summary>
            Converts a binary-coded decimal (BCD) value to an integer.
            </summary>
            <param name="b">The BCD value to convert.</param>
            <returns>The integer equivalent of the BCD value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions._byteToBcd(System.Int32)">
            <summary>
            Converts a byte value to binary-coded decimal (BCD).
            </summary>
            <param name="value">The integer value to convert.</param>
            <returns>A byte containing the BCD equivalent of the specified value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions._copyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a specified portion of a byte array.
            </summary>
            <param name="buffer">The byte array to copy from.</param>
            <param name="pos">The position in the array to start copying from.</param>
            <param name="size">The number of bytes to copy.</param>
            <returns>A new byte array containing the copied data.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.DataSizeByte(System.Int32)">
            <summary>
            Returns the size in bytes of a given data type.
            </summary>
            <param name="wordLength">The data type identifier.</param>
            <returns>The number of bytes required to store the specified data type.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetBitAt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the value of a specific bit in a byte array.
            </summary>
            <param name="buffer">The byte array containing the bit.</param>
            <param name="pos">The position in the array to get the bit from.</param>
            <param name="bit">The bit position within the byte (0 to 7).</param>
            <returns><c>true</c> if the bit is set, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetBitAt(System.Byte[]@,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the value of a specific bit in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the bit.</param>
            <param name="bit">The bit position within the byte (0 to 7).</param>
            <param name="value">The value to set the bit to (<c>true</c> or <c>false</c>).</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetSIntAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves an 8-bit signed integer (S7 SInt) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to read from.</param>
            <returns>The 8-bit signed integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetSIntAt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets an 8-bit signed integer (S7 SInt) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 8-bit signed integer to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetIntAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 16-bit signed integer (S7 Int) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to read from.</param>
            <returns>The 16-bit signed integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetIntAt(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Sets a 16-bit signed integer (S7 Int) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 16-bit signed integer to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetDIntAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 32-bit signed integer (S7 DInt) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 32-bit signed integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetDIntAt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets a 32-bit signed integer (S7 DInt) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 32-bit signed integer value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetLIntAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 64-bit signed integer (S7 LInt) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 64-bit signed integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetLIntAt(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Sets a 64-bit signed integer (S7 LInt) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 64-bit signed integer value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetUSIntAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves an 8-bit unsigned integer (S7 USInt) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetUSIntAt(System.Byte[],System.Int32,System.Byte)">
            <summary>
            Sets an 8-bit unsigned integer (S7 USInt) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 8-bit unsigned integer value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetUIntAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 16-bit unsigned integer (S7 UInt) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetUIntAt(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Sets a 16-bit unsigned integer (S7 UInt) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 16-bit unsigned integer value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetUDIntAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 32-bit unsigned integer (S7 UDInt) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetUDIntAt(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Sets a 32-bit unsigned integer (S7 UDInt) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 32-bit unsigned integer value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetULIntAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 64-bit unsigned integer (S7 ULint) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetULintAt(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Sets a 64-bit unsigned integer (S7 ULint) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 64-bit unsigned integer value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetByteAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves an 8-bit unsigned integer (S7 Byte) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetByteAt(System.Byte[],System.Int32,System.Byte)">
            <summary>
            Sets an 8-bit unsigned integer (S7 Byte) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 8-bit unsigned integer value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetWordAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 16-bit unsigned integer (S7 Word) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetWordAt(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Sets a 16-bit unsigned integer (S7 Word) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="value">The 16-bit unsigned integer value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetDWordAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 32-bit unsigned integer (S7 DWord) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The 32-bit unsigned integer value.</returns>   
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetDWordAt(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Sets a 32-bit unsigned integer (DWORD) at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the DWORD will be set.</param>
            <param name="pos">The position in the byte array where the DWORD should be placed.</param>
            <param name="value">The 32-bit unsigned integer (DWORD) value to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetLWordAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a 64-bit unsigned integer (LWORD) from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the LWORD will be retrieved.</param>
            <param name="pos">The position in the byte array from which the LWORD should be read.</param>
            <returns>A 64-bit unsigned integer (LWORD) value retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetLWordAt(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Sets a 64-bit unsigned integer (LWORD) at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the LWORD will be set.</param>
            <param name="pos">The position in the byte array where the LWORD should be placed.</param>
            <param name="value">The 64-bit unsigned integer (LWORD) value to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetRealAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a single-precision floating-point value (Real) from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the real value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the real value should be read.</param>
            <returns>A single-precision floating-point value (Real) retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetRealAt(System.Byte[],System.Int32,System.Single)">
            <summary>
            Sets a single-precision floating-point value (Real) at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the real value will be set.</param>
            <param name="pos">The position in the byte array where the real value should be placed.</param>
            <param name="value">The single-precision floating-point value (Real) to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetLRealAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a double-precision floating-point value (LReal) from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the LReal value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the LReal value should be read.</param>
            <returns>A double-precision floating-point value (LReal) retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetLRealAt(System.Byte[],System.Int32,System.Double)">
            <summary>
            Sets a double-precision floating-point value (LReal) at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the LReal value will be set.</param>
            <param name="pos">The position in the byte array where the LReal value should be placed.</param>
            <param name="value">The double-precision floating-point value (LReal) to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetDateTimeAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a DateTime value from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the DateTime value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the DateTime value should be read.</param>
            <returns>A DateTime value retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetDateTimeAt(System.Byte[],System.Int32,System.DateTime)">
            <summary>
            Sets a DateTime value at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the DateTime value will be set.</param>
            <param name="pos">The position in the byte array where the DateTime value should be placed.</param>
            <param name="value">The DateTime value to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetDateAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a <see cref="T:System.DateTime"/> from the specified byte array at the given position.
            The method interprets the value at the given position as the number of days 
            since a predefined base date and adds it to that base date.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the byte array where the day count is stored.</param>
            <returns>A <see cref="T:System.DateTime"/> calculated by adding the day count to the base date. 
            If an error occurs, a <see cref="T:System.DateTime"/> representing the Unix epoch (January 1, 0001) is returned.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetDateAt(System.Byte[],System.Int32,System.DateTime)">
            <summary>
            Sets a <see cref="T:System.DateTime"/> value at the specified position in the byte array.
            The method converts the <see cref="T:System.DateTime"/> value into the number of days 
            since a predefined base date and stores it as a 16-bit signed integer.
            </summary>
            <param name="buffer">The byte array to which the date will be written.</param>
            <param name="pos">The position in the byte array where the date value should be stored.</param>
            <param name="value">The <see cref="T:System.DateTime"/> value to be stored.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetDate(System.DateTime)">
            <summary>
            Converts a DateTime to a S7 DATE value.
            </summary>
            <param name="value">The DateTime to convert.</param>
            <returns>The corresponding S7 DATE value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetTODAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a Time-of-Day (TOD) value from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the TOD value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the TOD value should be read.</param>
            <returns>A DateTime representing the Time-of-Day (TOD) value retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetTODAt(System.Byte[],System.Int32,System.DateTime)">
            <summary>
            Sets a Time-of-Day (TOD) value at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the TOD value will be set.</param>
            <param name="pos">The position in the byte array where the TOD value should be placed.</param>
            <param name="value">The DateTime representing the Time-of-Day (TOD) value to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetLTODAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a Local Time-of-Day (LTOD) value from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the LTOD value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the LTOD value should be read.</param>
            <returns>A DateTime representing the Local Time-of-Day (LTOD) value retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetLTODAt(System.Byte[],System.Int32,System.DateTime)">
            <summary>
            Sets a Local Time-of-Day (LTOD) value at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the LTOD value will be set.</param>
            <param name="pos">The position in the byte array where the LTOD value should be placed.</param>
            <param name="value">The DateTime representing the Local Time-of-Day (LTOD) value to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetLDTAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a Local Date-Time (LDT) value from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the LDT value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the LDT value should be read.</param>
            <returns>A DateTime representing the Local Date-Time (LDT) value retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetLDTAt(System.Byte[],System.Int32,System.DateTime)">
            <summary>
            Sets a Local Date-Time (LDT) value at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the LDT value will be set.</param>
            <param name="pos">The position in the byte array where the LDT value should be placed.</param>
            <param name="value">The DateTime representing the Local Date-Time (LDT) value to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetDTLAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a Date-Time Local (DTL) value from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the DTL value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the DTL value should be read.</param>
            <returns>A DateTime representing the Date-Time Local (DTL) value retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetDTL(System.Byte[])">
            <summary>
            Retrieves a Date-Time Local (DTL) value from the beginning of the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the DTL value will be retrieved.</param>
            <returns>A DateTime representing the Date-Time Local (DTL) value retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetDTLAt(System.Byte[],System.Int32,System.DateTime)">
            <summary>
            Sets a Date-Time Local (DTL) value at a specified position in the byte array.
            </summary>
            <param name="buffer">The byte array where the Date-Time Local (DTL) value will be set.</param>
            <param name="pos">The position in the byte array where the Date-Time Local (DTL) value should be placed.</param>
            <param name="value">The DateTime value to set as a Date-Time Local (DTL) in the byte array.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetDTL(System.DateTime)">
            <summary>
            Converts a DateTime value into a byte array representation of a Date-Time Local (DTL) value.
            </summary>
            <param name="value">The DateTime value to convert into a byte array.</param>
            <returns>A byte array representing the Date-Time Local (DTL) value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetStringAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a string value from a specified position in the byte array.
            </summary>
            <param name="buffer">The byte array from which the string value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the string value should be read.</param>
            <returns>A string representing the value retrieved from the byte array at the specified position.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetString(System.Byte[])">
            <summary>
            Retrieves a string value from the beginning of the byte array.
            </summary>
            <param name="buffer">The byte array from which the string value will be retrieved.</param>
            <returns>A string representing the value retrieved from the byte array.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetStringAt(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Sets a string value at a specified position in the byte array, ensuring the string does not exceed the maximum length.
            </summary>
            <param name="buffer">The byte array where the string value will be set.</param>
            <param name="pos">The position in the byte array where the string value should be placed.</param>
            <param name="maxLen">The maximum length of the string to set in the buffer.</param>
            <param name="value">The string value to set in the byte array.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetString(System.Int32,System.String)">
            <summary>
            Converts a string value into a byte array, ensuring the resulting array does not exceed the specified maximum length.
            </summary>
            <param name="maxLen">The maximum length of the resulting byte array.</param>
            <param name="value">The string value to convert into a byte array.</param>
            <returns>A byte array representing the string value, truncated to the specified maximum length if necessary.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetString(System.String)">
            <summary>
            Converts a string value into a byte array.
            </summary>
            <param name="value">The string value to convert into a byte array.</param>
            <returns>A byte array representing the string value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetWStringAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a wide string (S7 WString) from a byte array.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the array to start reading from.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetWStringAt(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Sets a wide string (S7 WString) in a byte array.
            </summary>
            <param name="buffer">The byte array to modify.</param>
            <param name="pos">The position in the array to set the value.</param>
            <param name="maxCharNb">The maximum number of characters.</param>
            <param name="value">The string value to set.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetCharsAt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieves a string value (sequence of characters) from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the string value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the string value should be read.</param>
            <param name="size">The number of bytes to read from the buffer, corresponding to the string's length.</param>
            <returns>A string representing the characters retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetCharsAt(System.Byte[],System.Int32,System.String)">
            <summary>
            Sets a string value (sequence of characters) at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the string value will be set.</param>
            <param name="pos">The position in the byte array where the string value should be placed.</param>
            <param name="value">The string value (sequence of characters) to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetWCharsAt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieves a string value (sequence of characters) from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the string value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the string value should be read.</param>
            <param name="sizeInCharNb">The number of characters to read from the buffer.</param>
            <returns>A string representing the characters retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetWCharsAt(System.Byte[],System.Int32,System.String)">
            <summary>
            Sets a string value (as a sequence of characters) at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the string value will be set.</param>
            <param name="pos">The position in the byte array where the string value should be placed.</param>
            <param name="value">The string value (sequence of characters) to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetCounter(System.UInt16)">
            <summary>
            Converts a ushort counter value to an integer representation.
            </summary>
            <param name="value">The ushort counter value to convert.</param>
            <returns>An integer representing the equivalent value of the counter.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetCounterAt(System.UInt16[],System.Int32)">
            <summary>
            Retrieves a counter value from a specified position in the ushort array.
            </summary>
            <param name="buffer">The ushort array from which the counter value will be retrieved.</param>
            <param name="index">The position in the array from which the counter value should be read.</param>
            <returns>An integer representing the counter value retrieved from the array.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.ToCounter(System.Int32)">
            <summary>
            Converts an integer value to a counter value represented as a ushort.
            </summary>
            <param name="value">The integer value to convert to a counter.</param>
            <returns>A ushort representing the counter value equivalent to the input integer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetCounterAt(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Sets a counter value at a specified position in the ushort array.
            </summary>
            <param name="buffer">The ushort array where the counter value will be set.</param>
            <param name="pos">The position in the array where the counter value should be placed.</param>
            <param name="value">The counter value to set in the array.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetS7TimespanAt(System.Byte[],System.Int32,System.TimeSpan)">
            <summary>
            Sets a S7 Timespan value at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the S7 Timespan value will be set.</param>
            <param name="pos">The position in the byte array where the S7 Timespan value should be placed.</param>
            <param name="value">The TimeSpan value to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetS7TimespanAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a <see cref="T:System.TimeSpan"/> value from the specified position in the byte array.
            The method reads 4 bytes starting from the given position, interprets them as a 32-bit integer 
            representing the number of milliseconds, and converts this value into a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="buffer">The byte array containing the data.</param>
            <param name="pos">The position in the byte array where the time span data starts.</param>
            <returns>A <see cref="T:System.TimeSpan"/> corresponding to the value represented by the 4 bytes in the array.
            If the buffer length is insufficient, an empty <see cref="T:System.TimeSpan"/> is returned.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GetLTimeAt(System.Byte[],System.Int32)">
            <summary>
            Retrieves a Local Time (LTime) value from a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array from which the LTime value will be retrieved.</param>
            <param name="pos">The position in the byte array from which the LTime value should be read.</param>
            <returns>A TimeSpan representing the Local Time (LTime) value retrieved from the buffer.</returns>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.SetLTimeAt(System.Byte[],System.Int32,System.TimeSpan)">
            <summary>
            Sets a Local Time (LTime) value at a specified position in the byte buffer.
            </summary>
            <param name="buffer">The byte array where the LTime value will be set.</param>
            <param name="pos">The position in the byte array where the LTime value should be placed.</param>
            <param name="value">The TimeSpan representing the Local Time (LTime) value to set in the buffer.</param>
        </member>
        <member name="M:VisionNet.Core.ByteArrayHelper.SiemensByteArrayFunctions.GenerateByteArray">
            <summary>
            Generates a byte array of size 1024.
            </summary>
            <returns>A new byte array of size 1024.</returns>
        </member>
        <member name="T:VisionNet.Core.Collections.CollectionExtension">
            <summary>
            Provides extension methods for collections with additional functionality.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Finds the index of the first item that satisfies the given predicate.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="items">The enumerable collection of items.</param>
            <param name="predicate">The predicate used to find the item.</param>
            <returns>The index of the found item, or -1 if not found.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.GroupInPairs``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Groups the items in the collection into pairs of two items. 
            Throws an exception if the number of items is odd.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="items">The collection to group in pairs.</param>
            <returns>A collection of tuples, each containing two items from the original collection.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the number of items in the collection is odd.</exception>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.Permute``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates all possible permutations of the given collection.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="values">The collection to permute.</param>
            <returns>A collection of all possible permutations of the items in the original collection.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.Permute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Generates a specified number of permutations of the given collection.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="values">The collection to permute.</param>
            <param name="permutations">The number of permutations to generate.</param>
            <returns>A collection of permutations of the items in the original collection.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.FullOuterJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``2,``3},``0,``1,System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a full outer join on two sequences based on the specified key selectors and projection function.
            </summary>
            <typeparam name="TLeft">The type of elements in the left sequence.</typeparam>
            <typeparam name="TRight">The type of elements in the right sequence.</typeparam>
            <typeparam name="TKey">The type of the key used for joining.</typeparam>
            <typeparam name="TResult">The type of the result produced by the projection function.</typeparam>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <param name="leftKeySelector">The key selector for the left sequence.</param>
            <param name="rightKeySelector">The key selector for the right sequence.</param>
            <param name="projection">The projection function that produces a result based on elements from both sequences.</param>
            <param name="leftDefault">The default value to use for missing elements in the left sequence.</param>
            <param name="rightDefault">The default value to use for missing elements in the right sequence.</param>
            <param name="keyComparer">An optional custom equality comparer for comparing keys.</param>
            <returns>A sequence of projection results for each key that is present in either the left or right sequence.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Groups elements in the collection into sub-sequences based on a condition that compares consecutive elements.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="seq">The sequence to group.</param>
            <param name="condition">The condition used to determine whether consecutive elements belong to the same group.</param>
            <returns>A sequence of sub-sequences where each sub-sequence contains elements that satisfy the given condition.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.StdDev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the standard deviation of a sequence of double values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>The standard deviation of the values in the sequence.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks if the sequence is null or empty.
            </summary>
            <param name="this">The sequence to check.</param>
            <returns>True if the sequence is null or empty, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the given action on each element of the sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="enumeration">The sequence to iterate over.</param>
            <param name="action">The action to execute on each element.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.CollectionExtension.IsListOf(System.Object,System.Type)">
            <summary>
            The is generic i list of a type
            </summary>
            <param name="obj">The obj.</param>
            <param name="expectedElementType">The expected element type.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:VisionNet.Core.Collections.DictionaryOfList`2">
            <summary>
            Represents a dictionary where each key is associated with a list of values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the list associated with each key.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Collections.DictionaryOfList`2.Add(`0,`1)">
            <summary>
            Adds a key and value to the dictionary. If the key already exists, the value is added to the existing list of values.
            </summary>
            <param name="key">The key to which the value will be added.</param>
            <param name="value">The value to add to the list of values associated with the specified key.</param>
            <returns>The list of values associated with the specified key.</returns>
        </member>
        <member name="P:VisionNet.Core.Collections.HistoricalCollection`1.SelectedIndex">
            <summary>
            Índice del elemento seleccionado. -1 indica que no hay ningún elemento seleccionado.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Collections.HistoricalCollection`1.Selected">
            <summary>
            Elemento seleccionado (puede ser default(T) si SelectedIndex = -1).
            </summary>
        </member>
        <member name="P:VisionNet.Core.Collections.HistoricalCollection`1.Capacity">
            <summary>
            Capacidad máxima de la colección (tamaño fijo).
            </summary>
        </member>
        <member name="P:VisionNet.Core.Collections.HistoricalCollection`1.Count">
            <summary>
            Número actual de elementos en la colección (thread-safe).
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.HistoricalCollection`1.#ctor(System.Int32)">
            <summary>
            Crea la colección con una capacidad máxima fija (> 0).
            </summary>
            <param name="capacity">Capacidad máxima.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.HistoricalCollection`1.Add(`0)">
            <summary>
            Agrega un nuevo elemento en la posición 0 (la más "reciente").
            Si la colección está llena, se elimina el elemento más antiguo (al final).
            </summary>
            <param name="item">Elemento a agregar.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.HistoricalCollection`1.Newest">
            <summary>
            Devuelve el elemento más reciente (índice 0).
            Lanza excepción si no hay elementos.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.HistoricalCollection`1.Clear">
            <summary>
            Limpia la colección y la selección (thread-safe).
            </summary>
        </member>
        <member name="P:VisionNet.Core.Collections.HistoricalCollection`1.Item(System.Int32)">
            <summary>
            Indizador para obtener el elemento por índice (0 = más reciente).
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.HistoricalCollection`1.GetEnumerator">
            <summary>
            Permite la iteración con foreach, retornando una instantánea de los elementos.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Collections.IReactiveList`1">
            <summary>
            Interface for Reactive List.
            </summary>
            <typeparam name="T">The type stored in the list.</typeparam>
            <seealso cref="T:System.Reactive.Disposables.ICancelable" />
        </member>
        <member name="P:VisionNet.Core.Collections.IReactiveList`1.Added">
            <summary>
            Gets the added.
            </summary>
            <value>
            The added.
            </value>
        </member>
        <member name="P:VisionNet.Core.Collections.IReactiveList`1.Changed">
            <summary>
            Gets the changed.
            </summary>
            <value>
            The changed.
            </value>
        </member>
        <member name="P:VisionNet.Core.Collections.IReactiveList`1.CurrentItems">
            <summary>
            Gets the current items.
            </summary>
            <value>
            The current items.
            </value>
        </member>
        <member name="P:VisionNet.Core.Collections.IReactiveList`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:VisionNet.Core.Collections.IReactiveList`1.ItemsAdded">
            <summary>
            Gets the items added.
            </summary>
            <value>
            The items added.
            </value>
        </member>
        <member name="P:VisionNet.Core.Collections.IReactiveList`1.ItemsChanged">
            <summary>
            Gets the items changed.
            </summary>
            <value>
            The items changed.
            </value>
        </member>
        <member name="P:VisionNet.Core.Collections.IReactiveList`1.ItemsRemoved">
            <summary>
            Gets the items removed.
            </summary>
            <value>
            The items removed.
            </value>
        </member>
        <member name="P:VisionNet.Core.Collections.IReactiveList`1.Removed">
            <summary>
            Gets the removed.
            </summary>
            <value>
            The removed.
            </value>
        </member>
        <member name="M:VisionNet.Core.Collections.IReactiveList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.IReactiveList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.IReactiveList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">The index.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.IReactiveList`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.IReactiveList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.IReactiveList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the range.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.IReactiveList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces all existing items with new items.
            </summary>
            <param name="items">The new items.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.IReactiveList`1.Update(`0,`0)">
            <summary>
            Updates the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:VisionNet.Core.Collections.ArrayTuple">
            <summary>
            Represents a structure that holds an array of objects.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.ArrayTuple.From(System.Collections.Generic.IList{System.ValueTuple{System.Object,System.Collections.Generic.ISet{System.Int32},System.Int32}},System.Object[])">
            <summary>
            Creates an <see cref="T:VisionNet.Core.Collections.ArrayTuple"/> instance from a collection of collapsed keys and additional keys.
            </summary>
            <param name="collapsedKeys">A list of tuples containing an object, a set of integers, and an integer representing the collapsed keys.</param>
            <param name="keys">Additional keys to be included in the array.</param>
            <returns>An <see cref="T:VisionNet.Core.Collections.ArrayTuple"/> instance containing the combined keys.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.ArrayTuple.From(System.Object[])">
            <summary>
            Creates an <see cref="T:VisionNet.Core.Collections.ArrayTuple"/> instance from a list of keys.
            </summary>
            <param name="keys">The keys to be included in the array.</param>
            <returns>An <see cref="T:VisionNet.Core.Collections.ArrayTuple"/> instance containing the provided keys.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.ArrayTuple.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:VisionNet.Core.Collections.ArrayTuple"/> instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified object is equal to the current instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.ArrayTuple.GetHashCode">
            <summary>
            Computes the hash code for the current <see cref="T:VisionNet.Core.Collections.ArrayTuple"/> instance.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="T:VisionNet.Core.Collections.MultiKeyDictionary`6">
            <summary>
            Represents a dictionary that allows for multiple keys of different types (T1, T2, T3, T4, T5) to be used for indexing.
            </summary>
            <typeparam name="T1">The type of the first key.</typeparam>
            <typeparam name="T2">The type of the second key.</typeparam>
            <typeparam name="T3">The type of the third key.</typeparam>
            <typeparam name="T4">The type of the fourth key.</typeparam>
            <typeparam name="T5">The type of the fifth key.</typeparam>
            <typeparam name="TValue">The type of the values stored in the dictionary.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`6.CompactingAbsoluteThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the absolute number of unused indices that will trigger a compaction.
            Both this and the relative threshold must be met for a compaction to occur.
            </summary>
            <value>The number of unused indices before a compaction is performed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`6.CompactingRelativeThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the relative number of unused indices that will trigger a compaction.
            Both this and the absolute threshold must be met for a compaction to occur.
            </summary>
            <value>The relative number of unused indices (relative to the full size of the array) before a compaction is performed.</value>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`6.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Collections.MultiKeyDictionary`6"/> class with no data.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`6.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.ValueTuple{`0,`1,`2,`3,`4},`5}})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Collections.MultiKeyDictionary`6"/> class with the specified collection of key-value pairs.
            </summary>
            <param name="data">An enumerable collection of key-value pairs, where the key is a tuple of five elements (T1, T2, T3, T4, T5) and the value is of type <typeparamref name="TValue"/>.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`6.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5}})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Collections.MultiKeyDictionary`6"/> class with the specified collection of tuples.
            </summary>
            <param name="data">An enumerable collection of tuples, where each tuple contains five keys of types <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, and <typeparamref name="T5"/>, followed by a value of type <typeparamref name="TValue"/>.</param>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`6.Count">
            <summary>
            Gets the number of elements in the dictionary, accounting for unused indices if applicable.
            </summary>
            <returns>The number of elements in the dictionary.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`6.Set(`5)">
            <summary>
            Sets *all* values in the table (or the slice) to the given value.
            If a collapsed index set is defined, only the values at those indices are updated.
            Otherwise, all values in the table are set to the given value.
            </summary>
            <param name="value">The value to set for all elements in the table (or slice).</param>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`6.Remove(`0,`1,`2,`3,`4)">
            <summary>
            Removes the entry with the specified keys from the dictionary.
            </summary>
            <param name="key1">The first key of type <typeparamref name="T1"/>.</param>
            <param name="key2">The second key of type <typeparamref name="T2"/>.</param>
            <param name="key3">The third key of type <typeparamref name="T3"/>.</param>
            <param name="key4">The fourth key of type <typeparamref name="T4"/>.</param>
            <param name="key5">The fifth key of type <typeparamref name="T5"/>.</param>
            <returns><c>true</c> if the entry was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`5.CompactingAbsoluteThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the absolute number of unused indices that will trigger a compaction.
            Both this and the relative threshold must be met for a compaction to occur.
            </summary>
            <value>The number of unused indices before a compaction is performed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`5.CompactingRelativeThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the relative number of unused indices that will trigger a compaction.
            Both this and the absolute threshold must be met for a compaction to occur.
            </summary>
            <value>The relative number of unused indices (relative to the full size of the array) before a compaction is performed.</value>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`5.Set(`4)">
            <summary>
            Sets *all* values in the table (respectively the slice) to the given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`4.CompactingAbsoluteThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the absolute number of unused indices that will trigger a compaction.
            Both this and the relative threshold must be met for a compaction to occur.
            </summary>
            <value>The number of unused indices before a compaction is performed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`4.CompactingRelativeThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the relative number of unused indices that will trigger a compaction.
            Both this and the absolute threshold must be met for a compaction to occur.
            </summary>
            <value>The relative number of unused indices (relative to the full size of the array) before a compaction is performed.</value>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`4.Set(`3)">
            <summary>
            Sets *all* values in the table (respectively the slice) to the given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`3.CompactingAbsoluteThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the absolute number of unused indices that will trigger a compaction.
            Both this and the relative threshold must be met for a compaction to occur.
            </summary>
            <value>The number of unused indices before a compaction is performed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`3.CompactingRelativeThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the relative number of unused indices that will trigger a compaction.
            Both this and the absolute threshold must be met for a compaction to occur.
            </summary>
            <value>The relative number of unused indices (relative to the full size of the array) before a compaction is performed.</value>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`3.Set(`2)">
            <summary>
            Sets *all* values in the table (respectively the slice) to the given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`2.CompactingAbsoluteThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the absolute number of unused indices that will trigger a compaction.
            Both this and the relative threshold must be met for a compaction to occur.
            </summary>
            <value>The number of unused indices before a compaction is performed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.MultiKeyDictionary`2.CompactingRelativeThreshold">
            <summary>
            Removals do not actually remove data from the table, but just delete the index.
            If a lot of Remove operations are performed, the table will become very sparsely populated with actual data.
            This setting controls the relative number of unused indices that will trigger a compaction.
            Both this and the absolute threshold must be met for a compaction to occur.
            </summary>
            <value>The relative number of unused indices (relative to the full size of the array) before a compaction is performed.</value>
        </member>
        <member name="M:VisionNet.Core.Collections.MultiKeyDictionary`2.Set(`1)">
            <summary>
            Sets *all* values in the table (respectively the slice) to the given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:VisionNet.Core.Collections.ObservableCollectionAdapter`1">
            <summary>
            Adapter that converts between <see cref="T:System.Collections.Generic.List`1"/> and <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Collections.ObservableCollectionAdapter`1.Convert(System.Collections.Generic.List{`0})">
            <summary>
            Converts a list to an observable collection.
            </summary>
            <param name="source">The source list.</param>
            <returns>A new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> containing the items from the list.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.ObservableCollectionAdapter`1.Convert(VisionNet.Core.Patterns.ObservableCollectionWithItemChanges{`0})">
            <summary>
            Converts an observable collection to a list.
            </summary>
            <param name="source">The source observable collection.</param>
            <returns>A new <see cref="T:System.Collections.Generic.List`1"/> containing the items from the observable collection.</returns>
        </member>
        <member name="T:VisionNet.Core.Collections.ObservableCollectionAdapterExtension">
            <summary>
            Provides extension methods to convert between <see cref="T:System.Collections.Generic.List`1"/> and <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            using <see cref="T:VisionNet.Core.Collections.ObservableCollectionAdapter`1"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.ObservableCollectionAdapterExtension.ToObservableCollection``1(System.Collections.Generic.List{``0})">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> to an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="list">The source list.</param>
            <returns>A new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> with the list's elements.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.ObservableCollectionAdapterExtension.ToSimpleList``1(VisionNet.Core.Patterns.ObservableCollectionWithItemChanges{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="collection">The source observable collection.</param>
            <returns>A new <see cref="T:System.Collections.Generic.List`1"/> with the collection's elements.</returns>
        </member>
        <member name="T:VisionNet.Core.Collections.ObservableDictionaryAdapter`2">
            <summary>
            Adapter that converts between <see cref="T:System.Collections.Generic.Dictionary`2"/> and <see cref="T:VisionNet.Core.Patterns.ObservableDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of dictionary keys.</typeparam>
            <typeparam name="TValue">The type of dictionary values.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Collections.ObservableDictionaryAdapter`2.Convert(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Converts a Dictionary to an ObservableDictionary.
            </summary>
            <param name="source">The source Dictionary.</param>
            <returns>A new ObservableDictionary containing the items from the Dictionary.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.ObservableDictionaryAdapter`2.Convert(VisionNet.Core.Patterns.ObservableDictionary{`0,`1})">
            <summary>
            Converts an ObservableDictionary to a Dictionary.
            </summary>
            <param name="source">The source ObservableDictionary.</param>
            <returns>A new Dictionary containing the items from the ObservableDictionary.</returns>
        </member>
        <member name="T:VisionNet.Core.Collections.ObservableDictionaryAdapterExtension">
            <summary>
            Provides extension methods to convert between <see cref="T:System.Collections.Generic.Dictionary`2"/> and <see cref="T:VisionNet.Core.Patterns.ObservableDictionary`2"/> using <see cref="T:VisionNet.Core.Collections.ObservableDictionaryAdapter`2"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.ObservableDictionaryAdapterExtension.ToObservableDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Converts a Dictionary to an ObservableDictionary.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="dictionary">The source Dictionary.</param>
            <returns>An ObservableDictionary containing the dictionary's elements.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.ObservableDictionaryAdapterExtension.ToDictionary``2(VisionNet.Core.Patterns.ObservableDictionary{``0,``1})">
            <summary>
            Converts an ObservableDictionary to a Dictionary.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="observable">The source ObservableDictionary.</param>
            <returns>A Dictionary containing the observable dictionary's elements.</returns>
        </member>
        <member name="T:VisionNet.Core.Collections.ReactiveList`1">
            <summary>
            ReactiveList an Observable list with change tracking.
            </summary>
            <typeparam name="T">The Type.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Collections.ReactiveList`1"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Collections.ReactiveList`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Collections.ReactiveList`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="E:VisionNet.Core.Collections.ReactiveList`1.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="E:VisionNet.Core.Collections.ReactiveList`1.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.Added">
            <summary>
            Gets the added during the last change as an Observeable.
            </summary>
            <value>The added.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.Changed">
            <summary>
            Gets the changed during the last change as an Observeable.
            </summary>
            <value>The changed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.CurrentItems">
            <summary>
            Gets the current items during the last change as an Observeable.
            </summary>
            <value>
            The current items.
            </value>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.ItemsAdded">
            <summary>
            Gets the items added during the last change.
            </summary>
            <value>The items added.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.ItemsChanged">
            <summary>
            Gets the items changed during the last change.
            </summary>
            <value>The items changed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.ItemsRemoved">
            <summary>
            Gets the items removed during the last change.
            </summary>
            <value>The items removed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.Removed">
            <summary>
            Gets the removed items during the last change as an Observable.
            </summary>
            <value>The removed.</value>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:VisionNet.Core.Collections.ReactiveList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.System#Collections#Generic#ICollection{T}#Clear">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.System#Collections#IList#Clear">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">The index.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.ReplaceAll(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Subscribe(System.IObserver{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Subscribes the specified observer to the CurrentItems.
            </summary>
            <param name="observer">The observer.</param>
            <returns>An IDisposable to release the subscription.</returns>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Update(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposables.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:VisionNet.Core.Collections.ReactiveList`1.IsCompatibleObject(System.Object)">
            <summary>
            Determines whether [is compatible object] [the specified value].
            Non-null values are fine.  Only accept nulls if T is a class or Nullable.
            Note that default(T) is not equal to null for value types except when T is Nullable.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if [is compatible object] [the specified value]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VisionNet.Core.Comparisons.ComparisonExtension">
            <summary>
            Provides extension methods for comparing values in different range conditions.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Comparisons.ComparisonExtension.InRange``1(``0,``0,``0)">
            <summary>
            Determines if a value is within the range of two other values, inclusive.
            </summary>
            <typeparam name="T">The type of the value being checked. Must implement IComparable.</typeparam>
            <param name="value">The value to be checked.</param>
            <param name="lowValue">The lower bound of the range.</param>
            <param name="upValue">The upper bound of the range.</param>
            <returns>True if the value is in the range defined by lowValue and upValue, inclusive.</returns>
        </member>
        <member name="M:VisionNet.Core.Comparisons.ComparisonExtension.InRangeExclusive``1(``0,``0,``0)">
            <summary>
            Determines if a value is within the range of two other values, exclusive.
            </summary>
            <typeparam name="T">The type of the value being checked. Must implement IComparable.</typeparam>
            <param name="value">The value to be checked.</param>
            <param name="lowValue">The lower bound of the range.</param>
            <param name="upValue">The upper bound of the range.</param>
            <returns>True if the value is greater than lowValue and less than upValue, exclusive.</returns>
        </member>
        <member name="M:VisionNet.Core.Comparisons.ComparisonExtension.OutRange``1(``0,``0,``0)">
            <summary>
            Determines if a value is outside the range of two other values, inclusive.
            </summary>
            <typeparam name="T">The type of the value being checked. Must implement IComparable.</typeparam>
            <param name="value">The value to be checked.</param>
            <param name="lowValue">The lower bound of the range.</param>
            <param name="upValue">The upper bound of the range.</param>
            <returns>True if the value is either less than or equal to lowValue or greater than or equal to upValue.</returns>
        </member>
        <member name="M:VisionNet.Core.Comparisons.ComparisonExtension.OutRangeExclusive``1(``0,``0,``0)">
            <summary>
            Determines if a value is outside the range of two other values, exclusive.
            </summary>
            <typeparam name="T">The type of the value being checked. Must implement IComparable.</typeparam>
            <param name="value">The value to be checked.</param>
            <param name="lowValue">The lower bound of the range.</param>
            <param name="upValue">The upper bound of the range.</param>
            <returns>True if the value is less than lowValue or greater than upValue, exclusive.</returns>
        </member>
        <member name="M:VisionNet.Core.Comparisons.ComparisonExtension.SafeAreEqualTo``1(``0,``0)">
            <summary>
            Compares two values of the same type for equality. Handles null values and uses IComparable or Equals for comparison.
            </summary>
            <typeparam name="T">The type of the values to compare.</typeparam>
            <param name="value">The value to compare.</param>
            <param name="comparedValue">The value to compare with.</param>
            <returns>True if the values are equal, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.Comparisons.ComparisonExtension.CanBeCompared``1(``0,``0)">
            <summary>
            Determines if two values can be compared. This method ensures that both values are non-null and of the same type.
            </summary>
            <typeparam name="T">The type of the values to compare.</typeparam>
            <param name="value">The first value to check.</param>
            <param name="comparedValue">The second value to check.</param>
            <returns>True if the values are of the same type and can be compared, otherwise false.</returns>
        </member>
        <member name="T:VisionNet.Core.Comparisons.TrackChangesAttribute">
            <summary>
            Permite indicar si una propiedad debe ser tenida en cuenta por el ChangeTracker.
            Por defecto, todas las propiedades son trackeadas, salvo que se indique explícitamente lo contrario.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Data.IDataConsumer`2">
            <summary>
            Defines an interface for consuming data with input of type <typeparamref name="TIn"/> and options of type <typeparamref name="TOptions"/>.
            This interface extends the functionality of <see cref="T:VisionNet.Core.Data.IDataInput`1"/>, <see cref="T:VisionNet.Core.Abstractions.IExecutable"/>, <see cref="T:VisionNet.Core.Patterns.IExecutionObservable`1"/>, and <see cref="T:Microsoft.Extensions.Options.IConfigureOptions`1"/>.
            </summary>
            <typeparam name="TIn">The type of input data to be consumed.</typeparam>
            <typeparam name="TOptions">The type of options used for configuration, constrained to a class type.</typeparam>
        </member>
        <member name="T:VisionNet.Core.Data.IDataFilter`1">
            <summary>
            Defines an interface for filtering data of type <typeparamref name="T"/>.
            This interface extends <see cref="T:VisionNet.Core.Data.IDataInputOutput`2"/> and provides a property to indicate whether the data is accepted by the filter.
            </summary>
            <typeparam name="T">The type of data to be filtered.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Data.IDataFilter`1.Accepted">
            <summary>
            Gets a value indicating whether the data is accepted by the filter.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Data.IDataFilterer`2">
            <summary>
            Defines an interface for filtering data with input and output of type <typeparamref name="TInOut"/> and options of type <typeparamref name="TOptions"/>.
            This interface extends the functionality of <see cref="T:VisionNet.Core.Data.IDataInputOutput`2"/>, <see cref="T:VisionNet.Core.Abstractions.IExecutable"/>, <see cref="T:VisionNet.Core.Patterns.IExecutionObservable`1"/>, and <see cref="T:Microsoft.Extensions.Options.IConfigureOptions`1"/>.
            </summary>
            <typeparam name="TInOut">The type of input and output data to be filtered.</typeparam>
            <typeparam name="TOptions">The type of options used for configuration, constrained to a class type.</typeparam>
        </member>
        <member name="T:VisionNet.Core.Data.IDataInput`1">
            <summary>
            Defines an interface for handling input data of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the input data.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Data.IDataInput`1.InputData">
            <summary>
            Gets or sets the input data for the instance.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Data.IDataInputOutput`2">
            <summary>
            Defines an interface for handling both input and output data. 
            This interface extends <see cref="T:VisionNet.Core.Data.IDataOutput`1"/> for output and <see cref="T:VisionNet.Core.Data.IDataInput`1"/> for input.
            </summary>
            <typeparam name="I">The type of input data.</typeparam>
            <typeparam name="O">The type of output data.</typeparam>
        </member>
        <member name="T:VisionNet.Core.Data.IDataOutput`1">
            <summary>
            Defines an interface for handling output data of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the output data.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Data.IDataOutput`1.OutputData">
            <summary>
            Gets the data produced by the instance.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Data.IDataProducer`2">
            <summary>
            Defines an interface for producing data of type <typeparamref name="TOut"/> with configuration options of type <typeparamref name="TOptions"/>.
            This interface extends <see cref="T:VisionNet.Core.Data.IDataOutput`1"/>, <see cref="T:VisionNet.Core.Abstractions.IExecutable"/>, <see cref="T:VisionNet.Core.Patterns.IExecutionObservable`1"/>, and <see cref="T:Microsoft.Extensions.Options.IConfigureOptions`1"/>.
            </summary>
            <typeparam name="TOut">The type of data to be produced.</typeparam>
            <typeparam name="TOptions">The type of options used for configuration, constrained to a class type.</typeparam>
        </member>
        <member name="T:VisionNet.Core.Data.IDataTransformer`3">
            <summary>
            Defines an interface for transforming data from type <typeparamref name="TIn"/> to type <typeparamref name="TOut"/> 
            with configuration options of type <typeparamref name="TOptions"/>.
            This interface extends <see cref="T:VisionNet.Core.Data.IDataInputOutput`2"/>, <see cref="T:VisionNet.Core.Abstractions.IExecutable"/>, <see cref="T:VisionNet.Core.Patterns.IExecutionObservable`1"/>, and <see cref="T:Microsoft.Extensions.Options.IConfigureOptions`1"/>.
            </summary>
            <typeparam name="TIn">The type of input data to be transformed.</typeparam>
            <typeparam name="TOut">The type of output data after transformation.</typeparam>
            <typeparam name="TOptions">The type of options used for configuration, constrained to a class type.</typeparam>
        </member>
        <member name="T:VisionNet.Core.DateTimeExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:System.DateTime"/> objects.
            </summary>
        </member>
        <member name="M:VisionNet.Core.DateTimeExtensions.Truncate(System.DateTime,System.TimeSpan)">
             <summary>
             Truncates the specified <see cref="T:System.DateTime"/> to the nearest multiple of the specified <see cref="T:System.TimeSpan"/>.
             </summary>
             <param name="dateTime">The <see cref="T:System.DateTime"/> instance to truncate.</param>
             <param name="timeSpan">The <see cref="T:System.TimeSpan"/> representing the interval to which the <see cref="T:System.DateTime"/> should be truncated.</param>
             <returns>A <see cref="T:System.DateTime"/> object truncated to the nearest multiple of the specified <see cref="T:System.TimeSpan"/>.</returns>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="timeSpan"/> is <see cref="F:System.TimeSpan.Zero"/>.</exception>
            
             <remarks>
             This method truncates the <paramref name="dateTime"/> to the nearest multiple of the <paramref name="timeSpan"/>.
             The <paramref name="dateTime"/> will be adjusted so that its time component matches the largest whole multiple
             of <paramref name="timeSpan"/> that is less than or equal to the original value.
             
             If <paramref name="timeSpan"/> is <see cref="F:System.TimeSpan.Zero"/>, an exception will be thrown. A <see cref="T:System.DateTime"/>
             value of <see cref="F:System.DateTime.MinValue"/> or <see cref="F:System.DateTime.MaxValue"/> will be returned unchanged,
             as these are typically used as guard values and should not be modified.
             
             The method uses the <see cref="P:System.DateTime.Ticks"/> property for truncation, and the <paramref name="dateTime"/>
             will be adjusted by subtracting the remainder when the ticks are divided by the ticks of the <paramref name="timeSpan"/>.
             </remarks>
        </member>
        <member name="T:VisionNet.Core.Drawing.PointAdapter">
            <summary>
            Adapter helpers to convert between <see cref="T:VisionNet.Core.Drawing.PointD"/> and <see cref="T:System.Drawing.PointF"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointAdapter.Convert(VisionNet.Core.Drawing.PointD)">
            <summary>
            Converts a <see cref="T:VisionNet.Core.Drawing.PointD"/> to a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="pointD">The double-precision point.</param>
            <returns>The single-precision <see cref="T:System.Drawing.PointF"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointAdapter.Convert(System.Drawing.PointF)">
            <summary>
            Converts a <see cref="T:System.Drawing.PointF"/> to a <see cref="T:VisionNet.Core.Drawing.PointD"/>.
            </summary>
            <param name="pointF">The single-precision point.</param>
            <returns>The double-precision <see cref="T:VisionNet.Core.Drawing.PointD"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Drawing.PointAdapterExtensions">
            <summary>
            Conversion class between 
            </summary>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointAdapterExtensions.ToPointD(System.Drawing.PointF)">
            <summary>
            Converts a <see cref="T:System.Drawing.PointF"/> to a <see cref="T:VisionNet.Core.Drawing.PointD"/>.
            </summary>
            <param name="value">The single-precision point.</param>
            <returns>The double-precision <see cref="T:VisionNet.Core.Drawing.PointD"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointAdapterExtensions.ToPointF(VisionNet.Core.Drawing.PointD)">
            <summary>
            Converts a <see cref="T:VisionNet.Core.Drawing.PointD"/> to a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="value">The double-precision point.</param>
            <returns>The single-precision <see cref="T:System.Drawing.PointF"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointAdapterExtensions.ToPointD(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Converts a <see cref="T:System.Drawing.PointF"/> to a <see cref="T:VisionNet.Core.Drawing.PointD"/>.
            </summary>
            <param name="value">The single-precision point.</param>
            <returns>The double-precision <see cref="T:VisionNet.Core.Drawing.PointD"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointAdapterExtensions.ToPointF(System.Collections.Generic.List{VisionNet.Core.Drawing.PointD})">
            <summary>
            Converts a <see cref="T:VisionNet.Core.Drawing.PointD"/> to a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="value">The double-precision point.</param>
            <returns>The single-precision <see cref="T:System.Drawing.PointF"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Drawing.PointD">
            <summary>
            Simple 2D point with double precision coordinates. Provides basic arithmetic
            operators for convenience; note that these operators are value-wise and do not
            mutate operands.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Drawing.PointD.X">
            <summary>X coordinate.</summary>
        </member>
        <member name="F:VisionNet.Core.Drawing.PointD.Y">
            <summary>Y coordinate.</summary>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a point from its coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointD.op_Addition(VisionNet.Core.Drawing.PointD,VisionNet.Core.Drawing.PointD)">
            <summary>
            Adds two points component-wise.
            </summary>
            <param name="p1">Left operand.</param>
            <param name="p2">Right operand.</param>
            <returns>A new <see cref="T:VisionNet.Core.Drawing.PointD"/> equal to (p1.X + p2.X, p1.Y + p2.Y).</returns>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointD.op_Subtraction(VisionNet.Core.Drawing.PointD,VisionNet.Core.Drawing.PointD)">
            <summary>
            Subtracts two points component-wise.
            </summary>
            <param name="p1">Left operand.</param>
            <param name="p2">Right operand.</param>
            <returns>A new <see cref="T:VisionNet.Core.Drawing.PointD"/> equal to (p1.X - p2.X, p1.Y - p2.Y).</returns>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointD.op_Multiply(VisionNet.Core.Drawing.PointD,System.Double)">
            <summary>
            Multiplies a point by a scalar.
            </summary>
            <param name="p">Point to scale.</param>
            <param name="scalar">Scaling factor.</param>
            <returns>Scaled point.</returns>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointD.op_Division(VisionNet.Core.Drawing.PointD,System.Double)">
            <summary>
            Divides a point by a scalar.
            </summary>
            <param name="p">Point to scale.</param>
            <param name="scalar">Divisor (non-zero).</param>
            <returns>Scaled point.</returns>
        </member>
        <member name="M:VisionNet.Core.Drawing.PointD.ToString">
            <summary>
            Formats the point as <c>(X, Y)</c> with default numeric formatting.
            </summary>
            <returns>Human-readable string.</returns>
        </member>
        <member name="T:VisionNet.Core.Dawing.PointFWithContext`1">
            <summary>
            Represents a point with associated context information of a generic type.
            This class allows associating a point with any type of context data.
            </summary>
            <typeparam name="T">The type of context information associated with the point.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Dawing.PointFWithContext`1.Point">
            <summary>
            Gets or sets the point associated with the context.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Dawing.PointFWithContext`1.Context">
            <summary>
            Gets or sets the context information associated with the point.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Dawing.PointFWithContext`1.#ctor(System.Drawing.PointF,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Dawing.PointFWithContext`1"/> class with the specified point and context.
            </summary>
            <param name="point">The point to associate with the context.</param>
            <param name="context">The context information to associate with the point.</param>
        </member>
        <member name="M:VisionNet.Core.Dawing.PointFWithContext`1.#ctor(System.Single,System.Single,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Dawing.PointFWithContext`1"/> class with the specified coordinates and context.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="context">The context information to associate with the point.</param>
        </member>
        <member name="M:VisionNet.Core.Dawing.PointFWithContext`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:VisionNet.Core.Dawing.PointFWithContext`1"/> instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified object is equal to the current instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VisionNet.Core.Dawing.PointFWithContext`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:VisionNet.Core.Dawing.PointFWithContext`1"/> instance.
            </summary>
            <returns>A hash code for the current instance.</returns>
        </member>
        <member name="M:VisionNet.Core.Encoding.Base64EncoderDecoder.Encode(System.String)">
            <summary> The Encode function takes a string and returns the base64 encoded version of that string.</summary>
            <param name="source"> </param>
            <returns> A string.</returns>
        </member>
        <member name="M:VisionNet.Core.Encoding.Base64EncoderDecoder.Decode(System.String)">
            Esta función desencripta la cadena que le envíamos en el parámentro de entrada.
            <summary> The Decode function takes a string and converts it to ASCII.</summary>
            <param name="source"> The string to be decoded</param>
            <returns> A string</returns>
        </member>
        <member name="T:VisionNet.Core.Enums.EnumExtensions">
            <summary>
            Provides extension methods for enumerations.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Enums.EnumExtensions.IsIn``1(``0,``0[])">
            <summary>
            Determines if the enum value is contained within a specified set of values.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="this">The enum value to check.</param>
            <param name="possibles">The list of possible enum values.</param>
            <returns>True if the enum value is within the set of possible values; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.Enums.EnumExtensions.IsNotIn``1(``0,``0[])">
            <summary>
            Determines if the enum value is not contained within a specified set of values.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="this">The enum value to check.</param>
            <param name="possibles">The list of rejected enum values.</param>
            <returns>True if the enum value is not within the rejected values; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.Enums.EnumExtensions.ToList(System.Type)">
            <summary>
            Converts an enum type to a list of key-value pairs, where the key is the enum value and the value is the string representation of that enum.
            </summary>
            <param name="enumType">The type of the enum to convert.</param>
            <returns>A collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> representing the enum values and their string representations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="enumType"/> is not an enum type.</exception>
        </member>
        <member name="M:VisionNet.Core.Enums.EnumExtensions.ToStringList(System.Type)">
            <summary>
            Converts an enum type to a list of string representations of the enum values.
            </summary>
            <param name="enumType">The type of the enum to convert.</param>
            <returns>A collection of strings representing the enum values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="enumType"/> is not an enum type.</exception>
        </member>
        <member name="M:VisionNet.Core.Enums.EnumExtensions.ToValuesList(System.Type)">
            <summary>
            Converts an enum type to a list of the enum values as objects.
            </summary>
            <param name="enumType">The type of the enum to convert.</param>
            <returns>A collection of objects representing the enum values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="enumType"/> is not an enum type.</exception>
        </member>
        <member name="M:VisionNet.Core.Enums.EnumExtensions.ToList``1">
            <summary>
            Creates a list with all keys and values of a given enum type.
            </summary>
            <typeparam name="T">The enum type, which must be a struct.</typeparam>
            <returns>A list of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> representing the enum values and their string representations.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the provided type is not an enum type.</exception>
        </member>
        <member name="M:VisionNet.Core.Enums.EnumExtensions.ToStringList``1">
            <summary>
            Creates a list with all string representations of the enum values for a given enum type.
            </summary>
            <typeparam name="T">The enum type, which must be a struct.</typeparam>
            <returns>A list of strings representing the enum values.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the provided type is not an enum type.</exception>
        </member>
        <member name="M:VisionNet.Core.Enums.EnumExtensions.ToValuesList``1">
            <summary>
            Creates a list with all enum values for a given enum type.
            </summary>
            <typeparam name="T">The enum type, which must be a struct.</typeparam>
            <returns>A list of enum values represented as objects.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the provided type is not an enum type.</exception>
        </member>
        <member name="T:VisionNet.Core.Events.ConditionEventArgs">
            <summary>
            A event args to query a condition
            </summary>
        </member>
        <member name="P:VisionNet.Core.Events.ConditionEventArgs.Condition">
            <summary>
            The condition of the EventArgs
            </summary>
        </member>
        <member name="M:VisionNet.Core.Events.ConditionEventArgs.#ctor">
            <summary>
            Create a ConditionEventArgs
            </summary>
        </member>
        <member name="T:VisionNet.Core.Events.CustomEventHandler`1">
            <summary>
            Represents a method that will handle an event with a custom event arguments of type <typeparamref name="TEventArgs"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the event data passed to the event handler.</typeparam>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:VisionNet.Core.Events.EventArgs`1">
            <summary>
            A generical EventArgs instance using generics
            </summary>
            <typeparam name="T">The type of arguments</typeparam>
        </member>
        <member name="P:VisionNet.Core.Events.EventArgs`1.Value">
            <summary>
            The value of the EventArgs
            </summary>
        </member>
        <member name="M:VisionNet.Core.Events.EventArgs`1.#ctor(`0)">
            <summary>
            Create a generic EventArgs with the specific value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:VisionNet.Core.Events.EventHelper">
            <summary>
            Provides utility methods for advanced event handling, allowing custom actions for each subscriber and transformation of event arguments.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Events.EventHelper.InvokeForEachSubscriber``1(System.EventHandler{``0},System.Action{System.EventHandler{``0}},System.Action{System.Exception})">
            <summary>
            Invokes a custom action for each subscriber of an event, allowing individualized handling.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler that contains the list of subscribers.</param>
            <param name="customAction">The custom action to execute for each subscriber. It takes the current subscriber as an argument.</param>
            <param name="onException">An optional action that runs if an exception occurs during invocation of a subscriber. It takes the exception as an argument.</param>
        </member>
        <member name="M:VisionNet.Core.Events.EventHelper.InvokeForEachSubscriber``1(System.EventHandler{``0},System.Object,``0,System.Action{System.EventHandler{``0},System.Object,``0},System.Action{System.Exception})">
            <summary>
            Invokes a custom action for each subscriber of an event, allowing individualized handling.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler that contains the list of subscribers.</param>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event arguments to pass to each subscriber.</param>
            <param name="customAction">The custom action to execute for each subscriber. It takes the current subscriber, the sender, and the event arguments as arguments.</param>
            <param name="onException">An optional action that runs if an exception occurs during invocation of a subscriber. It takes the exception as an argument.</param>
        </member>
        <member name="M:VisionNet.Core.Events.EventHelper.InvokeWithCustomEventArgs``1(System.EventHandler{``0},System.Object,System.Func{``0},System.Action{System.Exception})">
            <summary>
            Invokes each subscriber of an event with transformed arguments provided by a function, allowing modification of the event arguments for each subscriber.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler that contains the list of subscribers.</param>
            <param name="sender">The sender of the event.</param>
            <param name="args">The original event arguments.</param>
            <param name="getEventArgs">A function that transforms the event arguments. It takes the original arguments and returns the transformed arguments.</param>
            <param name="onException">An optional action that runs if an exception occurs during invocation of a subscriber. It takes the exception as an argument.</param>
        </member>
        <member name="M:VisionNet.Core.Events.EventHelper.InvokeWithCustomEventArgs``1(System.EventHandler{``0},System.Object,``0,System.Func{``0,``0},System.Action{System.Exception})">
            <summary>
            Invokes each subscriber of an event with transformed arguments provided by a function, allowing modification of the event arguments for each subscriber.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler that contains the list of subscribers.</param>
            <param name="sender">The sender of the event.</param>
            <param name="args">The original event arguments.</param>
            <param name="getEventArgs">A function that transforms the event arguments. It takes the original arguments and returns the transformed arguments.</param>
            <param name="onException">An optional action that runs if an exception occurs during invocation of a subscriber. It takes the exception as an argument.</param>
        </member>
        <member name="M:VisionNet.Core.Events.EventHelper.InvokeWithClonedEventArgs``1(System.EventHandler{``0},System.Object,``0,System.Action{System.Exception})">
            <summary>
            Invokes each subscriber of an event with cloned arguments, allowing modification of the event arguments for each subscriber.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler that contains the list of subscribers.</param>
            <param name="sender">The sender of the event.</param>
            <param name="args">The original event arguments.</param>
            <param name="onException">An optional action that runs if an exception occurs during invocation of a subscriber. It takes the exception as an argument.</param>
        </member>
        <member name="M:VisionNet.Core.Events.EventHelper.InvokeAsynchronous``1(System.EventHandler{``0},System.Object,``0,System.Action{System.Exception})">
            <summary>
            Invokes each subscriber of an event asynchronously, handling exceptions optionally.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler that contains the list of subscribers.</param>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event arguments to pass to each subscriber.</param>
            <param name="onException">An optional action that runs if an exception occurs during invocation of a subscriber. It takes the exception as an argument.</param>
        </member>
        <member name="T:VisionNet.Core.Events.IEventArgs`1">
            <summary>
            Defines an interface for event arguments that encapsulate a value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the value encapsulated by the event arguments.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Events.IEventArgs`1.Value">
            <summary>
            Gets the value of the event arguments.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Events.SimpleNotificationEventArgs`1">
            <summary>
            A generical EventArgs instance using generics
            </summary>
            <typeparam name="T">The type of arguments</typeparam>
        </member>
        <member name="M:VisionNet.Core.Events.SimpleNotificationEventArgs`1.#ctor(`0)">
            <summary>
            Create a generic EventArgs with the specific value
            </summary>
            <param name="index">The index key</param>
        </member>
        <member name="T:VisionNet.Core.Events.SourcedEventArgs`2">
            <summary>
            A generic EventArgs instance that uses generics for both the event arguments and an index value.
            </summary>
            <typeparam name="S">The type of the index key.</typeparam>
            <typeparam name="T">The type of the event argument's value.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Events.SourcedEventArgs`2.Index">
            <summary>
            Gets the index key associated with the event arguments.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Events.SourcedEventArgs`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Events.SourcedEventArgs`2"/> class with the specified index and value.
            </summary>
            <param name="index">The index key associated with the event.</param>
            <param name="value">The value of the event argument.</param>
        </member>
        <member name="T:VisionNet.Core.Events.StateChangedEventArgs`1">
            <summary>
            A generic EventArgs instance that is used to represent a state change event.
            </summary>
            <typeparam name="TState">The type of the state associated with the event.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Events.StateChangedEventArgs`1.PreviousState">
            <summary>
            The previous state of the EventArgs
            </summary>
        </member>
        <member name="P:VisionNet.Core.Events.StateChangedEventArgs`1.CurrentState">
            <summary>
            The current state of the EventArgs
            </summary>
        </member>
        <member name="P:VisionNet.Core.Events.StateChangedEventArgs`1.StateMachineIndex">
            <summary>
            Identification of the state machine
            </summary>
        </member>
        <member name="P:VisionNet.Core.Events.StateChangedEventArgs`1.Duration">
            <summary>
            Period of time that the previous state was activated
            </summary>
        </member>
        <member name="M:VisionNet.Core.Events.StateChangedEventArgs`1.#ctor(`0,`0,System.String,System.TimeSpan)">
            <summary>
            Create a generic EventArgs with the specific value
            </summary>
            <param name="currentState">The current state value</param>
            <param name="previousState">The previous state value</param>
            <param name="stateMachineIndex">Identification of the state machine</param>
            <param name="duration">Period of time that the previous state was activated</param>
        </member>
        <member name="T:VisionNet.Core.Events.EventArgs`2">
            <summary>
            A generical EventArgs instance using generics
            </summary>
            <typeparam name="T">The type of arguments</typeparam>
            <typeparam name="S">The type of the status</typeparam>
        </member>
        <member name="P:VisionNet.Core.Events.EventArgs`2.Value">
            <summary>
            The value of the EventArgs
            </summary>
        </member>
        <member name="P:VisionNet.Core.Events.EventArgs`2.Status">
            <summary>
            The status of the value
            </summary>
        </member>
        <member name="M:VisionNet.Core.Events.EventArgs`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.EventArgs"/> class with the specified value and status.
            </summary>
            <param name="value">The value associated with the event.</param>
            <param name="status">The status associated with the event.</param>
        </member>
        <member name="T:VisionNet.Core.Events.ValueChangedEventArgs`1">
            <summary>Event arguments used when a value change event is raised.</summary>
            <remarks>
            <para>
            To avoid additional read operations you should use the properties passed in this class.
            </para>
            </remarks>
        </member>
        <member name="P:VisionNet.Core.Events.ValueChangedEventArgs`1.CallerInformation">
            <summary>
            Information about the caller
            </summary>
        </member>
        <member name="P:VisionNet.Core.Events.ValueChangedEventArgs`1.PreviousValue">
            <summary>
            The previous value of the feature.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Events.ValueChangedEventArgs`1.CurrentValue">
            <summary>
            The current value of the feature.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Events.ValueChangedEventArgs`1.#ctor(`0,`0,VisionNet.Core.Monitoring.CallerInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Events.ValueChangedEventArgs`1"/> class.
            </summary>
            <param name="oldValue">The value before the change.</param>
            <param name="newValue">The value after the change.</param>
            <param name="callerInformation">Information about the caller that triggered the event.</param>
        </member>
        <member name="T:VisionNet.Core.Exceptions.CheckException">
            <summary>
            Represents an exception that occurs when a check operation fails in the VisionNet framework.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Exceptions.CheckException.InvalidCheckResult">
            <summary>
            Gets or sets the invalid check result that caused the exception.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Exceptions.CheckException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Exceptions.CheckException"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Exceptions.CheckException.#ctor(VisionNet.Core.Abstractions.InvalidCheckResult)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Exceptions.CheckException"/> class with the specified invalid check result.
            </summary>
            <param name="invalidCheckResult">The result of the invalid check that triggered the exception.</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.CheckException.#ctor(VisionNet.Core.Abstractions.InvalidCheckResult,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Exceptions.CheckException"/> class with the specified invalid check result 
            and a reference to the inner exception that caused this exception.
            </summary>
            <param name="invalidCheckResult">The result of the invalid check that triggered the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.CheckException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Exceptions.CheckException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized data of the exception.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that provides contextual information about the source or destination of the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when the class name is null or the <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:VisionNet.Core.Exceptions.ExceptionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Exceptions.ExceptionExtensions.LogToConsole(System.Exception,System.String)">
            <summary>
            Logs the details of the specified exception to the console.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="sourceClass">The name of the class where the exception occurred (optional, defaults to "Unknown").</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.ExceptionExtensions.GetExceptionInfo(System.Exception,System.String@,System.String@,System.String@,System.String@,System.Int32@,System.String@)">
            <summary>
            Extrae la información de la excepción
            </summary>
            <param name="exception">Excepción de la que queremos extraer la información</param>
            <param name="assembly">Ensamblado</param>
            <param name="file">Nombre del archivo donde se ha provocado la excepción</param>
            <param name="className">Nombre de la clase donde se ha provocado la excepción</param>
            <param name="methode">Método donde se ha provocado la excepción</param>
            <param name="line">Linea donde se ha provocado la excepción</param>
            <param name="stackTrace">Pila de llamadas</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.ExceptionExtensions.ComposeExceptionString(System.Exception)">
            <summary> The ComposeExceptionString function composes a string containing the exception message, file name, class name, method name and line number where the exception occurred.</summary>
            <param name="exception"> The exception.</param>
            <returns> A string that contains the exception message, file name, class name, method name and line number where the exception occurred.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.ExceptionExtensions.ComposeInnerExceptionString(System.Exception)">
            <summary> The ComposeExceptionString function composes a string containing the exception message, file name, class name, method name and line number where the exception occurred.</summary>
            <param name="exception"> The exception.</param>
            <returns> A string that contains the exception message, file name, class name, method name and line number where the exception occurred.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.ExceptionExtensions.GetFirstInnerExceptionString(System.Exception)">
            <summary> The ComposeExceptionString function composes a string containing the exception message, file name, class name, method name and line number where the exception occurred.</summary>
            <param name="exception"> The exception.</param>
            <returns> A string that contains the exception message, file name, class name, method name and line number where the exception occurred.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.InvalidConfigurationParameterException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase VisionNet.Devices.InvalidConfigurationParameterException.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Exceptions.InvalidConfigurationParameterException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase VisionNet.Devices.InvalidConfigurationParameterException con el mensaje de error especificado.
            </summary>
            <param name="message">Mensaje que describe el error</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.InvalidConfigurationParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase VisionNet.Devices.InvalidConfigurationParameterException con el mensaje de
            error especificado y una referencia a la excepción interna que representa la
            causa de esta excepción.
            </summary>
            <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
            <param name="innerException">
            Inicializa una nueva instancia de la clase System.Exception con el mensaje de
            error especificado y una referencia a la excepción interna que representa la
            causa de esta excepción.
            </param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.InvalidConfigurationParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase VisionNet.Devices.InvalidConfigurationParameterException con datos serializados.
            </summary>
            <param name="info">
            System.Runtime.Serialization.SerializationInfo que contiene los datos serializados
            del objeto que hacen referencia a la excepción que se va a producir.
            </param>
            <param name="context">
            System.Runtime.Serialization.StreamingContext que contiene información contextual
            sobre el origen o el destino.
            </param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>  
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or System.Exception.HResult is zero (0).</exception>  
        </member>
        <member name="M:VisionNet.Core.Exceptions.StartingAppException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase VisionNet.Devices.InvalidConfigurationParameterException.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Exceptions.StartingAppException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase VisionNet.Devices.InvalidConfigurationParameterException con el mensaje de error especificado.
            </summary>
            <param name="message">Mensaje que describe el error</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.StartingAppException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase VisionNet.Devices.InvalidConfigurationParameterException con el mensaje de
            error especificado y una referencia a la excepción interna que representa la
            causa de esta excepción.
            </summary>
            <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
            <param name="innerException">
            Inicializa una nueva instancia de la clase System.Exception con el mensaje de
            error especificado y una referencia a la excepción interna que representa la
            causa de esta excepción.
            </param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.StartingAppException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase VisionNet.Devices.InvalidConfigurationParameterException con datos serializados.
            </summary>
            <param name="info">
            System.Runtime.Serialization.SerializationInfo que contiene los datos serializados
            del objeto que hacen referencia a la excepción que se va a producir.
            </param>
            <param name="context">
            System.Runtime.Serialization.StreamingContext que contiene información contextual
            sobre el origen o el destino.
            </param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>  
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or System.Exception.HResult is zero (0).</exception>  
        </member>
        <member name="T:VisionNet.Core.Exceptions.TryCatchHelper">
            <summary>
            A static helper class that provides methods for safely executing actions or converting objects, 
            handling exceptions, and retrying operations.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Exceptions.TryCatchHelper.TryDo(System.Object,System.Action{System.Object},System.Exception@)">
            <summary>
            Attempts to execute an action on an object, and returns a boolean indicating whether the action was successful.
            If the action fails, it returns false and sets the exception parameter to contain information about the failure.
            </summary>
            <param name="obj">The object on which the action is performed.</param>
            <param name="action">The action to be performed on the object.</param>
            <param name="exception">An output parameter that will contain the exception details if the action fails.</param>
            <returns>A boolean value indicating whether the action was successful.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.TryCatchHelper.TryDo(System.Object,System.Action{System.Object})">
            <summary>
            Attempts to execute an action on an object, and returns a boolean indicating whether the action was successful.
            If the TryDo function fails, it returns false and sets the exception parameter to contain information about the failure.
            </summary>
            <param name="obj">The object on which the action is performed.</param>
            <param name="action">The action to be performed on the object.</param>
            <returns>A boolean value indicating whether the action was successful.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.TryCatchHelper.TryDo(System.Object,System.Action{System.Object},System.Int32)">
            <summary>
            Attempts to execute an action on an object, and returns a boolean indicating whether the action was successful.
            If the action fails, it returns false and sets the exception parameter to contain information about the failure.
            </summary>
            <param name="obj">The object on which the action is performed.</param>
            <param name="action">The action to be performed on the object.</param>
            <param name="maxRetries">The maximum number of times to attempt the action in case of failure.</param>
            <returns>A boolean value indicating whether the action was successful.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.TryCatchHelper.TryDo(System.Object,System.Action{System.Object},System.Exception@,System.Int32)">
            <summary>
            Attempts to execute an action on an object, and returns a boolean indicating whether the action was successful.
            If the action fails, it returns false and sets the exception parameter to contain information about the failure.
            </summary>
            <param name="obj">The object on which the action is performed.</param>
            <param name="action">The action to be performed on the object.</param>
            <param name="exception">An output parameter that will contain the exception details if the action fails.</param>
            <param name="maxRetries">The maximum number of times to attempt the action in case of failure.</param>
            <returns>A boolean value indicating whether the action was successful.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.TryCatchHelper.TryDo(System.Object,System.Action{System.Object},System.Action{System.Exception},System.Int32)">
            <summary>
            Attempts to execute an action on an object, and returns a boolean indicating whether the action was successful.
            If the action fails, it returns false and sets the exception parameter to contain information about the failure.
            A custom exception action is provided to handle the exception.
            </summary>
            <param name="obj">The object on which the action is performed.</param>
            <param name="action">The action to be performed on the object.</param>
            <param name="exceptionAction">A custom action that processes the exception if the action fails.</param>
            <param name="maxRetries">The maximum number of times to attempt the action in case of failure.</param>
            <returns>A boolean value indicating whether the action was successful.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.TryCatchHelper.TryConvert``1(System.Object,System.Func{System.Object,``0},``0@,System.Exception@)">
            <summary>
            Attempts to convert an object to a specified type. If the conversion fails, 
            it returns false and sets the exception parameter to the thrown exception.
            </summary>
            <param name="obj">The object to be converted.</param>
            <param name="action">The function used to convert the object to the target type.</param>
            <param name="result">The result of the conversion.</param>
            <param name="exception">An output parameter that will contain the exception details if the conversion fails.</param>
            <returns>A boolean value indicating whether the conversion was successful.</returns>
        </member>
        <member name="M:VisionNet.Core.Exceptions.TryCatchHelper.TryConvert``1(System.Object,System.Func{System.Object,``0},``0@)">
            <summary>
            Attempts to convert an object to a specified type. If the conversion fails, 
            it returns false and sets the exception parameter to the thrown exception.
            </summary>
            <param name="obj">The object to be converted.</param>
            <param name="action">The function used to convert the object to the target type.</param>
            <param name="result">The result of the conversion.</param>
            <returns>A boolean value indicating whether the conversion was successful.</returns>
        </member>
        <member name="T:VisionNet.Core.Exceptions.VisionNetException">
            <summary>
            Image conversion exception.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Exceptions.VisionNetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Exceptions.VisionNetException"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Exceptions.VisionNetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Exceptions.VisionNetException"/> class.
            </summary>
            <param name="message">Message providing some additional information.</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.VisionNetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Exceptions.VisionNetException"/> class.
            </summary>
            <param name="message">Message providing some additional information.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.VisionNetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
             Initializes a new instance of the<see cref="T:VisionNet.Core.Exceptions.VisionNetException"/> class. 
            </summary> 
            <param name = "info" > The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param> 
             <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:VisionNet.Core.Exceptions.VisionNetException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
             When overridden in a derived class, sets the<see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception. 
            </summary> 
            <param name = "info"> The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param> 
            <param name = "context"> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param> 
        </member>
        <member name="T:VisionNet.Core.Maths.MathHelper">
            <summary>
            Mathematical helper class with aditional methods
            </summary>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.Min``1(``0[])">
            <summary>
            Gets the minimum value of the provided list
            </summary>
            <typeparam name="T">Associated type</typeparam>
            <param name="values">Provided array of values</param>
            <returns>Minimum value</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.Max``1(``0[])">
            <summary>
            Gets the maximium value of the provided list
            </summary>
            <typeparam name="T">Associated type</typeparam>
            <param name="values">Provided array of values</param>
            <returns>Maximium value</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.Clamp``1(``0,``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.IncInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Increments an integer value within a specified range. If the value exceeds the maximum, it wraps around to the minimum.
            </summary>
            <param name="val">The current value to increment.</param>
            <param name="minValue">The minimum value of the range.</param>
            <param name="maxValue">The maximum value of the range.</param>
            <returns>The incremented value within the range.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="maxValue"/> is less than <paramref name="minValue"/>.</exception>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.DecInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Decrements an integer value within a specified range. If the value goes below the minimum, it wraps around to the maximum.
            </summary>
            <param name="val">The current value to decrement.</param>
            <param name="minValue">The minimum value of the range.</param>
            <param name="maxValue">The maximum value of the range.</param>
            <returns>The decremented value within the range.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="maxValue"/> is less than <paramref name="minValue"/>.</exception>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.CalculateUpperSquaredMatrixSize(System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Calculates the most similiar squared matrix (columns and rows)
            where the elements can fit into.
            </summary>
            <param name="elements">Number of element I want to put in the matrix</param>
            <param name="cols">Result columns of the matrix</param>
            <param name="rows">Result rows of the matrix</param>
            <param name="columnPriority">In case of it can not be a squared matrix, 
            indicate the preference to increase one column or row</param>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.GetMatrixPosition(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculate the column and row of the position in the matrix defined.
            </summary>
            <param name="position">Order in the matrix in LeftToRight and TopToBottom priority</param>
            <param name="cols">Number of columns in the matrix</param>
            <param name="rows">Number of rows in the matrix</param>
            <param name="col">Calculated column position</param>
            <param name="row">Calculated row position</param>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.DegreesToRadians(System.Double)">
            <summary>
            Converts an angle from degrees to radians.
            </summary>
            <param name="degrees">Angle in degrees.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.RadiansToDegrees(System.Double)">
            <summary>
            Converts an angle from radians to degrees.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>Angle in degrees.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.EuclideanDistance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the Euclidean distance between two specified points (X, Y).
            </summary>
            <param name="x1">The X coordinate of the first point.</param>
            <param name="y1">The Y coordinate of the first point.</param>
            <param name="x2">The X coordinate of the second point.</param>
            <param name="y2">The Y coordinate of the second point.</param>
            <returns>The Euclidean distance between two specified points (X, Y).</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.EuclideanDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the Euclidean distance between two specified points (X, Y).
            </summary>
            <param name="x1">The X coordinate of the first point.</param>
            <param name="y1">The Y coordinate of the first point.</param>
            <param name="x2">The X coordinate of the second point.</param>
            <param name="y2">The Y coordinate of the second point.</param>
            <returns>The Euclidean distance between two specified points (X, Y).</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.Module(System.Single,System.Single)">
            <summary>
            Calculates the module of a vector.
            </summary>
            <param name="vX">The X component of the vector.</param>
            <param name="vY">The Y component of the vector.</param>
            <returns>The module of the vector.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.MathHelper.Module(System.Double,System.Double)">
            <summary>
            Calculates the module of a vector.
            </summary>
            <param name="vX">The X component of the vector.</param>
            <param name="vY">The Y component of the vector.</param>
            <returns>The module of the vector.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.RandomExtension.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>
            Returns a normally distributed random number, with the specified mean and standard deviation.
            </summary>
            <param name="random">The random number generator instance.</param>
            <param name="mean">The mean of the distribution.</param>
            <param name="stdDev">The standard deviation of the distribution.</param>
            <returns>A random number with a normal distribution.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.RandomExtension.NextExp(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Returns a random number between min and max, with an exponential distribution.
            </summary>
            <param name="random">The random number generator instance.</param>
            <param name="min">The minimum value of the random number.</param>
            <param name="max">The maximum value of the distribution.</param>
            <param name="rate">The rate parameter is the inverse of the mean. Default value 1/mean = 1 gives a mean of 1.</param>
            <returns>A random number between min and max, with a distribution skewed towards higher values.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.RandomExtension.NextSkewedGaussian(System.Random,System.Double,System.Double,System.Int32)">
            <summary>
            Generates a random number from a skewed normal distribution.
            </summary>
            <param name="random">The random object to use.</param>
            <param name="standardDeviation">The standard deviation of the skewed normal distribution.</param>
            <param name="skewness">The skewness of the skewed normal distribution. Positive skew means the tail is on the right; negative skew means the tail is on the left.</param>
            <param name="dbIteration">Number of iterations to create a skewed normal random number.</param>
            <returns>A skewed normal random number.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.RandomExtension.NextString(System.Random,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a random string using the specified character set.
            </summary>
            <param name="random">Random instance to use.</param>
            <param name="charSet">Set of characters used in the random output.</param>
            <param name="maxLength">Maximum length of the output string.</param>
            <param name="fixedLenght">If true, the string will have a fixed length; otherwise, the length will be random.</param>
            <returns>A randomly generated string.</returns>
            <exception cref="T:System.ArgumentException">Thrown if any arguments are invalid.</exception>
        </member>
        <member name="M:VisionNet.Core.Maths.RandomExtension.NextBool(System.Random,System.Double)">
            <summary>
            Generates a random boolean value based on the specified probability of returning true.
            </summary>
            <param name="random">The Random instance that extends this method.</param>
            <param name="probability">The probability of returning true, expressed as a number between 0.0 and 1.0, where 1.0 means always true.</param>
            <returns>A random boolean value where the probability of true is the given value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if probability is not in the range of 0.0 to 1.0.</exception>
        </member>
        <member name="M:VisionNet.Core.Maths.RandomExtension.NextDateTime(System.Random,System.DateTime,System.DateTime,System.DateTime,System.Double)">
            <summary>
            Generates a random date within a specified range, adjusted by a mean date and a standard deviation.
            </summary>
            <param name="random">The Random instance that extends this method.</param>
            <param name="minDate">The minimum date that can be generated.</param>
            <param name="maxDate">The maximum date that can be generated.</param>
            <param name="meanDate">The mean date, which is the center of the normal distribution.</param>
            <param name="stdDev">The standard deviation in days, which defines how spread out the dates will be around the mean.</param>
            <returns>A random date within the specified range.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if minDate is greater than maxDate, or if the mean date is outside the bounds of the range.</exception>
        </member>
        <member name="T:VisionNet.Core.Maths.ValueCountTuple">
            <summary>
            Replacing ValueTuple by class,
            intellisence didn't work in sqlproj with C# 7.0
            </summary>
        </member>
        <member name="P:VisionNet.Core.Maths.ValueCountTuple.Value">
            <summary>
            Gets or sets the value associated with this instance.
            This property represents the main value of the tuple.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Maths.ValueCountTuple.Count">
            <summary>
            Gets or sets the count associated with this instance.
            This property represents the number of occurrences of the value.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Maths.ValueCountTuple.#ctor(System.Double,System.Int32)">
            <summary> The ValueCountTuple function is a tuple that contains the value and count of each unique value in an array.</summary>
            <param name="value"> The value of the tuple.</param>
            <param name="count"> The number of times the value occurs.</param>
            <returns> The value and count of the tuple.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.ValueCountTuple.CompareTo(System.Object)">
            <summary> The CompareTo function compares two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <param name="obj"> What is this parameter used for?</param>
            <returns> The difference between the count of this object and the count of obj.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.ValueCountTuple.CompareTo(VisionNet.Core.Maths.ValueCountTuple)">
             <summary> The CompareTo function is used to compare two objects of the same type and return an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
             <param name="other"> The other valuecounttuple to compare this one with.</param>
             <returns> An integer that indicates the relative order of the objects being compared. the return value has these meanings:
            less than zero - this object is less than the other parameter.
            zero - this object is equal to other. 
            greater than zero - this object is greater than other.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.ValueCountTuple.GetHashCode">
            <summary> The GetHashCode function is used to generate a unique hash code for each instance of the class.
            This function is called when an object needs to be stored in a HashSet or Dictionary.</summary>
            <returns> The hash code for the current instance.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.ValueCountTuple.Equals(System.Object)">
            <summary> The Equals function is used to compare two objects of the same type.
            The function returns true if the objects are equal, and false otherwise.</summary>
            <param name="obj"> The object to compare with the current object.</param>
            <returns> True if the objects are of the same type and have equal values.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.ValueCountTuple.Equals(VisionNet.Core.Maths.ValueCountTuple)">
            <summary> The Equals function is used to compare two objects of the same type.
            The function returns true if both objects are equal, and false otherwise.</summary>
            <param name="other"> The other valuecounttuple to compare</param>
            <returns> True if the value and count are equal.</returns>
        </member>
        <member name="M:VisionNet.Core.Maths.ValueCountTuple.ToString">
            <summary> The ToString function returns a string representation of the object.</summary>
            <returns> A string that represents the current object.</returns>
        </member>
        <member name="T:VisionNet.Core.Monitoring.CallerInformation">
            <summary>
            Represents information about the caller, including method, class, file name, and other related details.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.CallerInformation.Index">
            <summary>
            Gets the index of the caller in the list.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.CallerInformation.Description">
            <summary>
            Gets the description of the caller.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.CallerInformation.ClassName">
            <summary>
            Gets the name of the class that called this function.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.CallerInformation.MethodName">
            <summary>
            Gets the name of the method that called this function.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.CallerInformation.FileName">
            <summary>
            Gets the name of the file that contains the caller.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.CallerInformation.LineNumber">
            <summary>
            Gets the line number of the caller.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.CallerInformation.Tags">
            <summary>
            Gets the tags associated with the caller, providing additional information.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.CallerInformation.#ctor(System.Object,System.String,System.String,System.String,System.String,System.Int32,VisionNet.Core.Tags.IReadonlyTaggable{VisionNet.Core.Types.NamedValue})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Monitoring.CallerInformation"/> class.
            </summary>
            <param name="index">The index of the caller in the list.</param>
            <param name="description">A description of the caller.</param>
            <param name="className">The name of the class that called this function.</param>
            <param name="methodName">The name of the method that called this function.</param>
            <param name="fileName">The name of the file that contains the caller.</param>
            <param name="lineNumber">The line number of the caller.</param>
            <param name="tags">The additional information of the caller.</param>
        </member>
        <member name="T:VisionNet.Core.Monitoring.CallerInformationFactory">
            <summary>
            A factory class for creating instances of the <see cref="T:VisionNet.Core.Monitoring.CallerInformation"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.CallerInformationFactory.Create">
            <summary>
            Creates a <see cref="T:VisionNet.Core.Monitoring.CallerInformation"/> object using a default stack frame (from the caller's immediate method).
            </summary>
            <returns>A <see cref="T:VisionNet.Core.Monitoring.CallerInformation"/> object representing the caller's information.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.CallerInformationFactory.Create(System.Diagnostics.StackFrame)">
            <summary>
            Creates a <see cref="T:VisionNet.Core.Monitoring.CallerInformation"/> object from the provided stack frame.
            </summary>
            <param name="stackFrame">The stack frame used to retrieve the caller's information.</param>
            <returns>A <see cref="T:VisionNet.Core.Monitoring.CallerInformation"/> object with details extracted from the given stack frame.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.CallerInformationFactory.Create(System.Object,System.String,VisionNet.Core.Tags.IReadonlyTaggable{VisionNet.Core.Types.NamedValue})">
            <summary>
            Creates a <see cref="T:VisionNet.Core.Monitoring.CallerInformation"/> object using the provided index, description, and an optional set of tags.
            Uses reflection to gather method and class information from the caller's stack frame.
            </summary>
            <param name="index">The index of the caller, typically used to uniquely identify the caller in a sequence.</param>
            <param name="description">A description providing additional context or information about the caller.</param>
            <param name="tags">Optional tags that can provide further metadata about the caller.</param>
            <returns>A <see cref="T:VisionNet.Core.Monitoring.CallerInformation"/> object containing the caller's information and any provided metadata.</returns>
        </member>
        <member name="T:VisionNet.Core.Monitoring.FacadeStopwatch">
            <summary>
            The FacadeStopwatch class provides a simplified interface for commonly used methods of the <see cref="T:System.Diagnostics.Stopwatch"/> class.
            It implements the <see cref="T:VisionNet.Core.Monitoring.IReadonlyStopwatch"/> and <see cref="T:VisionNet.Core.Patterns.IDecorator`1"/> interfaces and follows the Facade design pattern.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.FacadeStopwatch.Target">
            <summary>
            Gets the underlying <see cref="T:System.Diagnostics.Stopwatch"/> instance that this class is wrapping.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.FacadeStopwatch.#ctor(System.Diagnostics.Stopwatch)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Monitoring.FacadeStopwatch"/> class.
            If no target stopwatch is provided, a new <see cref="T:System.Diagnostics.Stopwatch"/> instance is created.
            </summary>
            <param name="target">The target <see cref="T:System.Diagnostics.Stopwatch"/> instance to be wrapped by this facade.</param>
            <returns>A new instance of the <see cref="T:VisionNet.Core.Monitoring.FacadeStopwatch"/> class.</returns>
        </member>
        <member name="P:VisionNet.Core.Monitoring.FacadeStopwatch.Elapsed">
            <summary>
            Gets the elapsed time of the stopwatch.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.FacadeStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed time in milliseconds.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.FacadeStopwatch.ElapsedTicks">
            <summary>
            Gets the elapsed time in ticks.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.FacadeStopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the stopwatch is currently running.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.FacadeStopwatch.Reset">
            <summary>
            Resets the stopwatch to its initial state.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.FacadeStopwatch.Restart">
            <summary>
            Restarts the stopwatch, resetting its elapsed time to zero.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.FacadeStopwatch.Start">
            <summary>
            Starts the stopwatch if it is not already running.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.FacadeStopwatch.Stop">
            <summary>
            Stops the stopwatch if it is currently running.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Monitoring.IMonitorizedValue">
            <summary>
            Represents a value that can be monitored, with extended functionalities for delayed updates, notifications, and state management.
            </summary>
            <remarks>
            This interface combines multiple aspects, including the ability to delay setting values, manage descriptive data, monitor state over time,
            handle exceptions, and observe changes. Implementations of this interface should be able to set values with a delay and update observers accordingly.
            </remarks>
        </member>
        <member name="M:VisionNet.Core.Monitoring.IMonitorizedValue.TrySetValueDelayed(System.Object,System.Int32,System.Boolean,System.Object,System.String)">
            <summary>
            Attempts to set a value with a specified delay.
            </summary>
            <param name="value">The value to set.</param>
            <param name="delayMs">The delay in milliseconds before setting the value.</param>
            <param name="forceUpdate">A boolean indicating whether the value should be updated even if it's the same as the current value.</param>
            <param name="callerIdentifier">An optional identifier for the caller initiating the update. Used to track or differentiate callers.</param>
            <param name="description">An optional description associated with the value update. Can provide context or additional information.</param>
            <returns>
            <c>true</c> if the value was successfully set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:VisionNet.Core.Monitoring.IReadonlyStopwatch">
            <summary>
            Defines a read-only stopwatch interface that provides the elapsed time measurements
            in terms of <see cref="T:System.TimeSpan"/>, milliseconds, and ticks. It also exposes whether
            the stopwatch is currently running or not. This interface is useful for scenarios 
            where you need to access timing information without being able to modify the stopwatch itself.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.IReadonlyStopwatch.Elapsed">
            <summary>
            Gets the total elapsed time measured by the stopwatch.
            </summary>
            <value>
            A <see cref="T:System.TimeSpan"/> representing the elapsed time.
            </value>
        </member>
        <member name="P:VisionNet.Core.Monitoring.IReadonlyStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time in milliseconds.
            </summary>
            <value>
            The elapsed time, in milliseconds, as a <see cref="T:System.Int64"/> value.
            </value>
        </member>
        <member name="P:VisionNet.Core.Monitoring.IReadonlyStopwatch.ElapsedTicks">
            <summary>
            Gets the total elapsed time in timer ticks.
            </summary>
            <value>
            The elapsed time in ticks, represented as a <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="P:VisionNet.Core.Monitoring.IReadonlyStopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the stopwatch is currently running.
            </summary>
            <value>
            <c>true</c> if the stopwatch is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VisionNet.Core.Monitoring.MonitorizedValue">
            <summary>
            Represents a monitorized value, which stores a value and tracks changes to it, including timing information.
            Provides mechanisms to notify observers when the value changes, as well as exception handling.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Monitoring.MonitorizedValue"/> class with default settings.
            Resets the chronometer used to track the time since the last update.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue.#ctor(System.TypeCode,System.Object,VisionNet.Core.Types.TypeConversionPreferences)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Monitoring.MonitorizedValue"/> class with the specified data type and optional default value.
            Resets the chronometer used to track the time since the last update.
            </summary>
            <param name="dataType">The type of data to be stored in the monitorized value.</param>
            <param name="defaultValue">The default value used to initialize the monitorized value. This parameter is optional and can be omitted if no default value is desired.</param>
            <param name="preferences">The conversion preferences used when initializing the value.</param>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValue.LastUpdate">
            <summary>
            Gets the date and time when the value was last updated.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValue.LastDuration">
            <summary>
            Gets the time duration since the last update.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue._resetChronometer">
            <summary>
            Resets the chronometer, clearing the time elapsed and updating the LastUpdate property.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue._startChronometer">
            <summary>
            Starts or restarts the chronometer and sets the LastUpdate property to the current time.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue._stopChronometer">
            <summary>
            Stops the chronometer.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue._restartChronometer">
            <summary>
            Stops the chronometer and immediately starts it again.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValue.CallerInformation">
            <summary>
            Gets or sets information about the caller that triggered the change.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue.TrySetValue(System.Object)">
            <summary>
            Attempts to set the value of the monitorized value.
            If the value is successfully set, returns true; otherwise, returns false.
            </summary>
            <param name="value">The value to set.</param>
            <returns>True if the value was successfully set; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue.TrySetValue(System.Object,System.Boolean,System.Object,System.String)">
            <summary>
            Attempts to set the value of the monitorized value, optionally forcing an update even if the value is the same.
            Raises a change notification event if the value is different from the previous one.
            </summary>
            <param name="value">The value to set.</param>
            <param name="forceUpdate">If true, the value will be set even if it is equal to the current value.</param>
            <param name="callerIdentifier">An optional identifier for the caller.</param>
            <param name="description">An optional description of the caller.</param>
            <returns>True if the value was successfully set; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue.TrySetValueDelayed(System.Object,System.Int32,System.Boolean,System.Object,System.String)">
            <summary>
            Sets the value of the monitorized value after a specified delay, regardless of whether the value has changed or not.
            </summary>
            <param name="value">The value to set.</param>
            <param name="delayMs">The delay, in milliseconds, before setting the value.</param>
            <param name="forceUpdate">If true, the value will be set even if it is equal to the current value.</param>
            <param name="callerIdentifier">An optional identifier for the caller.</param>
            <param name="description">An optional description of the caller.</param>
            <returns>True if the value is successfully scheduled for update; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue.IsChanged(System.Object)">
            <summary>
            Checks if the monitorized value has changed since the last query.
            If an object has not been queried before, it will always return true.
            </summary>
            <param name="queryIdentifier">A unique identifier for the query.</param>
            <returns>True if the value has changed since the last query; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue.RaiseValueChanged(System.Object,VisionNet.Core.Events.ValueChangedEventArgs{System.Object})">
            <summary>
            Raises the ValueChanged event to notify subscribers that the value has changed.
            Catches any exceptions thrown by event handlers and notifies via the exception handler.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="eventArgs">The event arguments containing the old and new values.</param>
        </member>
        <member name="E:VisionNet.Core.Monitoring.MonitorizedValue.ValueChanged">
            <summary>
            Occurs when the value of the monitorized value changes.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValue.RaiseExceptionNotification(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Raises the ExceptionRaised event to notify subscribers of an exception that occurred.
            Catches any exceptions thrown by event handlers and logs them to the console.
            </summary>
            <param name="sender">The source of the exception.</param>
            <param name="eventArgs">The event arguments containing the exception details.</param>
        </member>
        <member name="E:VisionNet.Core.Monitoring.MonitorizedValue.ExceptionRaised">
            <summary>
            Occurs when an exception is raised by the monitorized value.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValue.Index">
            <summary>
            Gets or sets the index of the monitorized value.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValue.Name">
            <summary>
            Gets or sets the name of the monitorized value.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValue.Description">
            <summary>
            Gets or sets the description of the monitorized value.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValue.Enabled">
            <summary>
            Gets or sets a value indicating whether the monitorized value is enabled.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Monitoring.MonitorizedValuesRepository">
            <summary>
            Represents a repository for storing and managing monitorized values.
            Provides methods to add, retrieve, and manage monitorized values by index.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValuesRepository.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:VisionNet.Core.Monitoring.MonitorizedValuesRepository"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValuesRepository.Add(System.TypeCode,System.Object,System.String,System.String,System.String)">
            <summary>
            Adds a new monitorized value to the repository.
            If a monitorized value with the same index already exists, it will be replaced.
            </summary>
            <param name="dataType">The type of the data to be stored in the monitorized value.</param>
            <param name="defaultValue">The default value to initialize the monitorized value with.</param>
            <param name="index">The index under which the monitorized value will be stored.</param>
            <param name="name">The name of the monitorized value.</param>
            <param name="description">The description of the monitorized value.</param>
            <returns>A reference to the monitorized value that was added.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValuesRepository.Add(VisionNet.Core.Monitoring.MonitorizedValue)">
            <summary>
            Adds an existing monitorized value to the repository.
            If a monitorized value with the same index already exists, it will be replaced.
            </summary>
            <param name="monitorizedValue">The monitorized value to add to the repository.</param>
            <returns>A reference to the monitorized value that was added.</returns>
        </member>
        <member name="P:VisionNet.Core.Monitoring.MonitorizedValuesRepository.Item(System.String)">
            <summary>
            Gets the monitorized value associated with the specified index.
            If the index does not exist, it returns null.
            </summary>
            <param name="index">The index of the monitorized value to retrieve.</param>
            <returns>The monitorized value associated with the given index, or null if not found.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValuesRepository.TryGet(System.String,VisionNet.Core.Monitoring.IMonitorizedValue@)">
            <summary>
            Attempts to get the monitorized value associated with the specified index.
            Returns true if the value exists, and sets the output parameter to the value; otherwise, returns false.
            </summary>
            <param name="index">The index of the monitorized value to retrieve.</param>
            <param name="monitorizedValue">The monitorized value associated with the given index, if found.</param>
            <returns>True if the monitorized value was found; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.Monitoring.MonitorizedValuesRepository.Get(System.String)">
            <summary>
            Gets the monitorized value associated with the specified index.
            Throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/> if the index does not exist.
            </summary>
            <param name="index">The index of the monitorized value to retrieve.</param>
            <returns>The monitorized value associated with the given index.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the specified index is not found in the repository.</exception>
        </member>
        <member name="T:VisionNet.Core.Monitoring.StopwatchExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Diagnostics.Stopwatch"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Monitoring.StopwatchExtensions.ToReadOnly(System.Diagnostics.Stopwatch)">
            <summary>
            Converts a <see cref="T:System.Diagnostics.Stopwatch"/> instance to a <see cref="T:VisionNet.Core.Monitoring.IReadonlyStopwatch"/> instance.
            This is useful when you want to pass a stopwatch around but prevent the recipient from modifying it.
            </summary>
            <param name="sw">The <see cref="T:System.Diagnostics.Stopwatch"/> instance to be converted.</param>
            <returns>A new <see cref="T:VisionNet.Core.Monitoring.IReadonlyStopwatch"/> instance wrapping the provided <see cref="T:System.Diagnostics.Stopwatch"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.IRuntimeConfigurableService.RefreshAllRuntimeParameters(System.Collections.Generic.Dictionary{System.String,VisionNet.Core.IRuntimeOptions})">
            <summary>
            Refresca los parámetros de runtime de los objetos gestionados en masa.
            Para cada entrada en el diccionario, se usa la key para obtener el objeto mediante Get 
            y se invoca RefreshRuntimeParameters con el options correspondiente.
            </summary>
            <param name="updatedOptionsDictionary">
            Diccionario que asocia un identificador (por ejemplo, Index o Name) con su instancia de IRuntimeOptions personalizada.
            </param>
        </member>
        <member name="P:VisionNet.Core.IRuntimeOptions.Enabled">
            <summary>
            Obtiene o establece si la instancia está habilitada.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.Adapter`2">
            <summary>
            Provides an adapter pattern for converting objects of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/>.
            Implements the IAdapter interface to define the conversion behavior.
            </summary>
            <typeparam name="TSource">The source type to be converted.</typeparam>
            <typeparam name="TDestiny">The target type after conversion.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.Adapter`2.ConvertFrom(`0)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/> using the static map.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.Adapter`2.Convert(`0)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/> using the instance map.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.BidirectionalAdapter`2">
            <summary>
            Provides an adapter pattern for converting objects of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/>.
            Implements the IAdapter interface to define the conversion behavior.
            </summary>
            <typeparam name="TSource">The source type to be converted.</typeparam>
            <typeparam name="TDestiny">The target type after conversion.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.BidirectionalAdapter`2.ConvertFrom(`0)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/> using the static map.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.BidirectionalAdapter`2.Convert(`0)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/> using the instance map.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.BidirectionalAdapter`2.ConvertFrom(`1)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/> using the static map.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.BidirectionalAdapter`2.Convert(`1)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/> using the instance map.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IAdapter`2">
            <summary>
            Defines an adapter interface for converting objects from one type to another.
            </summary>
            <typeparam name="TSource">The source type to be converted.</typeparam>
            <typeparam name="TDestiny">The target type after conversion.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IAdapter`2.Convert(`0)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/>.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IBidirectionalAdapter`2">
            <summary>
            Defines an interface for bidirectional adapters, enabling conversion between two types in both directions.
            Inherits from both <see cref="T:VisionNet.Core.Patterns.IAdapter`2"/> and <see cref="T:VisionNet.Core.Patterns.IReverseAdapter`2"/>.
            </summary>
            <typeparam name="T1">The first type to be converted.</typeparam>
            <typeparam name="T2">The second type to be converted.</typeparam>
        </member>
        <member name="T:VisionNet.Core.Patterns.IGenericAdapter">
            <summary>
            Defines a generic adapter interface for converting objects of any type to another object of any type.
            Inherits from <see cref="T:VisionNet.Core.Patterns.IAdapter`2"/> with <typeparamref name="TSource"/> and <typeparamref name="TDestiny"/> as <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IReverseAdapter`2">
            <summary>
            Defines an interface for reverse conversion, allowing conversion from <typeparamref name="TDestiny"/> to <typeparamref name="TSource"/>.
            </summary>
            <typeparam name="TSource">The source type to be converted.</typeparam>
            <typeparam name="TDestiny">The target type to be converted from.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IReverseAdapter`2.Convert(`1)">
            <summary>
            Converts a value of type <typeparamref name="TDestiny"/> to <typeparamref name="TSource"/>.
            </summary>
            <param name="value">The value of type <typeparamref name="TDestiny"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TSource"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IReverseUpdatingAdapter`2">
            <summary>
            Defines an interface for reverse conversion, allowing conversion from <typeparamref name="TDestiny"/> to <typeparamref name="TSource"/>.
            </summary>
            <typeparam name="TSource">The source type to be converted.</typeparam>
            <typeparam name="TDestiny">The target type to be converted from.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IReverseUpdatingAdapter`2.Convert(`1,`0)">
            <summary>
            Converts a value of type <typeparamref name="TDestiny"/> to <typeparamref name="TSource"/>.
            </summary>
            <param name="value">The value of type <typeparamref name="TDestiny"/> to convert.</param>
            <param name="source">The object of type <typeparamref name="TSource"/> to update.</param>
            <returns>A converted value of type <typeparamref name="TSource"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IUpdatingAdapter`2">
            <summary>
            Defines an adapter interface for converting objects from one type to another.
            </summary>
            <typeparam name="TSource">The source type to be converted.</typeparam>
            <typeparam name="TDestiny">The target type after conversion.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IUpdatingAdapter`2.Convert(`0,`1)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/>.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <param name="destiny">The object of type <typeparamref name="TSource"/> to update.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IUpdatingBidirectionalAdapter`2">
            <summary>
            Defines an interface for bidirectional adapters, enabling conversion between two types in both directions.
            Inherits from both <see cref="T:VisionNet.Core.Patterns.IUpdatingAdapter`2"/> and <see cref="T:VisionNet.Core.Patterns.IReverseUpdatingAdapter`2"/>.
            </summary>
            <typeparam name="T1">The first type to be converted.</typeparam>
            <typeparam name="T2">The second type to be converted.</typeparam>
        </member>
        <member name="T:VisionNet.Core.Patterns.ReverseAdapter`2">
            <summary>
            Provides an adapter pattern for converting objects of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/>.
            Implements the IAdapter interface to define the conversion behavior.
            </summary>
            <typeparam name="TSource">The source type to be converted.</typeparam>
            <typeparam name="TDestiny">The target type after conversion.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.ReverseAdapter`2.ConvertFrom(`1)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/> using the static map.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ReverseAdapter`2.Convert(`1)">
            <summary>
            Converts a value of type <typeparamref name="TSource"/> to <typeparamref name="TDestiny"/> using the instance map.
            </summary>
            <param name="value">The value of type <typeparamref name="TSource"/> to convert.</param>
            <returns>A converted value of type <typeparamref name="TDestiny"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IDecorator`1">
            <summary>
            Defines the contract for the decorator pattern, allowing a target object to be decorated with additional functionality.
            </summary>
            <typeparam name="T">The type of the target object that is being decorated.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Patterns.IDecorator`1.Target">
            <summary>
            Gets the target object that is being decorated.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IDecorator">
            <summary>
            Adapter pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IEntity`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="T:VisionNet.Core.Patterns.IEntity">
            <summary>
            A shortcut of <see cref="T:VisionNet.Core.Patterns.IEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IIndexable">
            <summary>
            Defines an indexable interface that allows access to elements by index.
            This interface inherits from a generic version of <see cref="T:VisionNet.Core.Patterns.IIndexable`1"/> with a specific type of <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IIndexable`1">
            <summary>
            Defines an interface for objects that can be indexed by a unique identifier.
            </summary>
            <typeparam name="TPrimaryKey">The type of the unique identifier used to index the object.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Patterns.IIndexable`1.Index">
            <summary>
            Gets the unique identifier for this instance.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IOrdered">
            <summary>
            Inferface for ordered instances
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.IOrdered.Order">
            <summary>
            Order of the instance.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IChronological">
            <summary>
            Interface of chronological objects
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.IChronological.Time">
            <summary>
            Chronological instant of the instance.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.Factory`1">
            <summary>
            A generic factory class that creates instances of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of object that the factory creates.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.Factory`1.Create">
            <summary>
            Creates a new instance of the type <typeparamref name="T"/>.
            </summary>
            <returns>An instance of the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.Factory`1.NewInstance">
            <summary>
            Creates a new instance of the generic type <typeparamref name="T"/> using reflection.
            </summary>
            <returns>An instance of the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.Factory`1.CreateNew">
            <summary>
            Creates a new instance of the type <typeparamref name="T"/> through the factory.
            </summary>
            <returns>An instance of the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.FactoryAppender`1">
            <summary>
            A specialized factory class that extends <see cref="T:VisionNet.Core.Patterns.Factory`1"/> and adds the ability to link to another factory.
            </summary>
            <typeparam name="T">The type of object that the factory creates.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Patterns.FactoryAppender`1.Factory">
            <summary>
            Gets or sets the linked factory that can be used to create instances of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.FactoryAppender`1.LinkTo(VisionNet.Core.Patterns.IFactory{`0})">
            <summary>
            Links the current factory to another factory, allowing for a chain of factories.
            This enables the creation of objects in sequence, passing objects between factories.
            </summary>
            <param name="factory">The factory to link to.</param>
            <returns>The factory that was passed in.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.FactoryAppender`1.NewInstance">
            <summary>
            Creates a new instance of <typeparamref name="T"/> by delegating the creation process to the linked factory.
            </summary>
            <returns>A new instance of the type <typeparamref name="T"/> created by the linked factory.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.FactoryAppender`1.CreateNew(VisionNet.Core.Patterns.IFactory{`0})">
            <summary>
            Creates a new instance of <typeparamref name="T"/> using the provided factory and appends it to the factory chain.
            This allows subsequent calls to create new instances as needed.
            </summary>
            <param name="factory">The factory to use for creating the object.</param>
            <returns>The object created by the factory.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IFactory`1">
            <summary>
            Defines the contract for a factory that creates instances of a specified type.
            </summary>
            <typeparam name="T">The type of object that the factory creates.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IFactory`1.Create">
            <summary>
            Creates and returns a new instance of the specified type <typeparamref name="T"/>.
            </summary>
            <returns>A new instance of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IFactoryAppender`1">
            <summary>
            Defines the contract for a factory that can create instances of a specified type and link to another factory.
            </summary>
            <typeparam name="T">The type of object that the factory creates.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IFactoryAppender`1.LinkTo(VisionNet.Core.Patterns.IFactory{`0})">
            <summary>
            Links the current factory to another factory, enabling a chain of factories to create objects.
            </summary>
            <param name="factory">The factory to link to.</param>
        </member>
        <member name="T:VisionNet.Core.Patterns.IPooledFactory`2">
            <summary>
            Defines the contract for a factory that creates instances of a specified type, can link to another factory, 
            and supports creating objects based on an index.
            </summary>
            <typeparam name="T">The type of object that the factory creates.</typeparam>
            <typeparam name="TIndex">The type of the index used to create the object.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IPooledFactory`2.Create(`1)">
            <summary>
            Creates and returns an instance of the specified type <typeparamref name="T"/> based on the provided index.
            </summary>
            <param name="index">The index used to create the object.</param>
            <returns>A new instance of type <typeparamref name="T"/> created using the specified index.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.PooledFactory`2">
            <summary>
            A factory that creates and manages instances of a specified type <typeparamref name="T"/> based on an index, 
            supporting object pooling and reusing existing instances when available.
            </summary>
            <typeparam name="T">The type of object that the factory creates.</typeparam>
            <typeparam name="TIndex">The type of the index used to manage the pooled instances.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.PooledFactory`2.Create">
            <summary>
            Creates a new instance of type <typeparamref name="T"/> and adds it to the internal dictionary.
            If an instance with the specified index already exists, it is returned.
            </summary>
            <returns>A new instance of the type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.PooledFactory`2.Create(`1)">
            <summary>
            Creates a new instance of type <typeparamref name="T"/> based on the specified index.
            If an instance with the same index already exists, the existing instance is returned.
            Otherwise, a new instance is created and added to the internal dictionary.
            </summary>
            <param name="index">The index of the instance to retrieve or create.</param>
            <returns>The instance of type <typeparamref name="T"/> associated with the specified index.</returns>
        </member>
        <member name="P:VisionNet.Core.Patterns.PooledFactory`2.Instances">
            <summary>
            A dictionary that holds pooled instances of type <typeparamref name="T"/> indexed by <typeparamref name="TIndex"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.PooledFactory`2.CreateNew(VisionNet.Core.Patterns.IFactory{`0})">
            <summary>
            Creates a new instance of the type <typeparamref name="T"/> using the provided factory and adds it to the internal pool.
            The instance is stored in a <see cref="!:ConcurrentDictionary"/> using an index of type <typeparamref name="TIndex"/>.
            </summary>
            <param name="factory">The factory to use for creating the object.</param>
            <returns>A new instance of the type <typeparamref name="T"/> created by the factory.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.PooledFactory`2.CreateNew(VisionNet.Core.Patterns.IFactory{`0},`1)">
            <summary>
            Creates a new instance of the <see cref="T:VisionNet.Core.Patterns.PooledFactory`2"/> and links it to the provided factory.
            Then, it calls the <see cref="M:VisionNet.Core.Patterns.PooledFactory`2.Create"/> method on the new instance, passing in the specified index.
            </summary>
            <param name="factory">The factory to use for creating the object.</param>
            <param name="index">The index used to identify the specific object to create.</param>
            <returns>The object created by the factory.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.SingletonFactory`1">
            <summary>
            A factory that creates and manages a single instance of a specified type <typeparamref name="T"/>.
            If the instance already exists, the existing instance is returned.
            </summary>
            <typeparam name="T">The type of object that the factory creates and manages as a singleton.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.SingletonFactory`1.Create">
            <summary>
            Creates a new instance of type <typeparamref name="T"/> if it does not already exist.
            If an instance of <typeparamref name="T"/> already exists, that instance is returned.
            </summary>
            <returns>The instance of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="P:VisionNet.Core.Patterns.SingletonFactory`1.Instance">
            <summary>
            The singleton instance of type <typeparamref name="T"/>. This is a shared instance used across calls.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.SingletonFactory`1.CreateNew(VisionNet.Core.Patterns.IFactory{`0})">
            <summary>
            A static method that creates an instance of the <see cref="T:VisionNet.Core.Patterns.SingletonFactory`1"/> class,
            links it to the provided factory, and returns the singleton instance of type <typeparamref name="T"/>.
            </summary>
            <param name="factory">The factory that will be used to create the object.</param>
            <returns>The object created by the factory, which is managed as a singleton.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.ThreadedFactory`1">
            <summary>
            A factory that creates and manages instances of a specified type <typeparamref name="T"/> 
            specific to each thread. If an instance already exists for the current thread, the existing instance is returned.
            </summary>
            <typeparam name="T">The type of object that the factory creates and manages for each thread.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.ThreadedFactory`1.Create">
            <summary>
            Creates a new instance of type <typeparamref name="T"/> if it does not already exist for the current thread.
            If an instance of <typeparamref name="T"/> already exists for the current thread, that instance is returned.
            </summary>
            <returns>The instance of type <typeparamref name="T"/> associated with the current thread.</returns>
        </member>
        <member name="P:VisionNet.Core.Patterns.ThreadedFactory`1.Instances">
            <summary>
            A dictionary that holds instances of type <typeparamref name="T"/> indexed by the thread ID.
            Each thread has its own unique instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ThreadedFactory`1.CreateNew(VisionNet.Core.Patterns.IFactory{`0})">
            <summary>
            A wrapper around the <see cref="M:VisionNet.Core.Patterns.ThreadedFactory`1.Create"/> method that allows the creation of an object of type <typeparamref name="T"/>
            and links it to another factory. This is useful for creating new objects with default values while also allowing
            for custom values from the provided factory.
            </summary>
            <param name="factory">The factory to use for creating the object.</param>
            <returns>A new instance of type <typeparamref name="T"/> specific to the current thread.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IIndexableNested`1">
            <summary>
            Interface for nested instances with index reference of the primeval instance
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.IIndexableNested`1.PrimevalIndex">
            <summary>
            Unique identifier for the primeval instance.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.INested">
            <summary>
            Represents a simple nested pattern, where an object can contain an inner instance of the same type.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.INested.Inner">
            <summary>
            Gets the inner nested instance of the same type.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.CollectionItemsChangedEventArgs">
            <summary>
            Arguments to the ItemsAdded and ItemsRemoved events.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Patterns.CollectionItemsChangedEventArgs._items">
            <summary>
            The collection of items that changed.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.CollectionItemsChangedEventArgs.#ctor(System.Collections.ICollection)">
            <summary> The CollectionItemsChangedEventArgs function is a constructor that takes an ICollection as its only parameter. It then sets the _items variable to the value of items.</summary>
            <param name="items"> The collection of items that were added or removed.</param>
            <returns> The items.</returns>
        </member>
        <member name="P:VisionNet.Core.Patterns.CollectionItemsChangedEventArgs.Items">
            <summary>
            The collection of items that changed.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IConectableObservable">
            <summary>
            Specifies a Connectable observable instance
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IConectableObservable.ConnectionChanged">
            <summary>
            This event is raised when connection status is changed
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IConectableObservable.ConnectionError">
            <summary>
            This event is raised when connection is missed
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IConfigureOptionsObservable`1">
            <summary>
            Specifies a ConfigureOptions observable instance
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IConfigureOptionsObservable`1.Configured">
            <summary>
            Event callback for the successful end of the configuration
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IConfigureOptionsObservable`1.ConfiguredError">
            <summary>
            Event callback for the error in configuration
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IExceptionObservable">
            <summary>
            Specifies a exception raiser observable instance
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IExceptionObservable.ExceptionRaised">
            <summary>
            This event is raised when an exception is raised
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IExecutionObservable`1">
            <summary>
            Specifies a execution observable instance
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IExecutionObservable`1.ExecutionCompleted">
            <summary>
            Event callback for the successful end of the execution
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IExecutionObservable`1.ExecutionError">
            <summary>
            Event callback for the error
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IExecutionObservable">
            <summary>
            Specifies a execution observable instance
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IExecutionObservable.ExecutionCompleted">
            <summary>
            Event callback for the successful end of the execution
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IExecutionObservable.ExecutionError">
            <summary>
            Event callback for the error
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IObservableState`1">
            <summary>
            Defines an interface for observing state changes.
            </summary>
            <typeparam name="TState">The type representing the states.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Patterns.IObservableState`1.State">
            <summary>
            Gets the current state of the observable object.
            </summary>
            <value>
            The current value of the state of type <typeparamref name="TState"/>.
            </value>
        </member>
        <member name="E:VisionNet.Core.Patterns.IObservableState`1.StateChanged">
            <summary>
            Occurs when the state of the object changes.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IObservableValue">
            <summary>
            Defines an interface for observing changes to a value.
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IObservableValue.ValueChanged">
            <summary>
            Occurs when the value of the observable object changes.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IObservableValueExtended">
            <summary>
            Defines an extended interface for observing and managing changes to a value, with additional functionality 
            for safe operations and tracking changes from different callers.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.IObservableValueExtended.TrySetValue(System.Object,System.Boolean,System.Object,System.String)">
            <summary>
            Attempts to set a new value for the observable object.
            Optionally forces the update and allows tracking changes with a caller identifier.
            </summary>
            <param name="value">The new value to set.</param>
            <param name="forceUpdate">Indicates whether to force the update even if the value has not changed. Default is false.</param>
            <param name="callerIdentifier">An optional identifier for the caller initiating the change. Default is null.</param>
            <param name="description">An optional description of the change. Default is an empty string.</param>
            <returns>True if the value was successfully set, otherwise false.</returns>
        </member>
        <member name="P:VisionNet.Core.Patterns.IObservableValueExtended.CallerInformation">
            <summary>
            Gets the information about the caller that last changed the value.
            </summary>
            <value>
            A <see cref="P:VisionNet.Core.Patterns.IObservableValueExtended.CallerInformation"/> object containing details about the caller.
            </value>
        </member>
        <member name="M:VisionNet.Core.Patterns.IObservableValueExtended.IsChanged(System.Object)">
            <summary>
            Determines whether the value has been changed by a specific caller.
            </summary>
            <param name="callerIdentifier">The identifier of the caller to check.</param>
            <returns>True if the value has been changed by the specified caller, otherwise false.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IProgressStateObservable`1">
            <summary>
            Defines an interface for observing progress changes of a specific state.
            </summary>
            <typeparam name="TState">The type representing the state of the progress.</typeparam>
        </member>
        <member name="E:VisionNet.Core.Patterns.IProgressStateObservable`1.ProgressChanged">
            <summary>
            Occurs when the progress of the observable object changes.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ISecuenceObservable`1">
            <summary>
            Specifies a secuence observable instance
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.ISecuenceObservable`1.ExecutionNext">
            <summary>
            Event callback for the next step
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IStartableObservable">
            <summary>
            Specifies a Connectable observable instance
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IStartableObservable.StatusChanged">
            <summary>
            This event is raised when connection status is changed
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IExecutionObservable`2">
            <summary>
            Specifies a execution observable instance
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IExecutionObservable`2.ExecutionCompleted">
            <summary>
            Event callback for the successful end of the execution
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.IExecutionObservable`2.ExecutionError">
            <summary>
            Event callback for the error
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ObservableCollectionEx`1">
            <summary>
            An implementation of an observable collection that contains a duplicate internal
            list retained momentarily after the list is cleared. This allows observers to undo events
            on the list after it has been cleared and raises a <see cref="!:CollectionChanged"/> event with a Reset action.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="F:VisionNet.Core.Patterns.ObservableCollectionEx`1._inner">
            <summary>
            The inner list that retains items temporarily after a reset action.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Patterns.ObservableCollectionEx`1._inCollectionChangedEvent">
            <summary>
            Set to 'true' when processing a collection changed event.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ObservableCollectionEx`1"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ObservableCollectionEx`1"/> class using the specified range of items.
            </summary>
            <param name="range">The range of items to initialize the collection with.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ObservableCollectionEx`1"/> class using the specified list.
            </summary>
            <param name="list">The list of items to initialize the collection with.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.AddRange(`0[])">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <param name="range">The range of items to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <param name="range">The range of items to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.AddRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <param name="range">The collection of items to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.RemoveRange(`0[])">
            <summary>
            Removes a range of items from the collection.
            </summary>
            <param name="range">The range of items to remove.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.RemoveRange(System.Collections.IEnumerable)">
            <summary>
            Removes a range of items from the collection.
            </summary>
            <param name="range">The range of items to remove.</param>
            <returns>The number of items removed.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.RemoveRange(VisionNet.Core.Patterns.ObservableCollectionEx{`0})">
            <summary>
            Removes a range of items from another collection.
            </summary>
            <param name="range">The range of items to remove from the collection.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.RemoveRangeAt(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the collection starting from a specific index.
            </summary>
            <param name="index">The index of the first item to be removed.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.RemoveRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Removes a range of items from the collection.
            </summary>
            <param name="range">The collection of items to remove.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes a range of items from the collection.
            </summary>
            <param name="range">The range of items to remove from the collection.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection changes, updates the inner list, and raises appropriate events for added or removed items.
            </summary>
            <param name="e">The event arguments containing information about the change.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.OnItemsAdded(System.Collections.ICollection)">
            <summary>
            Invoked when items are added to the collection.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.OnItemsRemoved(System.Collections.ICollection)">
            <summary>
            Invoked when items are removed from the collection.
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.ObservableCollectionEx`1.ItemsAdded">
            <summary>
            Event raised when items have been added to the collection.
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.ObservableCollectionEx`1.ItemsRemoved">
            <summary>
            Event raised when items have been removed from the collection.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.ToArray">
            <summary>
            Converts the collection to an array.
            </summary>
            <returns>An array containing all the elements in the collection.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.ToArray``1">
            <summary>
            Converts the collection to an array of a specified type.
            </summary>
            <typeparam name="T2">The type of the elements in the array.</typeparam>
            <returns>An array containing all the elements in the collection, cast to the specified type.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.Clone">
            <summary>
            Creates a clone of the collection, copying all elements from this collection.
            </summary>
            <returns>A new <see cref="T:VisionNet.Core.Patterns.ObservableCollectionEx`1"/> with the same elements as the current collection.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionEx`1.Refresh">
            <summary>
            Refreshes the collection by raising a reset collection change event for each item.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1">
            <summary>
            An implementation of an observable collection that contains a duplicate internal
            list retained momentarily after the list is cleared. This allows observers to undo events
            on the list after it has been cleared and raises a <see cref="!:CollectionChanged"/> event with a Reset action.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
        </member>
        <member name="F:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1._inner">
            <summary>
            The inner list that retains items temporarily after a reset action.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1._inCollectionChangedEvent">
            <summary>
            Set to 'true' when processing a collection changed event.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1"/> class using the specified range of items.
            </summary>
            <param name="range">The range of items to initialize the collection with.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1"/> class using the specified list.
            </summary>
            <param name="list">The list of items to initialize the collection with.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.AddRange(`0[])">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <param name="range">The range of items to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <param name="range">The range of items to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.AddRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <param name="range">The collection of items to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.RemoveRange(`0[])">
            <summary>
            Removes a range of items from the collection.
            </summary>
            <param name="range">The range of items to remove.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.RemoveRange(System.Collections.IEnumerable)">
            <summary>
            Removes a range of items from the collection.
            </summary>
            <param name="range">The range of items to remove.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.RemoveRange(VisionNet.Core.Patterns.ObservableCollectionWithItemChanges{`0})">
            <summary>
            Removes a range of items from another collection.
            </summary>
            <param name="range">The range of items to remove from the collection.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.RemoveRangeAt(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the collection starting from a specific index.
            </summary>
            <param name="index">The index of the first item to be removed.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.RemoveRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Removes a range of items from the collection.
            </summary>
            <param name="range">The collection of items to remove.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes a range of items from the collection.
            </summary>
            <param name="range">The range of items to remove from the collection.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection changes, updates the inner list, and raises appropriate events for added or removed items.
            </summary>
            <param name="e">The event arguments containing information about the change.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.OnItemsAdded(System.Collections.ICollection)">
            <summary>
            Invoked when items are added to the collection.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.OnItemsRemoved(System.Collections.ICollection)">
            <summary>
            Invoked when items are removed from the collection.
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.ItemsAdded">
            <summary>
            Event raised when items have been added to the collection.
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.ItemsRemoved">
            <summary>
            Event raised when items have been removed from the collection.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.ToArray">
            <summary>
            Converts the collection to an array.
            </summary>
            <returns>An array containing all the elements in the collection.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.ToArray``1">
            <summary>
            Converts the collection to an array of a specified type.
            </summary>
            <typeparam name="T2">The type of the elements in the array.</typeparam>
            <returns>An array containing all the elements in the collection, cast to the specified type.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.Clone">
            <summary>
            Creates a clone of the collection, copying all elements from this collection.
            </summary>
            <returns>A new <see cref="T:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1"/> with the same elements as the current collection.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableCollectionWithItemChanges`1.Refresh">
            <summary>
            Refreshes the collection by raising a reset collection change event for each item.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ObservableDictionary`2">
            <summary>
            Provides a dictionary for use with data binding that raises collection and property change notifications.
            </summary>
            <typeparam name="TKey">The type of the keys in this collection.</typeparam>
            <typeparam name="TValue">The type of the values in this collection.</typeparam>
        </member>
        <member name="E:VisionNet.Core.Patterns.ObservableDictionary`2.CollectionChanged">
            <summary>
            Event raised when the collection changes.
            </summary>
        </member>
        <member name="E:VisionNet.Core.Patterns.ObservableDictionary`2.PropertyChanged">
            <summary>
            Event raised when a property on the collection changes.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:VisionNet.Core.Patterns.ObservableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes an instance of the <see cref="T:VisionNet.Core.Patterns.ObservableDictionary`2"/> class using another dictionary as 
            the key/value store.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.AddWithNotification(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key-value pair to the dictionary, and raises a collection changed event with an Add action.
            Also raises PropertyChanged events for Count, Keys, and Values.
            </summary>
            <param name="item">The key-value pair to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.AddWithNotification(`0,`1)">
            <summary>
            Adds a key-value pair to the dictionary, then raises the CollectionChanged event with an Add action.
            Also raises PropertyChanged events for Count, Keys, and Values.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.RemoveWithNotification(`0)">
            <summary>
            Removes a key-value pair from the dictionary and raises the appropriate events.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>A boolean indicating whether the item was successfully removed.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.UpdateWithNotification(`0,`1)">
            <summary>
            Updates the dictionary with a new value for an existing key.
            If the key does not exist, a new entry is added to the dictionary.
            </summary>
            <param name="key">The key of the element to update.</param>
            <param name="value">The new value for the element.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Allows derived classes to raise custom property changed events.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="P:VisionNet.Core.Patterns.ObservableDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">The value associated with the specified key, if found.</param>
            <returns>true if the key was found; otherwise, false.</returns>
        </member>
        <member name="P:VisionNet.Core.Patterns.ObservableDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a new item to the dictionary.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.Clear">
            <summary>
            Clears the dictionary of all key-value pairs.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Checks whether the dictionary contains a specific key-value pair.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular index.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.ObservableDictionary`2.Count">
            <summary>
            Gets the number of key-value pairs in the collection.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.ObservableDictionary`2.IsReadOnly">
            <summary>
            Indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item from the dictionary.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ObservablePropertiesObject">
            <summary>
            Abstract base class for view-model classes that need to implement INotifyPropertyChanged.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.ObservablePropertiesObject.ObjectDebugId">
            <summary>
            Gets a unique identifier for the object, used for debugging purposes.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservablePropertiesObject.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:VisionNet.Core.Patterns.ObservablePropertiesObject.PropertyChanged"/> event, notifying subscribers of a change in the specified property.
            </summary>
            <param name="propertyName">The name of the property that has changed. Automatically inferred if not specified.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ObservablePropertiesObject.RaiseExplicitPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:VisionNet.Core.Patterns.ObservablePropertiesObject.PropertyChanged"/> event for a specific property name.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="E:VisionNet.Core.Patterns.ObservablePropertiesObject.PropertyChanged">
            <summary>
            Event that is raised when a property value changes.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IPool`1">
            <summary>
            Represents a simple pool pattern for managing a collection of reusable objects of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.IPool`1.MaxSize">
            <summary>
            Gets the maximum number of objects the pool can hold.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.IPool`1.Count">
            <summary>
            Gets the current number of objects in the pool.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.IPool`1.Get">
            <summary>
            Retrieves an object from the pool. If the pool is empty, it may create a new object.
            </summary>
            <returns>An object of type <typeparamref name="T"/> from the pool.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IPool`1.Release(`0)">
            <summary>
            Puts an object back into the pool for reuse.
            </summary>
            <param name="obj">The object to be returned to the pool.</param>
        </member>
        <member name="T:VisionNet.Core.Patterns.IPoolable">
            <summary>
            Simple poolable pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ISimpleRepository`1">
            <summary>
            Simple repository pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IRepository`1">
            <summary>
            A simple repository pattern interface for basic data operations.
            </summary>
            <typeparam name="T">The type of entity this repository manages</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`1.Insert(`0)">
            <summary>
            Inserts a new entity into the repository.
            </summary>
            <param name="entity">The entity to be inserted</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`1.Delete(`0)">
            <summary>
            Deletes an existing entity from the repository.
            </summary>
            <param name="entity">The entity to be deleted</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`1.SearchFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Searches for entities that match the given predicate.
            </summary>
            <param name="predicate">A condition used to filter entities</param>
            <returns>An IQueryable of entities that match the predicate</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`1.GetAll">
            <summary>
            Retrieves all entities from the repository.
            </summary>
            <returns>An IQueryable of all entities</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`1.GetById(System.Int32)">
            <summary>
            Retrieves an entity by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the entity</param>
            <returns>The entity with the specified identifier</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IReadOnlyRepository`2">
            <summary>
            Simple repository pattern
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.IReadOnlyRepository`2.Get(`1)">
            <summary>
            Gets an entity with given primary key.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IReadOnlyRepository`2.GetAll">
            <summary>
            Used to get a IList that is used to retrieve entities from entire table.
            </summary>
            <returns>Ilist to be used to select entities</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IReadOnlyRepository`2.Exists(`1)">
            <summary>
            Query if primary key exists.
            </summary>
            <param name="id">Primary key of the entity</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.IReadOnlyRepository`2.Count">
            <summary>
            Gets count of all entities in this repository.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.IRepository`2">
            <summary>
            This interface is implemented by all repositories to ensure implementation of fixed methods.
            </summary>
            <typeparam name="TEntity">The entity type that the repository works with</typeparam>
            <typeparam name="TPrimaryKey">The primary key type of the entity</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.GetAllIncluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Retrieves an IQueryable to access the entire set of entities, including specified related entities.
            </summary>
            <param name="propertySelectors">A list of expressions that specify related entities to include</param>
            <returns>An IQueryable to be used to select entities from the database</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.GetAllList">
            <summary>
            Retrieves a list of all entities.
            </summary>
            <returns>A list containing all entities</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.GetAllList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves a list of all entities that match a given predicate.
            </summary>
            <param name="predicate">A condition used to filter entities</param>
            <returns>A list of entities that match the condition</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.GetAllListAsync">
            <summary>
            Asynchronously retrieves a list of all entities.
            </summary>
            <returns>A task that represents the asynchronous operation. The result is a list of all entities</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.GetAllListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asynchronously retrieves a list of all entities that match a given predicate.
            </summary>
            <param name="predicate">A condition used to filter entities</param>
            <returns>A task that represents the asynchronous operation. The result is a list of entities that match the condition</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.Query``1(System.Func{System.Linq.IQueryable{`0},``0})">
            <summary>
            Executes a query on the entities using a specified query method.
            </summary>
            <typeparam name="T">The return type of the query method</typeparam>
            <param name="queryMethod">A function to query the entities</param>
            <returns>The result of the query</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.Query">
            <summary>
            Retrieves an IQueryable to access the entire set of entities.
            </summary>
            <returns>An IQueryable to be used to select entities from the database</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.GetAsync(`1)">
            <summary>
            Asynchronously retrieves an entity by its primary key.
            </summary>
            <param name="id">The primary key of the entity</param>
            <returns>A task that represents the asynchronous operation. The result is the entity with the specified primary key</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves exactly one entity that matches a given predicate. 
            Throws an exception if no entities or more than one entity is found.
            </summary>
            <param name="predicate">A condition used to filter entities</param>
            <returns>The entity that matches the predicate</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asynchronously retrieves exactly one entity that matches a given predicate. 
            Throws an exception if no entities or more than one entity is found.
            </summary>
            <param name="predicate">A condition used to filter entities</param>
            <returns>A task that represents the asynchronous operation. The result is the entity that matches the predicate</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.FirstOrDefault(`1)">
            <summary>
            Retrieves an entity by its primary key or returns null if no entity is found.
            </summary>
            <param name="id">The primary key of the entity</param>
            <returns>The entity with the specified primary key, or null if no entity is found</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.FirstOrDefaultAsync(`1)">
            <summary>
            Asynchronously retrieves an entity by its primary key or returns null if no entity is found.
            </summary>
            <param name="id">The primary key of the entity</param>
            <returns>A task that represents the asynchronous operation. The result is the entity with the specified primary key, or null if no entity is found</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieves an entity that matches a given predicate or returns null if no entity is found.
            </summary>
            <param name="predicate">A condition used to filter entities</param>
            <returns>The entity that matches the predicate, or null if no entity is found</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asynchronously retrieves an entity that matches a given predicate or returns null if no entity is found.
            </summary>
            <param name="predicate">A condition used to filter entities</param>
            <returns>A task that represents the asynchronous operation. The result is the entity that matches the predicate, or null if no entity is found</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.Load(`1)">
            <summary>
            Creates an entity with the given primary key without accessing the database.
            </summary>
            <param name="id">The primary key of the entity</param>
            <returns>The created entity</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.InsertAsync(`0)">
            <summary>
            Asynchronously inserts a new entity into the repository.
            </summary>
            <param name="entity">The entity to be inserted</param>
            <returns>A task that represents the asynchronous operation. The result is the inserted entity</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.InsertAndGetId(`0)">
            <summary>
            Inserts a new entity and returns its primary key.
            May require saving the current unit of work to retrieve the ID.
            </summary>
            <param name="entity">The entity to be inserted</param>
            <returns>The primary key of the inserted entity</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.InsertAndGetIdAsync(`0)">
            <summary>
            Asynchronously inserts a new entity and returns its primary key.
            May require saving the current unit of work to retrieve the ID.
            </summary>
            <param name="entity">The entity to be inserted</param>
            <returns>A task that represents the asynchronous operation. The result is the primary key of the inserted entity</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.UpdateAsync(`0)">
            <summary>
            Asynchronously updates an existing entity.
            </summary>
            <param name="entity">The entity to be updated</param>
            <returns>A task that represents the asynchronous operation. The result is the updated entity</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.UpdateAsync(`1,System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Asynchronously updates an existing entity based on its primary key.
            </summary>
            <param name="id">The primary key of the entity to be updated</param>
            <param name="updateAction">An action that modifies the entity's properties</param>
            <returns>A task that represents the asynchronous operation. The result is the updated entity</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity to be deleted</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.DeleteAsync(`0)">
            <summary>
            Asynchronously deletes the specified entity.
            </summary>
            <param name="entity">The entity to be deleted</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.DeleteAsync(`1)">
            <summary>
            Asynchronously deletes an entity by its primary key.
            </summary>
            <param name="id">The primary key of the entity to be deleted</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes entities that match the given predicate.
            This may cause performance issues if many entities are deleted.
            </summary>
            <param name="predicate">A condition used to filter the entities to delete</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asynchronously deletes entities that match the given predicate.
            This may cause performance issues if many entities are deleted.
            </summary>
            <param name="predicate">A condition used to filter the entities to delete</param>
            <returns>A task that represents the asynchronous operation</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.CountAsync">
            <summary>
            Asynchronously gets the count of all entities in the repository.
            </summary>
            <returns>A task that represents the asynchronous operation. The result is the count of entities</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the count of entities that match the given predicate.
            </summary>
            <param name="predicate">A condition used to filter the entities</param>
            <returns>The count of entities that match the predicate</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asynchronously gets the count of entities that match the given predicate.
            </summary>
            <param name="predicate">A condition used to filter the entities</param>
            <returns>A task that represents the asynchronous operation. The result is the count of entities</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.LongCount">
            <summary>
            Gets the total count of all entities in the repository, even if it exceeds <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>The count of all entities in the repository</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.LongCountAsync">
            <summary>
            Asynchronously gets the total count of all entities in the repository, even if it exceeds <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>A task that represents the asynchronous operation. The result is the count of all entities</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the total count of entities that match the given predicate, even if it exceeds <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="predicate">A condition used to filter the entities</param>
            <returns>The count of entities that match the predicate</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRepository`2.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asynchronously gets the total count of entities that match the given predicate, even if it exceeds <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <param name="predicate">A condition used to filter the entities</param>
            <returns>A task that represents the asynchronous operation. The result is the count of entities that match the predicate</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.ISimpleRepository`2">
            <summary>
            Simple repository pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IWriteRepository`2">
            <summary>
            Simple write repository pattern
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.IWriteRepository`2.Insert(`1,`0)">
            <summary>
            Inserts a new entity.
            </summary>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.IWriteRepository`2.Delete(`1)">
            <summary>
            Deletes an entity by primary key.
            </summary>
            <param name="id">Primary key of the entity</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.IWriteRepository`2.Update(`1,System.Func{`0,`0})">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="id">Id of the entity</param>
            <param name="updateAction">Action that can be used to change values of the entity</param>
            <returns>Updated entity</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.ActionRule`1">
            <summary>
            Represents a rule with an action that is executed when a condition is met.
            </summary>
            <typeparam name="R">The type of rule result, which must implement the IRuleResult interface.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Patterns.ActionRule`1.Condition">
            <summary>
            Gets or sets the condition that must be satisfied for the action to be executed.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ActionRule`1.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ActionRule`1"/> class with an action and a condition.
            </summary>
            <param name="actionToBeExecuted">The action that will be executed if the condition evaluates to true.</param>
            <param name="condition">The condition that must return true for the action to be executed.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ActionRule`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ActionRule`1"/> class with default values.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ActionRule`1.Evaluate">
            <summary>
            Evaluates the condition of the rule. If the condition evaluates to true, the rule is considered successful.
            </summary>
            <returns>A rule result object indicating the success or failure of the rule.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.ActionRule">
            <summary>
            Represents a rule with an action that is executed when a condition is met, with a specific rule result type.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.ActionRule.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ActionRule"/> class with an action and a condition.
            </summary>
            <param name="actionToBeExecuted">The action that will be executed if the condition evaluates to true.</param>
            <param name="condition">The condition that must return true for the action to be executed.</param>
        </member>
        <member name="M:VisionNet.Core.Patterns.ActionRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Patterns.ActionRule"/> class with default values.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IRuleResult">
            <summary>
            Represents the result of a rule evaluation, including the action to be executed and the success status.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.IRuleResult.ActionToBeExecuted">
            <summary>
            Gets or sets the action that will be executed if the rule is considered successful.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.IRuleResult.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the rule evaluation was successful.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.IRuleResult.Execute">
            <summary>
            Executes the action associated with the rule result.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.NoRule`1">
            <summary>
            Represents a rule that always evaluates as successful and executes the provided action.
            </summary>
            <typeparam name="R">The type of rule result, which must implement the <see cref="T:VisionNet.Core.Patterns.IRuleResult"/> interface.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.NoRule`1.#ctor(System.Action)">
            <summary> The NoRule function is a constructor for the NoRule class. It takes in an Action and passes it to the base Rule class.</summary>
            <param name="actionToBeExecuted"> The action to be executed.
            </param>
            <returns> The value of the actiontobeexecuted.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.NoRule`1.#ctor">
            <summary> The NoRule function is a constructor for the NoRule class. It does not take any parameters, and it does not return anything.</summary>
            <returns> A rule object.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.NoRule`1.Evaluate">
            <summary> The Evaluate function is the main function of a rule. It returns an R object, which contains information about whether or not the rule was successful.</summary>
            <returns> An r object</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.NoRule">
            <summary>
            Represents a rule that always evaluates as successful and executes the provided action, with a specific rule result type of <see cref="T:VisionNet.Core.Patterns.RuleResult"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.NoRule.#ctor(System.Action)">
            <summary> The NoRule function is a constructor for the NoRule class. It takes in an Action and passes it to the base Rule class.</summary>
            <param name="actionToBeExecuted"> The action to be executed when the rule is satisfied.
            </param>
            <returns> A boolean value of false</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.NoRule.#ctor">
            <summary> The NoRule function is a constructor for the NoRule class. It does not take any parameters, and it does not return anything.</summary>
            <returns> A string.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.Rule`1">
            <summary>
            Represents an abstract base class for defining rules that can be evaluated to produce a result.
            </summary>
            <typeparam name="R">The type of rule result, which must implement the <see cref="T:VisionNet.Core.Patterns.IRuleResult"/> interface.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.Rule`1.#ctor(System.Action)">
            <summary> The Rule function is a constructor for the Rule class. It takes an Action as its parameter and assigns it to the _ruleResult object's ActionToBeExecuted property.</summary>
            <param name="actionToBeExecuted"> The action to be executed when the rule is met.
            </param>
            <returns> A ruleresult object</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.Rule`1.#ctor">
            <summary> The Rule function is a function that takes in an input of type T and returns a result of type R.</summary>
            <returns> The result of the rule</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.Rule">
            <summary>
            Represents an abstract base class for defining rules that can be evaluated to produce a result, with a specific rule result type of <see cref="T:VisionNet.Core.Patterns.RuleResult"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.Rule.#ctor(System.Action)">
            <summary> The Rule function is a constructor that takes an Action as its parameter.
            The Rule function then calls the base class's constructor, passing in the actionToBeExecuted parameter.</summary>
            <param name="actionToBeExecuted"> The action to be executed.
            </param>
            <returns> A boolean value</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.Rule.#ctor">
            <summary> The Rule function is a constructor for the Rule class. It takes no parameters and returns nothing.</summary>
            <returns> A string value.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.RuleResult">
            <summary>
            Represents the result of a rule evaluation, including the action to be executed and the success status.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.RuleResult.ActionToBeExecuted">
            <summary>
            Gets or sets the action that will be executed if the rule is considered successful.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.RuleResult.IsSuccess">
            <summary>
            Gets or sets a value indicating whether the rule evaluation was successful.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.RuleResult.#ctor">
            <summary> The RuleResult function is used to determine whether a rule has been violated or not.
            If the rule has been violated, then the RuleResult function will return true.
            If the rule has not been violated, then the RuleResult function will return false.</summary>
            <returns> A ruleresult object.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.RuleResult.#ctor(System.Action)">
            <summary> The RuleResult function is used to execute a rule and return the result of that execution.</summary>
            <param name="actionToBeExecuted"> What is this parameter used for?
            </param>
            <returns> The actiontobeexecuted.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.RuleResult.Execute">
            <summary> The Execute function is used to execute the ActionToBeExecuted if IsSuccess is true.
            </summary>
            <returns> A boolean value. if the command is executed successfully, it returns true, otherwise false.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.RuleChain`1">
            <summary>
            Represents a chain of rules that can be evaluated in sequence, with conditional rules for "if" and "else" logic.
            </summary>
            <typeparam name="R">The type of rule result, which must inherit from <see cref="T:VisionNet.Core.Patterns.RuleResult"/>.</typeparam>
        </member>
        <member name="P:VisionNet.Core.Patterns.RuleChain`1._ifRule">
            <summary>
            Gets the next rule in the chain that is executed if the current rule evaluates to true.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.RuleChain`1._elseRule">
            <summary>
            Gets the next rule in the chain that is executed if the current rule evaluates to false.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Patterns.RuleChain`1.IsLastInChain">
            <summary>
            Gets a value indicating whether this rule is the last rule in the chain.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.RuleChain`1.#ctor(VisionNet.Core.Patterns.IRule{`0})">
            <summary> The RuleChain function allows you to chain together multiple rules,
            so that the output of one rule is passed as input to another.  This can be
            used for a variety of purposes, such as combining multiple rules into a single
            rule (e.g., if you have two separate rules that each take an integer and return 
            an integer), or for creating more complex logic by passing the output from one
            rule into another.</summary>
            <param name="mainRule"> </param>
            <returns> The rulechain object.</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.RuleChain`1.AddIf(VisionNet.Core.Patterns.IRule{`0})">
             <summary> The AddIf function adds a rule to the chain that will only be executed if the previous rules in the chain are successful.</summary>
            
             <param name="rule"> What is this parameter used for?</param>
            
             <returns> The _ifrule object</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.RuleChain`1.AddElse(VisionNet.Core.Patterns.IRule{`0})">
            <summary> The AddElse function adds a rule to the chain that will be executed if all previous rules in the chain return false.</summary>
            <param name="rule"> The rule to be executed if the condition is true.
            </param>
            <returns> A new rulechain object</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.RuleChain`1.Evaluate">
            <summary> The Evaluate function evaluates the rule and executes it if it is successful. If the rule is not successful, then the elseRule will be evaluated.</summary>
            <returns> A ruleresult object</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.RuleChain">
            <summary>
            Represents a chain of rules that can be evaluated in sequence, with conditional rules for "if" and "else" logic, with a specific rule result type of <see cref="T:VisionNet.Core.Patterns.RuleResult"/>.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Patterns.RuleChain.#ctor(VisionNet.Core.Patterns.IRule{VisionNet.Core.Patterns.RuleResult})">
            <summary> The RuleChain function is a constructor that takes in an IRule object and passes it to the base class.
            The RuleChain function also has a public method called AddRule which adds rules to the chain.</summary>
            <param name="mainRule"> The main rule that will be executed.
            </param>
            <returns> A rulechain object.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.RulesEvaluator`1">
            <summary>
            Evaluates a set of rules and determines the results based on the given conditions.
            </summary>
            <typeparam name="R">The type of rule result, which must inherit from <see cref="T:VisionNet.Core.Patterns.RuleResult"/>.</typeparam>
        </member>
        <member name="M:VisionNet.Core.Patterns.RulesEvaluator`1.Add(VisionNet.Core.Patterns.IRule{`0})">
            <summary> The Add function adds a rule to the RuleChain.
            The Add function returns an instance of the RuleChain class, which allows you to chain rules together.&lt;/para&gt;</summary>
            <param name="rule">The rule to be added.</param>
            <returns> The rulechain object</returns>
        </member>
        <member name="M:VisionNet.Core.Patterns.RulesEvaluator`1.Evaluate">
            <summary> The Evaluate function is used to evaluate the rules chains.</summary>
            <returns> A list of rules that were evaluated as true.</returns>
        </member>
        <member name="T:VisionNet.Core.Patterns.RulesEvaluator">
            <summary>
            Evaluates a set of rules and determines the results based on the given conditions, with a specific rule result type of <see cref="T:VisionNet.Core.Patterns.RuleResult"/>.
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IGenericLazySingleton">
            <summary>
            Simple singleton pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ISingleton">
            <summary>
            Simple singleton pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IGenericThreadSafeSingleton">
            <summary>
            Simple singleton pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ILazySingleton`1">
            <summary>
            Simple singleton pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.ISingleton`1">
            <summary>
            Simple singleton pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Patterns.IThreadSafeSingleton`1">
            <summary>
            Simple singleton pattern
            </summary>
        </member>
        <member name="T:VisionNet.Core.Reflection.DocumentationExtensions">
            <summary>
            Utility class to provide documentation for various types where available with the assembly
            </summary>
        </member>
        <member name="M:VisionNet.Core.Reflection.DocumentationExtensions.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>
            Provides the documentation comments for a specific method
            </summary>
            <param name="methodInfo">The MethodInfo (reflection data ) of the member to find documentation for</param>
            <returns>The XML fragment describing the method</returns>
        </member>
        <member name="M:VisionNet.Core.Reflection.DocumentationExtensions.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Provides the documentation comments for a specific member
            </summary>
            <param name="memberInfo">The MemberInfo (reflection data) or the member to find documentation for</param>
            <returns>The XML fragment describing the member</returns>
        </member>
        <member name="M:VisionNet.Core.Reflection.DocumentationExtensions.GetSummary(System.Reflection.MemberInfo)">
            <summary>
            Returns the Xml documenation summary comment for this member
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:VisionNet.Core.Reflection.DocumentationExtensions.GetDocumentation(System.Type)">
            <summary>
            Provides the documentation comments for a specific type
            </summary>
            <param name="type">Type to find the documentation for</param>
            <returns>The XML fragment that describes the type</returns>
        </member>
        <member name="M:VisionNet.Core.Reflection.DocumentationExtensions.GetSummary(System.Type)">
            <summary>
            Gets the summary portion of a type's documenation or returns an empty string if not available
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VisionNet.Core.Reflection.DocumentationExtensions.XmlFromName(System.Type,System.Char,System.String)">
            <summary>
            Obtains the XML Element that describes a reflection element by searching the 
            members for a member that has a name that describes the element.
            </summary>
            <param name="type">The type or parent type, used to fetch the assembly</param>
            <param name="prefix">The prefix as seen in the name attribute in the documentation XML</param>
            <param name="name">Where relevant, the full name qualifier for the element</param>
            <returns>The member that has a name that describes the specified reflection element</returns>
        </member>
        <member name="F:VisionNet.Core.Reflection.DocumentationExtensions.Cache">
            <summary>
            A cache used to remember Xml documentation for assemblies
            </summary>
        </member>
        <member name="F:VisionNet.Core.Reflection.DocumentationExtensions.FailCache">
            <summary>
            A cache used to store failure exceptions for assembly lookups
            </summary>
        </member>
        <member name="M:VisionNet.Core.Reflection.DocumentationExtensions.XmlFromAssembly(System.Reflection.Assembly)">
            <summary>
            Obtains the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
            <remarks>This version uses a cache to preserve the assemblies, so that 
            the XML file is not loaded and parsed on every single lookup</remarks>
        </member>
        <member name="M:VisionNet.Core.Reflection.DocumentationExtensions.XmlFromAssemblyNonCached(System.Reflection.Assembly)">
            <summary>
            Loads and parses the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
        </member>
        <member name="T:VisionNet.Core.SafeObjects.IReadonlySafeObject`1">
            <summary>
            Defines a read-only wrapper for an object of type <typeparamref name="TType"/>, providing safe access to its value and utility methods for basic operations.
            </summary>
            <typeparam name="TType">The type of the underlying data object.</typeparam>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.DefaultValue">
            <summary>
            Gets or sets the default value used when the underlying value is null or an invalid conversion is attempted.
            </summary>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.DataType">
            <summary>
            Gets the type of the data stored within the safe object.
            </summary>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.GetValue">
            <summary>
            Retrieves the value stored in the safe object as an object type.
            </summary>
            <returns>The value of the underlying data object.</returns>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.Value">
            <summary>
            Retrieves the value stored in the safe object as an object type.
            </summary>
            <returns>The value of the underlying data object.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.TryGetValue``1(``0@)">
            <summary>
            Attempts to retrieve the value stored in the safe object, casting it to the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to which the value should be cast.</typeparam>
            <param name="value">The variable to store the cast value if the operation succeeds.</param>
            <returns>True if the value was successfully retrieved and cast; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.IsValidValue(System.Object)">
            <summary>
            Validates whether the given value is considered valid for the underlying data type of the safe object.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>True if the value is valid; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.ToBool(System.Boolean)">
            <summary>
            Converts the value of the safe object to a boolean, with an optional default value if the conversion is not straightforward.
            </summary>
            <param name="defaultValue">The default boolean value to return if the conversion cannot be performed directly.</param>
            <returns>The boolean representation of the safe object's value, or the default value if the conversion fails.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.ToFloat(System.Double)">
            <summary>
            Converts the value of the safe object to a double, with an optional default value if the conversion is not straightforward.
            </summary>
            <param name="defaultValue">The default double value to return if the conversion cannot be performed directly.</param>
            <returns>The double representation of the safe object's value, or the default value if the conversion fails.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.ToInt(System.Int64)">
            <summary>
            Converts the value of the safe object to a long, with an optional default value if the conversion is not straightforward.
            </summary>
            <param name="defaultValue">The default long value to return if the conversion cannot be performed directly.</param>
            <returns>The long representation of the safe object's value, or the default value if the conversion fails.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.ToString(System.String)">
            <summary>
            Converts the value of the safe object to a string, with an optional default value if the conversion is not straightforward.
            </summary>
            <param name="defaultValue">The default string value to return if the conversion cannot be performed directly.</param>
            <returns>The string representation of the safe object's value, or the default value if the conversion fails.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.IsTrue">
            <summary>
            Determines if the value of the safe object can be considered 'true' in a boolean context.
            </summary>
            <returns>True if the value represents a 'true' state; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObject`1.IsFalse">
            <summary>
            Determines if the value of the safe object can be considered 'false' in a boolean context.
            </summary>
            <returns>True if the value represents a 'false' state; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.TryGetValue(`0,System.Object@)">
            <summary>
            The try get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.TryGetValue``1(`0,``0@)">
            <summary>
            Tries to retrieve a value of type <typeparamref name="TType"/> from the safe object identified by the given key.
            </summary>
            <param name="key">The key of the safe object to retrieve the value from.</param>
            <param name="value">The value of type <typeparamref name="TType"/> retrieved from the safe object, if found. The default value of <typeparamref name="TType"/> if the retrieval fails.</param>
            <returns>True if the value of type <typeparamref name="TType"/> was successfully retrieved, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.IsValidValue(`0,System.Object)">
            <summary>
            Validates whether the given value is considered valid for the underlying data type of the safe object.
            </summary>
            <param name="key">The index to do the action.</param>
            <param name="value">The value to validate.</param>
            <returns>True if the value is valid; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.ToBool(`0,System.Boolean)">
            <summary>
            Converts the value of the safe object to a boolean, with an optional default value if the conversion is not straightforward.
            </summary>
            <param name="key">The index to do the action.</param>
            <param name="defaultValue">The default boolean value to return if the conversion cannot be performed directly.</param>
            <returns>The boolean representation of the safe object's value, or the default value if the conversion fails.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.ToFloat(`0,System.Double)">
            <summary>
            Converts the value of the safe object to a double, with an optional default value if the conversion is not straightforward.
            </summary>
            <param name="key">The index to do the action.</param>
            <param name="defaultValue">The default double value to return if the conversion cannot be performed directly.</param>
            <returns>The double representation of the safe object's value, or the default value if the conversion fails.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.ToInt(`0,System.Int64)">
            <summary>
            Converts the value of the safe object to a long, with an optional default value if the conversion is not straightforward.
            </summary>
            <param name="key">The index to do the action.</param>
            <param name="defaultValue">The default long value to return if the conversion cannot be performed directly.</param>
            <returns>The long representation of the safe object's value, or the default value if the conversion fails.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.ToString(`0,System.String)">
            <summary>
            Converts the value of the safe object to a string, with an optional default value if the conversion is not straightforward.
            </summary>
            <param name="key">The index to do the action.</param>
            <param name="defaultValue">The default string value to return if the conversion cannot be performed directly.</param>
            <returns>The string representation of the safe object's value, or the default value if the conversion fails.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.IsTrue(`0)">
            <summary>
            Determines if the value of the safe object can be considered 'true' in a boolean context.
            </summary>
            <param name="key">The index to do the action.</param>
            <returns>True if the value represents a 'true' state; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IReadonlySafeObjectCollection`3.IsFalse(`0)">
            <summary>
            Determines if the value of the safe object can be considered 'false' in a boolean context.
            </summary>
            <param name="key">The index to do the action.</param>
            <returns>True if the value represents a 'false' state; otherwise, false.</returns>
        </member>
        <member name="T:VisionNet.Core.SafeObjects.ISafeObject`1">
            <summary>
            Extends <see cref="T:VisionNet.Core.SafeObjects.IReadonlySafeObject`1"/> to provide functionality for safely modifying the value of an object of type <typeparamref name="TType"/>.
            </summary>
            <typeparam name="TType">The type of the underlying data object.</typeparam>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.ISafeObject`1.TrySetValue(System.Object)">
            <summary>
            Attempts to set the value of the safe object to the provided value, ensuring type safety and validation.
            </summary>
            <param name="value">The value to be set, which must be compatible with <typeparamref name="TType"/>.</param>
            <returns>True if the value was successfully set and is valid; otherwise, false.</returns>
            <remarks>
            This method ensures that the value conforms to the constraints and validation rules defined for <typeparamref name="TType"/>.
            If the value is not valid or the operation fails for any reason, the method returns false and the state of the safe object remains unchanged.
            </remarks>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.ISafeObject`1.Value">
            <summary>
            Get or set the value of the safe object to the provided value, ensuring type safety and validation.
            </summary>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.ISafeObject`1.Clear">
            <summary>
            Clears the instance value by replacing it with the default value.
            </summary>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IWriteSafeObjectCollection`3.TrySetValue(`0,System.Object)">
            <summary>
            The try set value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.IWriteSafeObjectCollection`3.Item(`0)">
            <summary>
            Gets or Sets the this[].
            </summary>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.IWriteSafeObjectCollection`3.Clear">
            <summary>
            Clear the collection
            </summary>
        </member>
        <member name="T:VisionNet.Core.SafeObjects.SafeObject">
            <summary>
            Wraps an underlying <see cref="T:System.Object"/> with strong, explicit type intent (<see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/>),
            safe conversion semantics, and thread-safe access. The wrapper helps avoid null dereferences and
            invalid casts by centralizing conversion, validation, and equality checks.
            </summary>
            <remarks>
            <para><b>Thread-safety:</b> Access to the underlying value is synchronized via an internal lock, so
            concurrent reads/writes from multiple threads are safe at the instance level.</para>
            <para><b>Type intent:</b> <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/> indicates the intended <see cref="T:System.TypeCode"/> for the value.
            All <see cref="M:VisionNet.Core.SafeObjects.SafeObject.TrySetValue(System.Object)"/> operations convert to that type (honoring <see cref="P:VisionNet.Core.SafeObjects.SafeObject.Preferences"/>).
            </para>
            <para><b>Defaults:</b> <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DefaultValue"/> is used to initialize and <see cref="M:VisionNet.Core.SafeObjects.SafeObject.Clear"/> the value, and
            as the fallback for conversions in some operations.</para>
            </remarks>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.SafeObject.DefaultValue">
            <summary>
            Gets the default value associated with this instance. This value is used to initialize the object,
            to reset it via <see cref="M:VisionNet.Core.SafeObjects.SafeObject.Clear"/>, and as a fallback when conversions request a default.
            </summary>
            <value>
            An <see cref="T:System.Object"/> that is compatible with <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/>. May be <c>null</c> for
            reference-like types or when <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/> is <see cref="F:System.TypeCode.Empty"/>.
            </value>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.SafeObject.DataType">
            <summary>
            Gets the intended <see cref="T:System.TypeCode"/> target for conversions and storage.
            </summary>
            <value>
            A <see cref="T:System.TypeCode"/> describing the type this <see cref="T:VisionNet.Core.SafeObjects.SafeObject"/> attempts to maintain.
            The parameterless constructor sets this to <see cref="F:System.TypeCode.Empty"/>.
            </value>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.SafeObject.Preferences">
            <summary>
            Gets or sets the conversion preferences that influence how <see cref="M:VisionNet.Core.SafeObjects.SafeObject.TrySetValue(System.Object)"/> and
            <see cref="M:VisionNet.Core.SafeObjects.SafeObject.TryGetValue``1(``0@)"/> attempt to coerce types (e.g., culture-aware strings, clamping, etc.).
            </summary>
            <value>
            A combination of <see cref="T:VisionNet.Core.Types.TypeConversionPreferences"/> flags. Defaults to
            <see cref="F:VisionNet.Core.Types.TypeConversionPreferences.None"/> unless provided in the constructor.
            </value>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:VisionNet.Core.SafeObjects.SafeObject"/> with no type intent and a <c>null</c> value.
            </summary>
            <remarks>
            Sets <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/> to <see cref="F:System.TypeCode.Empty"/>, <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DefaultValue"/> to <c>null</c>,
            and the underlying value to <c>null</c>. No conversion preferences are applied.
            </remarks>
            <exception cref="T:System.Exception">
            This constructor does not throw by design.
            </exception>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.#ctor(System.TypeCode,System.Object,VisionNet.Core.Types.TypeConversionPreferences)">
            <summary>
            Initializes a new instance of <see cref="T:VisionNet.Core.SafeObjects.SafeObject"/> with an explicit <see cref="T:System.TypeCode"/>,
            a default value (optional), and conversion <see cref="P:VisionNet.Core.SafeObjects.SafeObject.Preferences"/>.
            </summary>
            <param name="dataType">The target <see cref="T:System.TypeCode"/> this instance should maintain.</param>
            <param name="defaultValue">
            Optional default. If <c>null</c>, it is set to the type's default via <see cref="!:TypeCodeExtensions.DefaultValue(TypeCode)"/>.
            If provided, it must be convertible to <paramref name="dataType"/>.
            </param>
            <param name="preferences">Conversion behavior flags used by conversions on this object.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="defaultValue"/> is provided but cannot be converted to <paramref name="dataType"/>.
            </exception>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.GetValue">
            <summary>
            Retrieves the current underlying value with thread-safe access.
            </summary>
            <returns>
            The stored value as an <see cref="T:System.Object"/>. It may be <c>null</c> depending on the current state and
            <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/>.
            </returns>
            <remarks>
            Uses internal locking to ensure a consistent read under concurrent access.
            </remarks>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.TryGetValue``1(``0@)">
            <summary>
            Attempts to obtain the value converted to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The desired destination type.</typeparam>
            <param name="value">On success, receives the converted value; otherwise set to <c>default(T)</c>.</param>
            <returns>
            <c>true</c> if the value was already assignable to <typeparamref name="T"/> or could be converted to it;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            The operation is thread-safe and will not throw on conversion failures; it logs and returns <c>false</c>.
            </remarks>
            <exception cref="T:System.Exception">
            Unexpected exceptions during conversion are caught and logged; the method returns <c>false</c>.
            </exception>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.TrySetValue(System.Object)">
            <summary>
            Attempts to set the underlying value after converting it to <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/>, honoring <see cref="P:VisionNet.Core.SafeObjects.SafeObject.Preferences"/>.
            </summary>
            <param name="value">The candidate value to store. May be any <see cref="T:System.Object"/> convertible to <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/>.</param>
            <returns>
            <c>true</c> if the value could be converted and was stored; otherwise <c>false</c>. When <c>false</c>,
            the previous value remains unchanged.
            </returns>
            <remarks>
            The operation is thread-safe and fail-safe: conversion problems are caught, logged, and reported via the return value.
            </remarks>
            <exception cref="T:System.Exception">
            Unexpected exceptions are caught and logged; the method returns <c>false</c>.
            </exception>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.SafeObject.Value">
            <summary>
            Gets or sets the current value, using the safe conversion pipeline.
            </summary>
            <value>
            The current stored value. Getting is thread-safe and non-throwing. Setting attempts conversion to
            <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/>; failures do not throw and leave the previous value intact.
            </value>
            <remarks>
            The setter delegates to <see cref="M:VisionNet.Core.SafeObjects.SafeObject.TrySetValue(System.Object)"/>; callers needing to detect failure should call it directly.
            </remarks>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.Clear">
            <summary>
            Resets the underlying value to <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DefaultValue"/>.
            </summary>
            <remarks>
            Thread-safe. No conversion is performed; the default is directly assigned.
            </remarks>
            <exception cref="T:System.Exception">
            This method does not throw by design.
            </exception>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.IsValidValue(System.Object)">
            <summary>
            Validates whether a provided <paramref name="value"/> can be converted to <see cref="P:VisionNet.Core.SafeObjects.SafeObject.DataType"/>
            under the current <see cref="P:VisionNet.Core.SafeObjects.SafeObject.Preferences"/>.
            </summary>
            <param name="value">The value to test for convertibility.</param>
            <returns><c>true</c> if the value can be converted; otherwise, <c>false</c>.</returns>
            <remarks>
            This method does not mutate the internal state. It is thread-safe and does not throw for conversion failures.
            </remarks>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.ToBool(System.Boolean)">
            <summary>
            Converts the current value to <see cref="T:System.Boolean"/>, or returns the provided default when conversion fails.
            </summary>
            <param name="defaultValue">Fallback result when conversion is not possible. Defaults to <c>false</c>.</param>
            <returns>The converted boolean, or <paramref name="defaultValue"/> on failure.</returns>
            <remarks>
            Honors <see cref="P:VisionNet.Core.SafeObjects.SafeObject.Preferences"/> for string/number boolean conversions as configured by the implementation.
            </remarks>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.IsTrue">
            <summary>
            Determines whether the current value can be interpreted as boolean <c>true</c>.
            </summary>
            <returns>
            <c>true</c> if conversion succeeds and the value is <c>true</c>; otherwise, <c>false</c>.
            When conversion fails, this method returns <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.IsFalse">
            <summary>
            Determines whether the current value can be interpreted as boolean <c>false</c>.
            </summary>
            <returns>
            <c>true</c> if conversion succeeds and the value is <c>false</c>; otherwise, <c>false</c>.
            When conversion fails, this method returns <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.ToFloat(System.Double)">
            <summary>
            Converts the current value to <see cref="T:System.Double"/>, or returns the provided default when conversion fails.
            </summary>
            <param name="defaultValue">Fallback result when conversion is not possible. Defaults to <c>0</c>.</param>
            <returns>The converted <see cref="T:System.Double"/>, or <paramref name="defaultValue"/> on failure.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.ToInt(System.Int64)">
            <summary>
            Converts the current value to <see cref="T:System.Int64"/>, or returns the provided default when conversion fails.
            </summary>
            <param name="defaultValue">Fallback result when conversion is not possible. Defaults to <c>0</c>.</param>
            <returns>The converted <see cref="T:System.Int64"/>, or <paramref name="defaultValue"/> on failure.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.ToString(System.String)">
            <summary>
            Converts the current value to <see cref="T:System.String"/>, or returns the provided default when conversion fails.
            </summary>
            <param name="defaultValue">Fallback string when conversion is not possible. Defaults to <c>""</c>.</param>
            <returns>The converted string, or <paramref name="defaultValue"/> on failure.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.Equals(VisionNet.Core.SafeObjects.SafeObject)">
            <summary>
            Determines value-based equality with another <see cref="T:VisionNet.Core.SafeObjects.SafeObject"/>.
            </summary>
            <param name="other">The other instance to compare against. May be <c>null</c>.</param>
            <returns>
            <c>true</c> if both wrappers hold values that are considered equal by <c>SafeAreEqualTo</c>;
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            Equality is determined by comparing the underlying values, not wrapper identity.
            </remarks>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.Equals(System.Object)">
            <summary>
            Determines equality against any <see cref="T:System.Object"/> using value semantics when possible.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> is the same reference as this instance, another <see cref="T:VisionNet.Core.SafeObjects.SafeObject"/>
            with an equal underlying value, or any object equal to the underlying value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.GetHashCode">
            <summary>
            Returns a hash code consistent with value-based equality of the underlying stored value.
            </summary>
            <returns>
            The hash code of the underlying value if non-<c>null</c>; otherwise <c>0</c>.
            </returns>
            <remarks>
            Uses locking to ensure a consistent snapshot under concurrent access.
            </remarks>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.op_Equality(VisionNet.Core.SafeObjects.SafeObject,VisionNet.Core.SafeObjects.SafeObject)">
            <summary>
            Compares two <see cref="T:VisionNet.Core.SafeObjects.SafeObject"/> instances for value-based equality.
            </summary>
            <param name="left">The first instance to compare. May be <c>null</c>.</param>
            <param name="right">The second instance to compare. May be <c>null</c>.</param>
            <returns>
            <c>true</c> if both are <c>null</c> or their underlying values are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObject.op_Inequality(VisionNet.Core.SafeObjects.SafeObject,VisionNet.Core.SafeObjects.SafeObject)">
            <summary>
            Determines inequality between two <see cref="T:VisionNet.Core.SafeObjects.SafeObject"/> instances.
            </summary>
            <param name="left">The first instance to compare. May be <c>null</c>.</param>
            <param name="right">The second instance to compare. May be <c>null</c>.</param>
            <returns>
            <c>true</c> if value-based equality (see <see cref="M:VisionNet.Core.SafeObjects.SafeObject.op_Equality(VisionNet.Core.SafeObjects.SafeObject,VisionNet.Core.SafeObjects.SafeObject)"/>) is <c>false</c>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VisionNet.Core.SafeObjects.SafeObjectCollection`3">
            <summary>
            A collection of safe objects, providing thread-safe access and manipulation methods.
            </summary>
            <typeparam name="TKey">The type of the key used to identify each safe object.</typeparam>
            <typeparam name="TValue">The type of the safe object.</typeparam>
            <typeparam name="TType">The type of the value inside the safe object.</typeparam>
        </member>
        <member name="F:VisionNet.Core.SafeObjects.SafeObjectCollection`3._values">
            <summary>
            A dictionary to store the safe objects by their keys.
            </summary>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.ToBool(`0,System.Boolean)">
            <summary>
            Converts the safe object corresponding to the given key to a boolean value.
            </summary>
            <param name="key">The key of the safe object.</param>
            <param name="defaultValue">The default boolean value to return if the conversion fails.</param>
            <returns>The boolean value of the safe object.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.IsTrue(`0)">
            <summary>
            Determines whether the safe object corresponding to the given key is true.
            </summary>
            <param name="key">The key of the safe object.</param>
            <returns>True if the safe object is true, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.IsFalse(`0)">
            <summary>
            Determines whether the safe object corresponding to the given key is false.
            </summary>
            <param name="key">The key of the safe object.</param>
            <returns>True if the safe object is false, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.IsValidValue(`0,System.Object)">
            <summary>
            Validates whether the given value is valid for the safe object identified by the given key.
            </summary>
            <param name="key">The key of the safe object.</param>
            <param name="value">The value to validate.</param>
            <returns>True if the value is valid for the safe object, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.ToFloat(`0,System.Double)">
            <summary>
            Converts the safe object corresponding to the given key to a floating-point value.
            </summary>
            <param name="key">The key of the safe object.</param>
            <param name="defaultValue">The default floating-point value to return if the conversion fails.</param>
            <returns>The floating-point value of the safe object.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.ToInt(`0,System.Int64)">
            <summary>
            Converts the safe object corresponding to the given key to an integer value.
            </summary>
            <param name="key">The key of the safe object.</param>
            <param name="defaultValue">The default integer value to return if the conversion fails.</param>
            <returns>The integer value of the safe object.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.ToString(`0,System.String)">
            <summary>
            Converts the safe object corresponding to the given key to a string value.
            </summary>
            <param name="key">The key of the safe object.</param>
            <param name="defaultValue">The default string value to return if the conversion fails.</param>
            <returns>The string value of the safe object.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.Insert(`0,`1)">
            <summary>
            Inserts a new safe object into the collection with the specified key.
            </summary>
            <param name="id">The key to associate with the safe object.</param>
            <param name="entity">The safe object to insert.</param>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.Delete(`0)">
            <summary>
            Removes the safe object identified by the given key from the collection.
            </summary>
            <param name="id">The key of the safe object to remove.</param>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.Update(`0,System.Func{`1,`1})">
            <summary>
            Updates the safe object identified by the given key using the provided update action.
            </summary>
            <param name="id">The key of the safe object to update.</param>
            <param name="updateAction">The action to perform on the safe object.</param>
            <returns>The updated safe object.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.Get(`0)">
            <summary>
            Retrieves the safe object corresponding to the given key.
            </summary>
            <param name="id">The key of the safe object to retrieve.</param>
            <returns>The safe object identified by the key, or null if not found.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.GetAll">
            <summary>
            Retrieves all the safe objects in the collection as a list.
            </summary>
            <returns>A list of all the safe objects in the collection.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.Exists(`0)">
            <summary>
            Checks if a safe object with the specified key exists in the collection.
            </summary>
            <param name="id">The key to check for existence.</param>
            <returns>True if a safe object with the given key exists, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.Count">
            <summary>
            Gets the count of safe objects in the collection.
            </summary>
            <returns>The number of safe objects in the collection.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.TrySetValue(`0,System.Object)">
            <summary>
            Tries to set a value for the safe object identified by the given key.
            </summary>
            <param name="key">The key of the safe object to set the value for.</param>
            <param name="value">The value to set.</param>
            <returns>True if the value was successfully set, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.TryGetValue(`0,System.Object@)">
            <summary>
            Tries to retrieve a value from the safe object identified by the given key.
            </summary>
            <param name="key">The key of the safe object to retrieve the value from.</param>
            <param name="value">The value retrieved from the safe object.</param>
            <returns>True if the value was successfully retrieved, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.TryGetValue``1(`0,``0@)">
            <summary>
            Tries to retrieve a value of type <typeparamref name="TType"/> from the safe object identified by the given key.
            </summary>
            <param name="key">The key of the safe object to retrieve the value from.</param>
            <param name="value">The value of type <typeparamref name="TType"/> retrieved from the safe object, if found. The default value of <typeparamref name="TType"/> if the retrieval fails.</param>
            <returns>True if the value of type <typeparamref name="TType"/> was successfully retrieved, otherwise false.</returns>
        </member>
        <member name="P:VisionNet.Core.SafeObjects.SafeObjectCollection`3.Item(`0)">
            <summary>
            Gets or sets the value of the safe object identified by the given key.
            </summary>
            <param name="key">The key of the safe object.</param>
            <returns>The value of the safe object.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectCollection`3.Clear">
            <summary>
            Clears all safe objects from the collection.
            </summary>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectHelper.IsAssignableFrom``1(System.Object)">
            <summary> The IsAssignableFrom function determines whether an object can be assigned to a type.</summary>
            <param name="value"> The object to check.</param>
            <returns> True if the value is not null and it is of type t or a derived type.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectHelper.IsAssignableFrom(System.Type,System.Object)">
            <summary> The IsAssignableFrom function determines whether an instance of a specified type can be assigned to a variable of the current type.</summary>
            <param name="type"> The type to check.</param>
            <param name="value"> The object to be tested.</param>
            <returns> True if the type is assignable from the value.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectHelper.TryChangeType(System.Object,System.Type,System.Object@,System.Object)">
            <summary> The TryChangeType function attempts to convert the value parameter to the conversionType type. If it fails, it will attempt to convert using CultureInfo.CurrentCulture.</summary>
            <param name="value"> The value to be converted.</param>
            <param name="conversionType"> The type to convert the value to.</param>
            <param name="result"> The result of the conversion.</param>
            <param name="defaultValue"> The default value to return if the conversion fails.</param>
            <returns> A boolean value. if the conversion is successful, the result parameter contains a converted value and true is returned. otherwise, false is returned.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectHelper.ChangeType``1(System.Object,System.Object)">
            <summary> The TryChangeType function attempts to convert the value parameter to the conversionType type. If it fails, it will attempt to convert using CultureInfo.CurrentCulture.</summary>
            <param name="value"> The value to be converted.</param>
            <param name="defaultValue"> The default value to return if the conversion fails.</param>
            <returns> A boolean value. if the conversion is successful, the result parameter contains a converted value and true is returned. otherwise, false is returned.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectHelper.TryChangeType(System.Object,System.TypeCode,System.Object@,System.Object,VisionNet.Core.Types.TypeConversionPreferences)">
            <summary> The TryChangeType function attempts to convert the value parameter to the type specified by typeCode.
            If it fails, it will try a few other methods of conversion depending on what preferences are passed in.
            For example, if you pass in TypeConverstionPreferences.StringToBooleanLanguageInvariant and your value is &quot;true&quot; or &quot;false&quot;, 
            then this function will return true with result set to either true or false respectively.</summary>
            <param name="value"> The value to convert.</param>
            <param name="typeCode"> The type to convert the value to.</param>
            <param name="result"> The result of the conversion.</param>
            <param name="defaultValue"> Valor por defecto a devolver si no se puede convertir</param>
            <param name="preferences"> &lt;para&gt;typeconversionspreferences.none&lt;/para&gt;
                &lt;para&gt;typeconversionspreferences.stringtobooleanlanguageinvariant&lt;/para&gt;
                &lt;para&gt;typeconversionspreferences.stringtobooleanallowsnumbers&lt;/para&gt;
            </param>
            <returns> True if the conversion was successful, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.SafeObjects.SafeObjectHelper.TryChangeType(System.Object,VisionNet.Core.Types.BasicTypeCode,System.Boolean,System.Object@,System.Object,VisionNet.Core.Types.TypeConversionPreferences)">
            <summary> The TryChangeType function attempts to convert the value parameter to the type specified by typeCode.
            If it fails, it will try a few other methods of conversion depending on what preferences are passed in.
            For example, if you pass in TypeConverstionPreferences.StringToBooleanLanguageInvariant and your value is &quot;true&quot; or &quot;false&quot;, 
            then this function will return true with result set to either true or false respectively.</summary>
            <param name="value"> The value to convert.</param>
            <param name="typeCode"> The type to convert the value to.</param>
            <param name="result"> The result of the conversion.</param>
            <param name="defaultValue"> Valor por defecto a devolver si no se puede convertir</param>
            <param name="preferences"> &lt;para&gt;typeconversionspreferences.none&lt;/para&gt;
                &lt;para&gt;typeconversionspreferences.stringtobooleanlanguageinvariant&lt;/para&gt;
                &lt;para&gt;typeconversionspreferences.stringtobooleanallowsnumbers&lt;/para&gt;
            </param>
            <returns> True if the conversion was successful, otherwise false.</returns>
        </member>
        <member name="F:VisionNet.Core.Security.EncriptMethod.ECB">
            <summary>
            Electronic Code Book
            </summary>
        </member>
        <member name="M:VisionNet.Core.Security.PasswordEncriptDecript.#ctor">
            <summary> The PasswordEncriptDecript function encrypts and decrypts a password.</summary>
            <returns> A string</returns>
        </member>
        <member name="M:VisionNet.Core.Security.PasswordEncriptDecript.Encript(System.Security.SecureString,VisionNet.Core.Security.EncriptMethod)">
            <summary> The Encript function takes a SecureString and returns an encrypted string.</summary>
            <param name="source"> The string to be decrypted</param>
            <param name="encriptMethod"> Encriptmethod encriptmethod</param>
            <returns> A string</returns>
        </member>
        <member name="M:VisionNet.Core.Security.PasswordEncriptDecript.Decript(System.String,VisionNet.Core.Security.EncriptMethod)">
            Esta función desencripta la cadena que le envíamos en el parámentro de entrada.
            <summary> The Decript function takes a string and an EncriptMethod enum as parameters.
            The function then uses the switch statement to determine which encription method was used.
            If the Base64 encription method is used, it will return a SecureString object that contains 
            the decrypted string.</summary>
            <param name="source"> The string to be decrypted</param>
            <param name="encriptMethod"> The type of encription to use.  default is base64</param>
            <returns> A securestring</returns>
        </member>
        <member name="M:VisionNet.Core.Security.PasswordEncriptDecriptHelper.Decript(System.String,VisionNet.Core.Security.EncriptMethod)">
            Esta función desencripta la cadena que le envíamos en el parámentro de entrada.
        </member>
        <member name="T:VisionNet.Core.Security.CompareSecureStringsWithHmac">
            <summary>
            Compare two SecureString objects by creating a random HMAC of both SecureStrings, and comparing that.
            (C) Sjoerd Langkemper, 2017
            This example code is missing vital error handling functionality and should not be used in production.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Security.CompareSecureStringsWithHmac.IsEqual(System.Security.SecureString,System.Security.SecureString)">
            <summary> The IsEqual function compares two SecureStrings for equality.
            It does this by creating a HMAC hash of each string using the RC2 algorithm, and then comparing the hashes.</summary>
            <param name="ss1"> The first securestring to compare.</param>
            <param name="ss2"> The second securestring to compare.</param>
            <returns> A boolean value. if the two secure strings are equal, it will return true.</returns>
        </member>
        <member name="M:VisionNet.Core.Security.CompareSecureStringsWithHmac.CreateHmacForSecureString(System.IntPtr,System.IntPtr,System.Security.SecureString)">
            <summary> The CreateHmacForSecureString function creates a HMAC for the given SecureString.</summary>
            <param name="hProv"> Handle to a csp</param>
            <param name="hKey"> Handle to the key</param>
            <param name="ss"> The securestring to be hashed</param>
            <returns> A byte array of 64 bytes.</returns>
        </member>
        <member name="M:VisionNet.Core.Security.SecureStringHelper.IsEqual(System.Security.SecureString,System.Security.SecureString)">
            <summary> The IsEqual function compares two SecureStrings for equality.
            It does this by using a HMACSHA256 hash to compare the strings, and then 
            overwrites the memory used by both strings with zeros before returning.</summary>
            <param name="ss1"> The first securestring to compare</param>
            <param name="ss2"> The second securestring to compare</param>
            <returns> A boolean value that indicates whether the two securestring objects are equal.</returns>
        </member>
        <member name="T:VisionNet.Core.Serialization.Serializer">
            <summary>
            Base class of a serializer/deserializer instance
            </summary>
        </member>
        <member name="T:VisionNet.Core.Serialization.ISerializer">
            <summary>
            Specifies a serializer/deserializer instance
            </summary>
        </member>
        <member name="T:VisionNet.Core.Serialization.ISerializer`1">
            <summary>
            Specifies a serializer/deserializer instance
            </summary>
        </member>
        <member name="M:VisionNet.Core.Serialization.ISerializer`1.Serialize``1(System.IO.Stream,``0,`0,System.Object)">
            <summary>
            Execute a serialization of a instance into a stream
            </summary>
            <typeparam name="T">Associated type</typeparam>
            <param name="stream">Destination of the serialization</param>
            <param name="source">Source instance to serialize</param>
        </member>
        <member name="M:VisionNet.Core.Serialization.ISerializer`1.Serialize(System.IO.Stream,System.Object,`0,System.Object)">
            <summary>
            Execute a serialization of a instance into a stream
            </summary>
            <param name="stream">Destination of the serialization</param>
            <param name="source">Source instance to serialize</param>
        </member>
        <member name="M:VisionNet.Core.Serialization.ISerializer`1.Deserialize``1(System.IO.Stream)">
            <summary>
            Execute a deserialization of a stream into a instance
            </summary>
            <typeparam name="T">Associated type</typeparam>
            <param name="stream">Source of the serialization</param>
            <returns>Result object of the serialization</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.ISerializer`1.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Execute a deserialization of a stream into a instance
            </summary>
            <param name="stream">Source of the serialization</param>
            <param name="type">Type of the destination instance</param>
            <returns>Result object of the serialization</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.DirectJSonConverter`1.NoTypeConverterContractResolver.CreateContract(System.Type)">
            <summary> The CreateContract function is called by the JsonSerializer to create a contract for each type it encounters.
            This override allows us to return our own custom contract that will be used when serializing and deserializing objects of type T.</summary>
            <param name="objectType"> What is this?</param>
            <returns> A jsoncontract object.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.DirectJSonConverter`1.CanConvert(System.Type)">
            <summary> The CanConvert function is used to determine if the converter can convert a given type.
            This function is called by JsonSerializer when it needs to know if this converter can handle a given type.</summary>
            <param name="objectType"> The type of the object to convert.
            </param>
            <returns> True if the objecttype parameter is of type t or a derived class. otherwise, it returns false.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.DirectJSonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary> The ReadJson function is used to deserialize JSON text into an object or value.</summary>
            <param name="reader"> The jsonreader to read from.</param>
            <param name="objectType"> The type of the object.</param>
            <param name="existingValue"> The existing value of object being read.</param>
            <param name="serializer"> The jsonserializer used to deserialize the object.</param>
            <returns> The item object.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.DirectJSonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary> The WriteJson function is used to serialize an object into a JSON string.</summary>
            <param name="writer"> The jsonwriter writer is used to write the json data.
            </param>
            <param name="value"> The object to serialize.</param>
            <param name="serializer"> The jsonserializer is used to serialize the object.
            </param>
            <returns> A jsonwriter object.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.PointJSONConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary> The WriteJson function is used to serialize a Point object into JSON.</summary>
            <param name="writer"> The jsonwriter to write the json data to.</param>
            <param name="value"> The value to convert.</param>
            <param name="serializer"> This is the serializer that will be used to convert the object.</param>
            <returns> A jobject that contains the x and y properties of the point object.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.PointJSONConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary> The ReadJson function is used to deserialize a JSON object into an instance of the Point class.
            The JsonReader parameter provides access to the raw JSON data being deserialized, and the JsonSerializer 
            parameter allows us to read child values from it.</summary>
            <param name="reader"> The reader.</param>
            <param name="objectType"> The type of the object.</param>
            <param name="existingValue"> The existing value of object being read. if there is no existing value then null will be used.</param>
            <param name="serializer"> The jsonserializer is used to deserialize the json object into a jobject. 
            </param>
            <returns> A new point object with the x and y values from the json.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.PointJSONConverter.CanConvert(System.Type)">
            <summary> The CanConvert function is used to determine whether or not the converter can convert a given type.
            This function is called by the JsonSerializer when it encounters an object that needs conversion.</summary>
            <param name="objectType"> The type of the object to convert.</param>
            <returns> True if the objecttype is of type point.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.SecureStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Security.SecureString,Newtonsoft.Json.JsonSerializer)">
            <summary> The WriteJson function is used to convert a SecureString object into a string.
            The function does this by first converting the SecureString object into an IntPtr, then 
            converts that IntPtr to a BSTR (Basic String), and finally writes the value of that BSTR as 
            a string.</summary>
            <param name="writer"> The writer to write the json data to.</param>
            <param name="value"> The securestring to be serialized.</param>
            <param name="serializer"> The serializer.</param>
            <returns> A string.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.SecureStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Security.SecureString,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary> The ReadJson function is used to convert a JSON string into a SecureString object.
            The function takes in the following parameters:
                reader - A JsonReader that reads from the JSON string.
                objectType - The type of object being deserialized.  In this case, it's always going to be SecureString.
                existingValue - An existing value of the target type (SecureString).  This parameter will always be null because we're creating new objects and not updating them with this converter class.  
                               If you wanted to update an existing SecureString, you would need to pass in</summary>
            <param name="reader">  JsonReader that reads from the JSON string.</param>
            <param name="objectType"> The type of object being deserialized.  In this case, it's always going to be SecureString</param>
            <param name="existingValue">An existing value of the target type (SecureString).  This parameter will always be null because we're creating new objects and not updating them with this converter class.</param>
            <param name="hasexistingvalue"></param>
            <param name="serializer">The serializer.</param>
            <returns> A securestring object.</returns>
        </member>
        <member name="T:VisionNet.Core.Serialization.JSONSerializer">
            <summary>
            Implements a instance of serializer/deserializer using a JSON format
            </summary>
        </member>
        <member name="M:VisionNet.Core.Serialization.JSONSerializer.Serialize(System.IO.Stream,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Serialization.JSONSerializer.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:VisionNet.Core.Serialization.SerializationType">
            <summary>
            Enumeration of serialization type
            </summary>
        </member>
        <member name="F:VisionNet.Core.Serialization.SerializationType.Binary">
            <summary>
            Binary format
            </summary>
        </member>
        <member name="F:VisionNet.Core.Serialization.SerializationType.XML">
            <summary>
            XML format
            </summary>
        </member>
        <member name="F:VisionNet.Core.Serialization.SerializationType.JSON">
            <summary>
            JSON format
            </summary>
        </member>
        <member name="T:VisionNet.Core.Serialization.Serializer`1">
            <summary>
            Base class of a serializer/deserializer instance
            </summary>
        </member>
        <member name="M:VisionNet.Core.Serialization.Serializer`1.Serialize``1(System.IO.Stream,``0,`0,System.Object)">
            <inheritdoc/>
            <summary> The Serialize function serializes an object to a stream.</summary>
            <param name="stream"> The stream to write the serialized object to.</param>
            <param name="source"> The source object to serialize.</param>
            <param name="format"> The format to use when serializing the object.</param>
            <param name="parameters"> The parameters object is used to pass additional information to the serializer. 
            this can be used for example, when using a custom &lt;see cref=&quot;t:system.runtime.serialization.iformatter&quot; /&gt; or &lt;see cref=&quot;t:system.xml.serialization&quot; /&gt; implementation that requires additional information in order to properly serialize an object.</param>
            <returns> The number of bytes written to the stream.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.Serializer`1.Serialize(System.IO.Stream,System.Object,`0,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Serialization.Serializer`1.Deserialize``1(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:VisionNet.Core.Serialization.Serializer`1.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:VisionNet.Core.Serialization.XMLSerializer">
            <summary>
            Implements a instance of serializer/deserializer using a JSON format
            </summary>
        </member>
        <member name="M:VisionNet.Core.Serialization.XMLSerializer.Serialize(System.IO.Stream,System.Object,System.Object,System.Object)">
            <inheritdoc/>
            <summary> The Serialize function serializes an object into a stream.</summary>
            <param name="stream"> The stream to which the object is serialized.</param>
            <param name="source"> The object to be serialized.</param>
            <param name="format"> What is this parameter used for?</param>
            <param name="parameters"> What is this parameter used for?</param>
            <returns> The serialized object.</returns>
        </member>
        <member name="M:VisionNet.Core.Serialization.XMLSerializer.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc/>
            <summary> The Deserialize function takes a stream and type as parameters.
            It then creates an XmlSerializer object with the given type, and returns the deserialized object.</summary>
            <param name="stream"> The stream that contains the data to deserialize.</param>
            <param name="type"> The type of the object to deserialize.</param>
            <returns> The xml data in the form of an object.</returns>
        </member>
        <member name="M:VisionNet.Core.States.StatusValidator`1.IsValidTransition(`0,`0)">
            <summary> The IsValidTransition function checks if the source state is in the transitions dictionary, and then checks if any of those transition states are equal to the destiny state.</summary>
            <param name="source"> The source state</param>
            <param name="destiny"> The destiny state.</param>
            <returns> A bool value.</returns>
        </member>
        <member name="M:VisionNet.Core.States.StatusValidator`1.GoToState(`0,`0,System.Action)">
            <summary> The GoToState function is used to transition from one state to another.
            It will only allow the transition if it is a valid one, otherwise it will return the current state.</summary>
            <param name="source"> The current state.</param>
            <param name="destiny"> The destiny state</param>
            <param name="action"> The action to be executed when the state changes.</param>
            <returns> The destiny state. if the transition is not valid, it returns the source state.</returns>
        </member>
        <member name="M:VisionNet.Core.States.StatusValidator`1.TryGoToState(`0@,`0,System.Action)">
            <summary> The TryGoToState function attempts to transition the state machine from one state to another.
            If the transition is valid, it will execute an action and raise a StatusChanged event.</summary>
            <param name="source"> The current state of the object.</param>
            <param name="destiny"> The destiny state</param>
            <param name="action"> What is this parameter used for?</param>
            <returns> A boolean value. it returns true if the transition was successful, otherwise it returns false.</returns>
        </member>
        <member name="M:VisionNet.Core.States.StatusValidator`1.RaiseStatusChanged(System.Object,VisionNet.Core.Events.EventArgs{`0})">
            <summary> The RaiseStatusChanged function is a helper function that raises the StatusChanged event.
            It catches any exceptions thrown by the event handlers and ignores them.</summary>
            <param name="sender"> The object that raised the event</param>
            <param name="eventArgs"> What is this?</param>
            <returns> A void.</returns>
        </member>
        <member name="T:VisionNet.Core.Strings.StringComparisonAdapterExtensions">
            <summary>
            Clase conversora entre alarmas de tipo StringComparisonEx a StringComparison
            </summary>
        </member>
        <member name="F:VisionNet.Core.Strings.StringComparisonEx.DiacriticsIgnore">
            <summary>
            Ignore diacricits characters
            </summary>
        </member>
        <member name="F:VisionNet.Core.Strings.StringComparisonEx.NonAlphanumericIgnore">
            <summary>
            Ignore non alphanumerica characters
            </summary>
        </member>
        <member name="F:VisionNet.Core.Strings.StringComparisonEx.VisualAmbiguitiesIgnore">
            <summary>
            Ignore visual ambiguities
            </summary>
        </member>
        <member name="F:VisionNet.Core.Strings.StringComparisonEx.SeparatorsIgnore">
            <summary>
            Ignore seprations between words
            </summary>
        </member>
        <member name="F:VisionNet.Core.Strings.StringComparisonEx.MaxPermissive">
            <summary>
            Maximun permissivity. Ignore the maximun number of variables
            </summary>
        </member>
        <member name="T:VisionNet.Core.Strings.StringComparisonExAdapter">
            <summary>
            Clase adaptadora para convertir de StringComparisonExExtended a StringComparisonEx
            </summary>
        </member>
        <member name="T:VisionNet.Core.Strings.StringExtensions">
            <summary>
            Extension methods for the string type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Strings.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another 
            specified string according the type of search to use for the specified string.
            </summary>
            <param name="str">The string performing the replace method.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string replace all occurrences of <paramref name="oldValue"/>. 
            If value is equal to <c>null</c>, than all occurrences of <paramref name="oldValue"/> will be removed from the <paramref name="str"/>.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>A string that is equivalent to the current string except that all instances of <paramref name="oldValue"/> are replaced with <paramref name="newValue"/>. 
            If <paramref name="oldValue"/> is not found in the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:VisionNet.Core.Strings.StringExtensions.RemoveFromStart(System.String,System.String[])">
            <summary> The RemoveFromEnd function removes the specified suffixes from a string.</summary>
            <param name="str"> The string to remove the sufix from.</param>
            <param name="toRemove"> The params keyword is used to specify that a method parameter will be received as an array. the params modifier can be applied only to the last parameter of a formal parameter list.</param>
            <returns> A string with the specified suffix removed from the end.</returns>
        </member>
        <member name="M:VisionNet.Core.Strings.StringExtensions.RemoveFromEnd(System.String,System.String[])">
            <summary> The RemoveFromEnd function removes the specified suffixes from a string.</summary>
            <param name="str"> The string to remove the sufix from.</param>
            <param name="toRemove"> The params keyword is used to specify that a method parameter will be received as an array. the params modifier can be applied only to the last parameter of a formal parameter list.</param>
            <returns> A string with the specified suffix removed from the end.</returns>
        </member>
        <member name="M:VisionNet.Core.Strings.StringExtensions.RemoveDiacritics(System.String)">
            <summary> The RemoveDiacritics function removes diacritics from a string.
            Diacritics are special characters that modify the sound of a letter, such as an accent or cedilla.
            </summary>
            <param name="text"> The text to be normalized.</param>
            <returns> A string without diacritics.</returns>
        </member>
        <member name="M:VisionNet.Core.Strings.StringExtensions.IsValidCSharpIdentifier(System.String)">
            <summary>
            Determines if the text is valid for a C# identifier (name of class, interface, field, propierty, method...)
            </summary>
            <param name="text">Text to validate</param>
            <returns></returns>
        </member>
        <member name="M:VisionNet.Core.Strings.StringExtensions.EqualsEx(System.String,System.String,VisionNet.Core.Strings.StringComparisonEx)">
            <summary> The EqualsEx function is a string comparison function that ignores diacritics.
            For example, the EqualsEx function will return true when comparing &quot;cafe&quot; and &quot;café&quot;.&lt;/para&gt;</summary>
            <param name="compared1"> The first string to compare.</param>
            <param name="compared2"> The string to compare with the current instance.</param>
            <param name="comparisonType"> The type of comparison to use.</param>
            <returns> True if the two strings are equal, false otherwise.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.GenericTags.AddTag(VisionNet.Core.Types.NamedValue)">
            <summary> The AddTag function adds a tag to the _tagList list if it does not already exist.</summary>
            <param name="tag"> The tag to be added.</param>
            <returns> A list of tags</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.GenericTags.AddTags(VisionNet.Core.Types.NamedValue[])">
            <summary> The AddTags function adds tags to the _tagList list.</summary>
            <param name="tags"> The params keyword is used to specify that a method parameter should be treated as an array. 
            </param>
            <returns> A list of strings.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.GenericTags.HasAllTags(VisionNet.Core.Types.NamedValue[])">
            <summary> The HasAllTags function checks if the current object has all of the tags passed in as parameters.</summary>
            <param name="tags"> The tags to check for.</param>
            <returns> A boolean value. it returns true if all of the tags are present in the tag list.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.GenericTags.HasAnyTag(VisionNet.Core.Types.NamedValue[])">
            <summary> The HasAnyTag function checks if the current object has any of the tags passed in as parameters.</summary>
            <param name="tags"> The tags to check for</param>
            <returns> A boolean value.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.GenericTags.HasTag(VisionNet.Core.Types.NamedValue)">
            <summary> The HasTag function checks if the tag is in the list of tags.</summary>
            <param name="tag"> The tag to be added.</param>
            <returns> True if the tag is contained in the _taglist, otherwise it returns false.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.GenericTags.RemoveTag(VisionNet.Core.Types.NamedValue)">
            <summary> The RemoveTag function removes a tag from the list of tags.</summary>
            <param name="tag"> The tag to be removed</param>
            <returns> A boolean value.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.GenericTags.RemoveTags(VisionNet.Core.Types.NamedValue[])">
            <summary> The RemoveTags function removes all tags from the tag list that match any of the strings passed in as parameters.</summary>
            <param name="tags"> The tags to remove from the list.</param>
            <returns> The list of tags that were removed.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.StringTags.AddRawTag(System.String,System.Char)">
            <summary> The AddRawTag function takes a string and splits it into an array of strings, then converts each element to lowercase.
            The function then assigns the resulting list to the _tagList variable.</summary>
            <param name="tag"> The tag to add.</param>
            <param name="separator"> The separator is the character that will be used to split the string into a list of strings.
            </param>
            <returns> A list of strings</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.StringTags.AddTag(System.String)">
            <summary> The AddTag function adds a tag to the _tagList list if it does not already exist.</summary>
            <param name="tag"> The tag to be added.</param>
            <returns> A list of tags</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.StringTags.AddTags(System.String[])">
            <summary> The AddTags function adds tags to the _tagList list.</summary>
            <param name="tags"> The params keyword is used to specify that a method parameter should be treated as an array. 
            </param>
            <returns> A list of strings.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.StringTags.HasAllTags(System.String[])">
            <summary> The HasAllTags function checks if the current object has all of the tags passed in as parameters.</summary>
            <param name="tags"> The tags to check for.</param>
            <returns> A boolean value. it returns true if all of the tags are present in the tag list.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.StringTags.HasAnyTag(System.String[])">
            <summary> The HasAnyTag function checks if the current object has any of the tags passed in as parameters.</summary>
            <param name="tags"> The tags to check for</param>
            <returns> A boolean value.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.StringTags.HasTag(System.String)">
            <summary> The HasTag function checks if the tag is in the list of tags.</summary>
            <param name="tag"> The tag to be added.</param>
            <returns> True if the tag is contained in the _taglist, otherwise it returns false.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.StringTags.RemoveTag(System.String)">
            <summary> The RemoveTag function removes a tag from the list of tags.</summary>
            <param name="tag"> The tag to be removed</param>
            <returns> A boolean value.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.StringTags.RemoveTags(System.String[])">
            <summary> The RemoveTags function removes all tags from the tag list that match any of the strings passed in as parameters.</summary>
            <param name="tags"> The tags to remove from the list.</param>
            <returns> The list of tags that were removed.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.Tags`1.AddTag(`0)">
            <summary> The AddTag function adds a tag to the list of tags if it is not already in the list.</summary>
            <param name="tag"> The tag to be removed from the list</param>
            <returns> A bool, true if the tag was added and false otherwise.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.Tags`1.AddTags(`0[])">
            <summary> The AddTags function adds tags to the tag list.</summary>
            <param name="tags"> The tags to be added</param>
            <returns> A list of tags.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.Tags`1.HasAllTags(`0[])">
            <summary> The HasAllTags function checks if the current object has all of the tags passed in as parameters.</summary>
            <param name="tags"> The params keyword is a modifier that indicates that the method parameter 
            list is an array of arguments. when calling a method, you can specify 
            arguments as individual parameters or as an array. if you use the params 
            keyword, then all of the following are valid:</param>
            <returns> True if the object has all of the tags in the array.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.Tags`1.HasAnyTag(`0[])">
            <summary> The HasAnyTag function checks if the tag list contains any of the tags passed in as parameters.</summary>
            <param name="tags"> The tags to check for.</param>
            <returns> True if the tag is present in the list.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.Tags`1.HasTag(`0)">
            <summary> The HasTag function checks if the tag is in the list of tags.</summary>
            <param name="tag"> The tag to check for.</param>
            <returns> True if the tag is found in the list of tags.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.Tags`1.RemoveTag(`0)">
            <summary> The RemoveTag function removes a tag from the list of tags.</summary>
            <param name="tag"> The tag to be removed.</param>
            <returns> A boolean value.</returns>
        </member>
        <member name="M:VisionNet.Core.Tags.Tags`1.RemoveTags(`0[])">
            <summary> The RemoveTags function removes all tags from the tag list that are passed in as parameters.</summary>
            <param name="tags"> The tags to be removed from the tag list.</param>
            <returns> A list of type t</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.CheckTask.Start">
            <summary> The Start function starts the service.</summary>
            <returns> A task object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.CheckTask.Stop">
            <summary> The Stop function stops the service.</summary>
            <returns> A task object</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.CheckTask.Wait">
            <summary> The Wait function waits for the task to complete execution.
            This function can only be called from a different thread than the one that started the task.</summary>
            <returns> The taskstatus of the task.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.CheckTask.#ctor(System.Int64,System.Int32,System.Boolean)">
            <summary> The CheckTask function is used to check the status of a task.
            &lt;para&gt;The CheckTask function takes three parameters: timeOutMs, delayMs, and accuracyMode.&lt;/para&gt;
            &lt;list type=&quot;bullet&quot;&gt;
            &lt;item&gt;&lt;description&gt;timeOutMs - The amount of time in milliseconds that the task should be allowed to run before it is considered timed out.&lt;/description&gt;&lt;/item&gt;
            &lt;item&gt;&lt;description&gt;delayMs - The amount of time in milliseconds between each check for whether or not the task has completed.&lt;/description&gt;&lt;/item&gt; 
            &lt;/list&gt;</summary>
            <param name="timeOutMs"> The timeout in milliseconds</param>
            <param name="delayMs"> The delay between each check in milliseconds</param>
            <param name="accuracyMode"> If true, the task will wait for the specified time out period before returning false. 
            if false, it will return as soon as possible after checking and finding that the condition is not met. 
            </param>
            <returns> True if the task is completed, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.CheckTask.RaiseCheck(System.Object,VisionNet.Core.Events.ConditionEventArgs)">
            <summary> The RaiseCheck function is a helper function that raises the Check event.
            It also catches any exceptions thrown by the event handler and passes them to RaiseExceptionNotification.</summary>
            <param name="sender"> </param>
            <param name="e"> What is this parameter used for?</param>
            <returns> The check event.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.CheckTask.RaiseExceptionNotification(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Raises an exception notification event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="eventArgs">The event arguments containing the exception data.</param>
        </member>
        <member name="M:VisionNet.Core.Tasks.CheckTask.StartNew(System.Func{System.Boolean},System.Int64,System.Int32,System.Boolean)">
            <summary> The StartNew function is a function that takes in a Func&lt;bool&gt; action, long timeOutMs = 0, int delayMs = 20, bool accuracyMode = false.
            The StartNew function returns an object of type CheckTask. 
            The StartNew function creates a new instance of the CheckTask class and assigns it to the variable checkTask. 
            Then it adds an event handler for the Check event on checkTask which sets e.Condition to whatever value is returned by invoking action (which was passed into this method as an argument). 
            Finally, it calls Start() on checkTask.</summary>
            <param name="action"> The action to be executed.</param>
            <param name="timeOutMs"> The time out in milliseconds. if the condition is not met within this time, the task will be cancelled.</param>
            <param name="delayMs"> Delay between each check in milliseconds</param>
            <param name="accuracyMode"> If true, the task will be executed every &lt;paramref name=&quot;delayms&quot;/&gt; milliseconds.
            otherwise it will be executed after &lt;paramref name=&quot;delayms&quot;/&gt; milliseconds.
            </param>
            <returns> A &lt;see cref=&quot;checktask&quot;/&gt; object.</returns>
        </member>
        <member name="T:VisionNet.Core.Tasks.DelayedTask">
            <summary>
            Represents a task that executes an action after a specified delay.
            Provides functionality to start, stop, and wait for the task, and handle exceptions.
            Implements <see cref="T:VisionNet.Core.Abstractions.IStartable"/> for starting and stopping the task, and <see cref="T:VisionNet.Core.Patterns.IExceptionObservable"/> for exception notifications.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Tasks.DelayedTask.DelayMs">
            <summary>
            Gets or sets the delay in milliseconds before the task is executed.
            Default is 20 milliseconds.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Tasks.DelayedTask.Priority">
            <summary>
            Gets or sets the thread priority of the task.
            Default is <see cref="F:System.Threading.ThreadPriority.Normal"/>.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Tasks.DelayedTask.Status">
            <summary>
            Gets the current status of the service.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Tasks.DelayedTask.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Core.Tasks.DelayedTask"/> class with a specified delay.
            </summary>
            <param name="delayMs">The delay in milliseconds before the task executes. Default is 20 milliseconds.</param>
        </member>
        <member name="M:VisionNet.Core.Tasks.DelayedTask.Start">
            <summary>
            Starts the delayed task. If the task is not already running, it will be started with the specified delay.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Tasks.DelayedTask.Stop">
            <summary>
            Stops the delayed task if it is running.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Tasks.DelayedTask.Wait">
            <summary>
            Waits for the task to complete, ensuring it is not being waited on by the same thread that initiated the task.
            If the current thread is different from the thread that started the task, it waits for the task to finish.
            Throws an exception if the task is awaited on the same thread that started it.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Tasks.DelayedTask.StartNew(System.Action{System.Threading.CancellationTokenSource},System.Int32)">
            <summary>
            A wrapper for creating and starting a new <see cref="T:VisionNet.Core.Tasks.DelayedTask"/> instance.
            </summary>
            <param name="action">The action to be executed after the delay.</param>
            <param name="delayMs">The delay in milliseconds before the action is executed. Default is 20 milliseconds.</param>
            <returns>A new instance of <see cref="T:VisionNet.Core.Tasks.DelayedTask"/> that starts immediately.</returns>
        </member>
        <member name="E:VisionNet.Core.Tasks.DelayedTask.Action">
            <summary>
            Occurs when the delayed task action is executed.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Tasks.DelayedTask._raiseExceptionNotification(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Raises an exception notification event if an exception occurs during task execution.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="eventArgs">The event arguments containing the exception data.</param>
        </member>
        <member name="E:VisionNet.Core.Tasks.DelayedTask.ExceptionRaised">
            <summary>
            Occurs when an exception is raised during task execution.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Tasks.LoopTask.Start">
            <summary> The Start function starts the service.</summary>
            <returns> A task object.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.LoopTask.Stop">
            <summary> The Stop function stops the service.</summary>
            <returns> The service status</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.LoopTask.#ctor(System.Int64,System.Int32)">
            <summary> The LoopTask function is a task that runs in the background and loops until it is cancelled.
            It can be used to run tasks on a regular interval, or for an indefinite amount of time.</summary>
            <param name="maxIterations"> The number of iterations to perform.</param>
            <param name="delayMs"> The delay in milliseconds between iterations.</param>
            <returns> A task object.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.LoopTask.RaiseExceptionNotification(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Raises an exception notification event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="eventArgs">The event arguments containing the exception data.</param>
        </member>
        <member name="M:VisionNet.Core.Tasks.LoopTask.StartNew(System.Action{System.Threading.CancellationTokenSource},System.Int64,System.Int32)">
            <summary> The StartNew function is a static function that creates a new LoopTask object and starts it.
            The action parameter is an Action delegate that takes in one argument, which is the CancellationTokenSource of the loop task.
            The maxIterations parameter specifies how many times to run the loop before stopping it automatically. If this value is 0, then there will be no limit on how many times to run the loop.</summary>
            <param name="action"> The action to be performed in the loop.</param>
            <param name="maxIterations"> The maximum number of iterations to run. if 0, the loop will continue until cancelled.</param>
            <param name="delayMs"> The delay in milliseconds between each iteration of the loop.</param>
            <returns> An object of type looptask</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.SequenceTask.Start">
            <summary> The Start function starts the VisionNet service.</summary>
            <returns> The task that is created.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.SequenceTask.Start(VisionNet.Core.Monitoring.IReadonlyStopwatch)">
            <summary> The Start function starts the service.</summary>
            <param name="stopwatch">     the stopwatch to use for timing the service. if null, a new facadestopwatch will be created and used.
            </param>
            <returns> A task that is started and running. </returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.SequenceTask.Stop">
            <summary> The Stop function stops the service.</summary>
            <returns> The status of the service.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.SequenceTask.#ctor(System.Collections.Generic.List{VisionNet.Core.Tasks.SequenceItem},System.Int64)">
            <summary> The SequenceTask function is a constructor that takes in a list of sequences and the maximum number of iterations.
            If the maxIterations parameter is not specified, it defaults to 0.</summary>
            <param name="sequences"> List of sequences to be executed</param>
            <param name="maxIterations"> The maximum number of iterations to run the sequence. 
            if 0, then it will run indefinitely.</param>
            <returns> A list of sequences which are the result of the execution</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.SequenceTask.RaiseAction(VisionNet.Core.Tasks.SequenceItem,System.Threading.CancellationTokenSource)">
            <summary> The RaiseAction function is a helper function that invokes the Action delegate of a SequenceItem object.
            The RaiseAction function also handles any exceptions thrown by the Action delegate.</summary>
            <param name="sequenceItem"> What is this used for?</param>
            <param name="cancellationTokenSource"> What is this used for?
            </param>
            <returns> A boolean value. if the action is not null, it returns true. otherwise, it returns false.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.SequenceTask.RaiseExceptionNotification(System.Object,System.IO.ErrorEventArgs)">
            <summary> The RaiseExceptionNotification function is used to raise an exception notification event.</summary>
            <param name="sender"> </param>
            <param name="eventArgs"> What is this parameter used for?</param>
            <returns> The exceptionraised event.</returns>
        </member>
        <member name="M:VisionNet.Core.Tasks.SequenceTask.StartNew(System.Collections.Generic.List{VisionNet.Core.Tasks.SequenceItem},System.Int64,VisionNet.Core.Monitoring.IReadonlyStopwatch)">
            <summary> The StartNew function starts a new sequence task.</summary>
            <param name="sequences"> The list of sequences to be executed.</param>
            <param name="maxIterations"> The maximum number of iterations to run the sequence for. if 0, it will run indefinitely.</param>
            <param name="stopwatch"> The stopwatch is used to measure the time of each sequence item. 
            if no stopwatch is provided, a new one will be created and started automatically. 
            </param>
            <returns> A &lt;see cref=&quot;sequencetask&quot;/&gt; object.</returns>
        </member>
        <member name="P:VisionNet.Core.Types.NamedValue.Name">
            <summary>
            Gets or sets the name of the value.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Types.NamedValue.Type">
            <summary>
            Gets or sets the type of the value.
            </summary>
        </member>
        <member name="P:VisionNet.Core.Types.NamedValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Types.NamedValue.Clone">
            <summary>
            Creates a deep copy of the current <see cref="T:VisionNet.Core.Types.NamedValue"/> instance.
            </summary>
            <returns>A new instance of <see cref="T:VisionNet.Core.Types.NamedValue"/> with the same data.</returns>
        </member>
        <member name="T:VisionNet.Core.Types.TypeCodeAdapter">
            <summary>
            Clase conversora entre tipos básicos TypeCode y Type
            </summary>
        </member>
        <member name="M:VisionNet.Core.Types.TypeCodeAdapter.Convert(System.TypeCode)">
            <summary> The Convert function converts a TypeCode value to the corresponding type.</summary>
            <param name="value"> The typecode value to convert.</param>
            <returns> The type of the value.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeCodeAdapter.Convert(System.Type)">
            <summary> The Convert function converts a Type to a TypeCode.</summary>
            <param name="value"> The type to convert</param>
            <returns> A typecode value that indicates the type of object passed to it.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeCodeAdapter.Convert(System.TypeCode,System.Type@)">
            <summary> The Convert function converts a TypeCode value to the corresponding type.</summary>
            <param name="value"> What is this for?</param>
            <param name="result"> What is this used for?</param>
            <returns> A type object.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeCodeAdapter.Convert(System.Type,System.TypeCode@)">
            <summary> The Convert function converts a Type to a TypeCode.</summary>
            <param name="value"> The type of the value.</param>
            <param name="result"> The typecode result is a reference to the type code that will be returned. 
            </param>
            <returns> A typecode value that indicates the type of object passed to it.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VisionNet.Core.Types.TypeCodeToBasicAdapter.Convert(System.TypeCode,VisionNet.Core.Types.BasicTypeCode@)" -->
        <!-- Badly formed XML comment ignored for member "M:VisionNet.Core.Types.TypeCodeToBasicAdapter.Convert(VisionNet.Core.Types.BasicTypeCode,System.TypeCode@)" -->
        <member name="T:VisionNet.Core.Types.TypeExtensions">
            <summary>
            Proporciona métodos de extensión para la clase System.Type y System.TypeCode.
            Estos métodos incluyen la obtención del tamaño de un tipo, la comprobación de si un tipo es numérico,
            la obtención del valor mínimo y máximo de un tipo numérico, y la conversión entre System.Type y System.TypeCode.
            </summary>
        </member>
        <member name="F:VisionNet.Core.Types.TypeExtensions.CSharpTypeAliases">
            <summary>
            A dictionary mapping .NET types to their C# type aliases.
            </summary>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.GetCSharpAlias(System.Type)">
            <summary>
            Gets the C# alias of the specified type if it exists; otherwise, returns the type's name.
            </summary>
            <param name="type">The type for which to get the C# alias.</param>
            <returns>The C# alias of the type, or the type's name if no alias exists.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Comprueba si el tipo especificado es numérico.
            </summary>
            <param name="type">El tipo a comprobar.</param>
            <returns>Verdadero si el tipo es numérico, falso en caso contrario.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.IsNumeric(System.TypeCode)">
            <summary>
            Comprueba si el tipo especificado es numérico.
            </summary>
            <param name="type">El tipo a comprobar.</param>
            <returns>Verdadero si el tipo es numérico, falso en caso contrario.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.IsNumeric(VisionNet.Core.Types.BasicTypeCode)">
            <summary>
            Comprueba si el tipo especificado es numérico.
            </summary>
            <param name="type">El tipo a comprobar.</param>
            <returns>Verdadero si el tipo es numérico, falso en caso contrario.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.ToType(System.TypeCode,System.Type@)">
            <summary>
            Convierte el tipo especificado a su correspondiente código de tipo.
            </summary>
            <param name="value">El tipo a convertir.</param>
            <param name="result">El código de tipo correspondiente al tipo.</param>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.ToType(VisionNet.Core.Types.BasicTypeCode,System.Type@)">
            <summary>
            Convierte el tipo especificado a su correspondiente código de tipo.
            </summary>
            <param name="value">El tipo a convertir.</param>
            <param name="result">El código de tipo correspondiente al tipo.</param>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.ToTypeCode(System.Type,System.TypeCode@)">
            <summary>
            Convierte el tipo especificado a su correspondiente código de tipo.
            </summary>
            <param name="value">El tipo a convertir.</param>
            <param name="result">El código de tipo correspondiente al tipo.</param>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.ToBasicType(System.TypeCode,VisionNet.Core.Types.BasicTypeCode@)">
            <summary>
            Convierte el tipo especificado a su correspondiente código de tipo básico.
            </summary>
            <param name="value">El tipo a convertir.</param>
            <param name="result">El código de tipo correspondiente al tipo básico.</param>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.ToTypeCode(VisionNet.Core.Types.BasicTypeCode,System.TypeCode@)">
            <summary>
            Convierte el tipo especificado a su correspondiente código de tipo.
            </summary>
            <param name="value">El tipo a convertir.</param>
            <param name="result">El código de tipo correspondiente al tipo.</param>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.SizeOf(System.TypeCode)">
            <summary>
            Devuelve el tamaño en bytes del tipo especificado.
            </summary>
            <param name="type">El tipo del que obtener el tamaño.</param>
            <returns>El tamaño en bytes del tipo.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.SizeOf(System.Type)">
            <summary>
            Devuelve el tamaño en bytes del tipo especificado.
            </summary>
            <param name="type">El tipo del que obtener el tamaño.</param>
            <returns>El tamaño en bytes del tipo.</returns>        
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.MinValue(System.Type)">
            <summary>
            Devuelve el valor mínimo del tipo numérico especificado.
            </summary>
            <param name="type">El tipo numérico del que obtener el valor mínimo.</param>
            <returns>El valor mínimo del tipo numérico.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.MinValue(System.TypeCode)">
            <summary>
            Devuelve el valor mínimo del tipo numérico especificado.
            </summary>
            <param name="type">El tipo numérico del que obtener el valor mínimo.</param>
            <returns>El valor mínimo del tipo numérico.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.MaxValue(System.Type)">
            <summary>
            Devuelve el valor máximo del tipo numérico especificado.
            </summary>
            <param name="type">El tipo numérico del que obtener el valor máximo.</param>
            <returns>El valor máximo del tipo numérico.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.MaxValue(System.TypeCode)">
            <summary>
            Devuelve el valor máximo del tipo numérico especificado.
            </summary>
            <param name="typeCode">El tipo numérico del que obtener el valor máximo.</param>
            <returns>El valor máximo del tipo numérico.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.DefaultValue(System.TypeCode)">
            <summary>
            Devuelve el valor por defecto del tipo numérico especificado.
            </summary>
            <param name="typeCode">El tipo del que obtener el valor por defecto.</param>
            <returns>El valor por defecto del tipo especificado.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.MinValue(VisionNet.Core.Types.BasicTypeCode)">
            <summary>
            Devuelve el valor mínimo del tipo numérico especificado.
            </summary>
            <param name="type">El tipo numérico del que obtener el valor mínimo.</param>
            <returns>El valor mínimo del tipo numérico.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.MaxValue(VisionNet.Core.Types.BasicTypeCode)">
            <summary>
            Devuelve el valor máximo del tipo numérico especificado.
            </summary>
            <param name="typeCode">El tipo numérico del que obtener el valor máximo.</param>
            <returns>El valor máximo del tipo numérico.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeExtensions.DefaultValue(VisionNet.Core.Types.BasicTypeCode,System.Boolean)">
            <summary>
            Devuelve el valor por defecto del tipo numérico especificado.
            </summary>
            <param name="typeCode">El tipo del que obtener el valor por defecto.</param>
            <returns>El valor por defecto del tipo especificado.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeSwitch`1.Case``1(System.Func{`0})">
            <summary> The Case function adds a help to use a swith stantment fot type classes.
            The first parameter is the type of object that will be matched against.
            The second parameter is a function that returns an object of type O.</summary>
            <param name="func"> The function to be executed when the type matches. </param>
            <returns> A typeswitch object.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeSwitch`1.Default(System.Func{`0})">
            <summary> The Default function is used to set the default case for a TypeSwitch.
            This function should be called last in the chain of Case functions, and it will 
            return an instance of TypeSwitch&lt;O&gt; so that you can continue chaining Case functions.</summary>
            <param name="func"> This is the function that will be executed if no other case matches. </param>
            <returns> The value of the function passed in.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeSwitch`1.Switch(System.Type)">
            <summary> The Switch function is a dictionary of functions that return an object.
            The key to the dictionary is a Type, and the value is a function that returns an object.
            This allows us to create objects based on their type.</summary>
            <param name="t"> The type of the object to be returned</param>
            <returns> The value of the function that is stored in matches[t]()</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeSwitch`1.Switch``1">
            <summary> The Switch function is a generic function that takes in a type parameter T.
            The Switch function then returns the value of the matches dictionary at key typeof(T).
            This means that if you call Switch&lt;int&gt;(), it will return the value of matches[typeof(int)]().</summary>
            <returns> The value of the function that is associated with the type t.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeSwitchConverter`1.Case``1(System.Func{System.Object,`0})">
            <summary> The Case function adds a new case to the switch statement.
            The first parameter is the type of object that will be matched, and
            the second parameter is a function that takes an object of type T and returns 
            an object of type O.</summary>
            <param name="Func&lt;object&lt;object"> The type of the object.</param>
            <param name="func"> </param>
            <returns> A typeswitchconverter object.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeSwitchConverter`1.Default(System.Func{System.Object,`0})">
            <summary> The Default function is used to set the default case for a TypeSwitch.
            If no other cases are matched, this function will be called.</summary>
            <param name="Func&lt;object&lt;object"> The func&amp;lt;object, o&gt; is a delegate that represents the method that will handle the conversion.</param>
            <param name="func"> The function to exectute </param>
            <returns> An object of type o.</returns>
        </member>
        <member name="M:VisionNet.Core.Types.TypeSwitchConverter`1.Switch(System.Object)">
            <summary> The Switch function is a pattern matching function that takes an object and returns the result of the first match found.
            The matches are defined in a dictionary, where each key is a type and each value is an action to perform on that type.</summary>
            <param name="x"> The object to be matched</param>
            <returns> The value of the function that matches the type of x.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VisionNet.Core.Types.TypeToBasicAdapter.Convert(System.Type,VisionNet.Core.Types.BasicTypeCode@)" -->
        <!-- Badly formed XML comment ignored for member "M:VisionNet.Core.Types.TypeToBasicAdapter.Convert(VisionNet.Core.Types.BasicTypeCode,System.Type@)" -->
        <member name="T:VisionNet.Drawing.ColorGenerator">
            <summary>
            The ColorGenerator class generates a sequence of unique colors for visualization purposes.
            It maintains a cache of pre-generated colors and provides methods to retrieve them either
            as hex strings or Color objects.
            </summary>
        </member>
        <member name="M:VisionNet.Drawing.ColorGenerator.#ctor(System.Int32)">
            <summary> The ColorGenerator function generates a random color string.</summary>
            <param name="maxColors"> The maximum number of colors to generate</param>
            <returns> A string value</returns>
        </member>
        <member name="M:VisionNet.Drawing.ColorGenerator.NextColorString">
            <summary> The NextColorString function returns a string of the next color in the list.
            The function also increments _index by 1, so that it will return the next color on 
            subsequent calls.</summary>
            <returns> The color of the next index in the array</returns>
        </member>
        <member name="M:VisionNet.Drawing.ColorGenerator.NextColor">
            <summary> The NextColor function returns a random color from the list of colors in the ColorList.
            The function first generates a random number between 0 and 1, then multiplies that by the length of 
            ColorList to get an index for which color to return. It then converts that index into a string, and uses 
            int.Parse() with System.Globalization.NumberStyles as HexNumber to convert it into an integer value.</summary>
            <returns> A color string in hexadecimal format.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ColorGenerator.GetColor(System.Int32)">
            <summary> The GetColor function takes an index and returns a color.
            The function uses the ColorCache to get the color from a list of colors.
            If there are more indexes than colors, it will loop through the list of colors.</summary>
            <param name="index"> The index of the color in the colorcache array</param>
            <returns> A color from the colorcache array.</returns>
        </member>
        <member name="T:VisionNet.Drawing.JSonSerializableDoublePoint">
            <summary>
            Represents a point in a two-dimensional space with serializable double precision coordinates.
            </summary>
        </member>
        <member name="P:VisionNet.Drawing.JSonSerializableDoublePoint.X">
            <summary>
            Gets or sets the horizontal coordinate of the point.
            </summary>
        </member>
        <member name="P:VisionNet.Drawing.JSonSerializableDoublePoint.Y">
            <summary>
            Gets or sets the vertical coordinate of the point.
            </summary>
        </member>
        <member name="M:VisionNet.Drawing.JSonSerializableDoublePoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Drawing.JSonSerializableDoublePoint"/> class with default values.
            </summary>
            <returns>A new instance of <see cref="T:VisionNet.Drawing.JSonSerializableDoublePoint"/> with X and Y set to zero.</returns>
        </member>
        <member name="M:VisionNet.Drawing.JSonSerializableDoublePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Drawing.JSonSerializableDoublePoint"/> class with the specified coordinates.
            </summary>
            <param name="x">The horizontal coordinate of the point.</param>
            <param name="y">The vertical coordinate of the point.</param>
            <returns>A new instance of <see cref="T:VisionNet.Drawing.JSonSerializableDoublePoint"/> with X and Y set to the specified values.</returns>
        </member>
        <member name="T:VisionNet.Drawing.JSonSerializableDoubleRectangle">
            <summary>
            Represents a rectangle with double precision values for the X, Y coordinates, Width, and Height properties.
            This class is serializable and intended to be used for JSON serialization.
            </summary>
        </member>
        <member name="M:VisionNet.Drawing.JSonSerializableDoubleRectangle.#ctor">
            <summary> The JSonSerializableDoubleRectangle function is a constructor that creates an instance of the JSonSerializableDoubleRectangle class.</summary>
            <returns> A jsonserializabledoublerectangle.</returns>
        </member>
        <member name="M:VisionNet.Drawing.JSonSerializableDoubleRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Drawing.JSonSerializableDoubleRectangle"/> class with the specified X, Y, Width, and Height values.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns> A jsonserializabledoublerectangle.</returns>
        </member>
        <member name="P:VisionNet.Drawing.JSonSerializableDoubleRectangle.X">
            <summary>
            Gets or sets the x-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNet.Drawing.JSonSerializableDoubleRectangle.Y">
            <summary>
            Gets or sets the y-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNet.Drawing.JSonSerializableDoubleRectangle.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:VisionNet.Drawing.JSonSerializableDoubleRectangle.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="T:VisionNet.Drawing.JSonSerializableIntPoint">
            <summary>
            Represents a point with integer values for the X and Y coordinates.
            This class is serializable and intended to be used for JSON serialization.
            </summary>
        </member>
        <member name="M:VisionNet.Drawing.JSonSerializableIntPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Drawing.JSonSerializableIntPoint"/> class with default values.
            </summary>
        </member>
        <member name="M:VisionNet.Drawing.JSonSerializableIntPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:VisionNet.Drawing.JSonSerializableIntPoint"/> class with the specified X and Y coordinates.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <returns> A jsonserializableintpoint</returns>
        </member>
        <member name="P:VisionNet.Drawing.JSonSerializableIntPoint.X">
            <summary>
            Gets or sets the x-coordinate of the point.
            </summary>
        </member>
        <member name="P:VisionNet.Drawing.JSonSerializableIntPoint.Y">
            <summary>
            Gets or sets the y-coordinate of the point.
            </summary>
        </member>
        <member name="T:VisionNet.Drawing.LocationType">
            <summary>
            Represents the possible locations of a component or element.
            </summary>
        </member>
        <member name="F:VisionNet.Drawing.LocationType.Top">
            <summary>
            The top location.
            </summary>
        </member>
        <member name="F:VisionNet.Drawing.LocationType.Right">
            <summary>
            The right location.
            </summary>
        </member>
        <member name="F:VisionNet.Drawing.LocationType.Bottom">
            <summary>
            The bottom location.
            </summary>
        </member>
        <member name="F:VisionNet.Drawing.LocationType.Left">
            <summary>
            The left location.
            </summary>
        </member>
        <member name="T:VisionNet.Drawing.ShapeExtension">
            <summary>
            Provides extension methods for geometric shapes and related calculations.
            </summary>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.IsInside(System.Drawing.Point,System.Drawing.Rectangle)">
            <summary> The IsInside function determines whether a point is inside of a rectangle.</summary>
            <param name="source"> The point to check</param>
            <param name="limit"> This is the limit of the rectangle.
            </param>
            <returns> True if the point is inside the rectangle</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.Clamp(System.Drawing.Point,System.Drawing.Rectangle)">
            <summary> The Clamp function returns a point that is within the specified rectangle.</summary>
            <param name="source"> The source.</param>
            <param name="limit"> 
            </param>
            <returns> A point</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.CenterOfMass(System.Collections.Generic.IEnumerable{System.Drawing.Point})">
            <summary>
            Calculates the center of mass (average position) of a collection of points.
            </summary>
            <param name="points">The collection of points to calculate the center of mass for.</param>
            <returns>
            A <see cref="T:System.Drawing.Point"/> representing the center of mass of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the collection is empty.
            </exception>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.CenterOfMass(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary> The Center function takes a collection of points and returns the center of mass point.</summary>
            <param name="points"> The points.
            </param>
            <returns> The center point of a list of points.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.EuclideanDistance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculates the Euclidean distance between two <see cref="T:System.Drawing.PointF"/> objects.
            </summary>
            <param name="pointA">The first <see cref="T:System.Drawing.PointF"/>.</param>
            <param name="pointB">The second <see cref="T:System.Drawing.PointF"/>.</param>
            <returns>The Euclidean distance between the two points.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.EuclideanDistance(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Calculates the Euclidean distance between a <see cref="T:System.Drawing.PointF"/> and a specified point (X, Y).
            </summary>
            <param name="pointA">The first <see cref="T:System.Drawing.PointF"/>.</param>
            <param name="x">The X coordinate of the second point.</param>
            <param name="y">The Y coordinate of the second point.</param>
            <returns>The Euclidean distance between the <see cref="T:System.Drawing.PointF"/> and the specified coordinates.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.Scale(System.Drawing.Point,System.Double)">
            <summary>
            Scales the <see cref="T:System.Drawing.Point"/> by the specified factor.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.Point"/> to scale.</param>
            <param name="scale">The scaling factor.</param>
            <returns>A new <see cref="T:System.Drawing.Point"/> that is scaled by the specified factor.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.Scale(System.Drawing.PointF,System.Double)">
            <summary>
            Scales the <see cref="T:System.Drawing.PointF"/> by the specified factor.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.PointF"/> to scale.</param>
            <param name="scale">The scaling factor.</param>
            <returns>A new <see cref="T:System.Drawing.PointF"/> that is scaled by the specified factor.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.ToInt(System.Drawing.PointF)">
            <summary>
            Converts a <see cref="T:System.Drawing.PointF"/> to a <see cref="T:System.Drawing.Point"/> by truncating the coordinates to integers.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.PointF"/> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Point"/> with integer values derived from the <see cref="T:System.Drawing.PointF"/>.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.ToFloat(System.Drawing.Point)">
            <summary>
            Converts a <see cref="T:System.Drawing.Point"/> to a <see cref="T:System.Drawing.PointF"/> by converting the integer coordinates to floats.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.Point"/> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.PointF"/> with floating-point values derived from the <see cref="T:System.Drawing.Point"/>.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.TranslateTo(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Translates a point by the specified translation.
            </summary>
            <param name="point">The point to translate.</param>
            <param name="translation">The translation to apply.</param>
            <returns>A new point translated by the given translation.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.TranslateFrom(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Translates a point by the given translation.
            </summary>
            <param name="point">The point to translate.</param>
            <param name="translation">The translation to apply.</param>
            <returns>A new point with the x and y values of the point parameter added to the x and y values of translation.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.IsInside(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Determines whether the source rectangle is inside of the limit rectangle.
            </summary>
            <param name="source">The rectangle to check.</param>
            <param name="limit">The rectangle that defines the limit.</param>
            <returns>True if the source rectangle is inside or equal to the limit rectangle; otherwise, false.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.Clamp(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Returns a rectangle that is the intersection of the source and limit rectangles.
            </summary>
            <param name="source">The source rectangle.</param>
            <param name="limit">The rectangle that defines the limit.</param>
            <returns>A rectangle that is within the bounds of the specified limit.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.Area(System.Drawing.Rectangle)">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> extension method that calculates the area of the rectangle.
            </summary>
            <param name="source">The rectangle to calculate the area of.</param>
            <returns>The area of the rectangle as a long value.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.IsBiggerThan(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> extension method that determines if the rectangle is larger than the given size.
            </summary>
            <param name="source">The rectangle to compare.</param>
            <param name="comparison">The size to compare the rectangle against.</param>
            <returns>True if the rectangle is larger in both width and height, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.IsBiggerOrEqualThan(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            The <see cref="T:System.Drawing.Rectangle"/> extension method that determines if the rectangle is larger than or equal to the given size.
            </summary>
            <param name="source">The rectangle to compare.</param>
            <param name="comparison">The size to compare the rectangle against.</param>
            <returns>True if the rectangle is larger than or equal to the given size, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.IsSmallerThan(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Determines whether the source rectangle is smaller than the comparison size.
            </summary>
            <param name="source">The source rectangle to compare.</param>
            <param name="comparison">The size to compare with.</param>
            <returns>True if the source rectangle is smaller than the comparison size, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.IsSmallerOrEqualThan(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Determines whether the source rectangle is smaller or equal to the comparison size.
            </summary>
            <param name="source">The rectangle to compare.</param>
            <param name="comparison">The size to compare the rectangle with.</param>
            <returns>True if the source rectangle is smaller or equal to the comparison size, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.CalcIntersectedArea(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Calculates the area of intersection between two rectangles.
            </summary>
            <param name="outsider">The rectangle being tested for intersection.</param>
            <param name="insider">The rectangle to be compared with the outsider rectangle.</param>
            <returns>The area of the intersection between the two rectangles, or 0 if no intersection exists.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.Center(System.Drawing.Rectangle)">
            <summary>
            Returns the center point of the specified rectangle.
            </summary>
            <param name="source">The rectangle from which the center is calculated.</param>
            <returns>A <see cref="T:System.Drawing.Point"/> that represents the center of the rectangle.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.ToInt(System.Drawing.RectangleF)">
            <summary>
            Converts a <see cref="T:System.Drawing.RectangleF"/> to a <see cref="T:System.Drawing.Rectangle"/> by truncating the coordinates and dimensions to integers.
            </summary>
            <param name="rectangle">The <see cref="T:System.Drawing.RectangleF"/> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.Rectangle"/> with integer values derived from the <see cref="T:System.Drawing.RectangleF"/>.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.ToFloat(System.Drawing.Rectangle)">
            <summary>
            Converts a <see cref="T:System.Drawing.Rectangle"/> to a <see cref="T:System.Drawing.RectangleF"/> by converting the coordinates and dimensions to floats.
            </summary>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> to convert.</param>
            <returns>A new <see cref="T:System.Drawing.RectangleF"/> with floating-point values derived from the <see cref="T:System.Drawing.Rectangle"/>.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.TranslateTo(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Translates a rectangle by the specified translation vector, moving it to a new position.
            </summary>
            <param name="rectangle">The rectangle to translate.</param>
            <param name="translation">The translation vector to apply to the rectangle.</param>
            <returns>A new <see cref="T:System.Drawing.Rectangle"/> that is translated by the specified vector.</returns>
        </member>
        <member name="M:VisionNet.Drawing.ShapeExtension.TranslateFrom(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Translates a rectangle by the specified translation vector.
            </summary>
            <param name="rectangle">The rectangle to translate.</param>
            <param name="translation">The translation vector that specifies how much to move the rectangle.</param>
            <returns>A new <see cref="T:System.Drawing.Rectangle"/> that is translated by the specified translation.</returns>
        </member>
        <member name="T:VisionNet.IO.Paths.PathRepository">
            <summary>
            Represents a repository for managing paths with associated IDs.
            Implements the ISimpleRepository interface for handling basic CRUD operations.
            </summary>
        </member>
        <member name="M:VisionNet.IO.Paths.PathRepository.Count">
            <summary>
            Gets the count of paths in the repository.
            </summary>
            <returns>The number of paths in the collection.</returns>
        </member>
        <member name="M:VisionNet.IO.Paths.PathRepository.Delete(System.String)">
            <summary>
            Deletes a path from the repository based on the provided ID.
            </summary>
            <param name="id">The ID of the path to remove.</param>
        </member>
        <member name="M:VisionNet.IO.Paths.PathRepository.Exists(System.String)">
            <summary>
            Checks if a path with the specified ID exists in the repository.
            </summary>
            <param name="id">The ID of the path to check.</param>
            <returns>True if the path exists, otherwise false.</returns>
        </member>
        <member name="M:VisionNet.IO.Paths.PathRepository.Get(System.String)">
            <summary>
            Retrieves the path associated with the specified ID.
            </summary>
            <param name="id">The ID of the path to retrieve.</param>
            <returns>The path associated with the given ID.</returns>
        </member>
        <member name="M:VisionNet.IO.Paths.PathRepository.GetAll">
            <summary>
            Retrieves all paths in the repository.
            </summary>
            <returns>A list of all paths.</returns>
        </member>
        <member name="M:VisionNet.IO.Paths.PathRepository.Insert(System.String,System.String)">
            <summary>
            Inserts a new path into the repository with the specified ID.
            If the ID already exists, it updates the existing path.
            </summary>
            <param name="id">The ID of the path to insert.</param>
            <param name="entity">The path associated with the ID.</param>
        </member>
        <member name="M:VisionNet.IO.Paths.PathRepository.Update(System.String,System.Func{System.String,System.String})">
            <summary>
            Updates the path associated with the specified ID using the provided update action.
            Throws a KeyNotFoundException if the ID does not exist in the repository.
            </summary>
            <param name="id">The ID of the path to update.</param>
            <param name="updateAction">The action to update the path.</param>
            <returns>The updated path.</returns>
        </member>
    </members>
</doc>
